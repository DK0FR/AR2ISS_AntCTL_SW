
AR2ISS_AntCTL_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800a9f8  0800a9f8  0001a9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aafc  0800aafc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800aafc  0800aafc  0001aafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab04  0800ab04  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab04  0800ab04  0001ab04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab08  0800ab08  0001ab08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ab0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003990  20000010  0800ab1c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200039a0  0800ab1c  000239a0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030c4b  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057c3  00000000  00000000  00050c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002408  00000000  00000000  00056458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021b0  00000000  00000000  00058860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031c39  00000000  00000000  0005aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a429  00000000  00000000  0008c649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012bb7c  00000000  00000000  000b6a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e25ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009760  00000000  00000000  001e2644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a9e0 	.word	0x0800a9e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	0800a9e0 	.word	0x0800a9e0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b980 	b.w	8000558 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8084 	bne.w	8000388 <__udivmoddi4+0x118>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d943      	bls.n	800030e <__udivmoddi4+0x9e>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	4091      	lsls	r1, r2
 8000292:	4097      	lsls	r7, r2
 8000294:	fa24 f000 	lsr.w	r0, r4, r0
 8000298:	4094      	lsls	r4, r2
 800029a:	ea40 0801 	orr.w	r8, r0, r1
 800029e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fa1f fe87 	uxth.w	lr, r7
 80002a8:	fbb8 f6fc 	udiv	r6, r8, ip
 80002ac:	fb0c 8116 	mls	r1, ip, r6, r8
 80002b0:	fb06 f00e 	mul.w	r0, r6, lr
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	4298      	cmp	r0, r3
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0x5c>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 31ff 	add.w	r1, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x5a>
 80002c4:	4298      	cmp	r0, r3
 80002c6:	f200 8131 	bhi.w	800052c <__udivmoddi4+0x2bc>
 80002ca:	460e      	mov	r6, r1
 80002cc:	1a19      	subs	r1, r3, r0
 80002ce:	b2a3      	uxth	r3, r4
 80002d0:	fbb1 f0fc 	udiv	r0, r1, ip
 80002d4:	fb0c 1110 	mls	r1, ip, r0, r1
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0x84>
 80002e4:	193c      	adds	r4, r7, r4
 80002e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x82>
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	f200 811a 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80002f2:	4618      	mov	r0, r3
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0x98>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xa2>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d152      	bne.n	80003c0 <__udivmoddi4+0x150>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	0c21      	lsrs	r1, r4, #16
 8000328:	fbb3 fcfe 	udiv	ip, r3, lr
 800032c:	fb0e 301c 	mls	r0, lr, ip, r3
 8000330:	fb08 f90c 	mul.w	r9, r8, ip
 8000334:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000338:	4589      	cmp	r9, r1
 800033a:	d90b      	bls.n	8000354 <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000342:	bf2c      	ite	cs
 8000344:	2001      	movcs	r0, #1
 8000346:	2000      	movcc	r0, #0
 8000348:	4589      	cmp	r9, r1
 800034a:	d902      	bls.n	8000352 <__udivmoddi4+0xe2>
 800034c:	2800      	cmp	r0, #0
 800034e:	f000 80f0 	beq.w	8000532 <__udivmoddi4+0x2c2>
 8000352:	469c      	mov	ip, r3
 8000354:	eba1 0109 	sub.w	r1, r1, r9
 8000358:	b2a3      	uxth	r3, r4
 800035a:	fbb1 f0fe 	udiv	r0, r1, lr
 800035e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000362:	fb08 f800 	mul.w	r8, r8, r0
 8000366:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036a:	45a0      	cmp	r8, r4
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x10e>
 800036e:	193c      	adds	r4, r7, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x10c>
 8000376:	45a0      	cmp	r8, r4
 8000378:	f200 80d2 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 800037c:	4618      	mov	r0, r3
 800037e:	eba4 0408 	sub.w	r4, r4, r8
 8000382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000386:	e7ba      	b.n	80002fe <__udivmoddi4+0x8e>
 8000388:	428b      	cmp	r3, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x130>
 800038c:	2d00      	cmp	r5, #0
 800038e:	f000 80be 	beq.w	800050e <__udivmoddi4+0x29e>
 8000392:	2600      	movs	r6, #0
 8000394:	e9c5 0100 	strd	r0, r1, [r5]
 8000398:	4630      	mov	r0, r6
 800039a:	4631      	mov	r1, r6
 800039c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003a0:	fab3 f683 	clz	r6, r3
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d14d      	bne.n	8000444 <__udivmoddi4+0x1d4>
 80003a8:	428b      	cmp	r3, r1
 80003aa:	f0c0 80b3 	bcc.w	8000514 <__udivmoddi4+0x2a4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f240 80b0 	bls.w	8000514 <__udivmoddi4+0x2a4>
 80003b4:	4630      	mov	r0, r6
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0a6      	beq.n	8000308 <__udivmoddi4+0x98>
 80003ba:	e9c5 4800 	strd	r4, r8, [r5]
 80003be:	e7a3      	b.n	8000308 <__udivmoddi4+0x98>
 80003c0:	4097      	lsls	r7, r2
 80003c2:	f1c2 0320 	rsb	r3, r2, #32
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	fa24 f303 	lsr.w	r3, r4, r3
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	4094      	lsls	r4, r2
 80003da:	4303      	orrs	r3, r0
 80003dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e0:	0c1e      	lsrs	r6, r3, #16
 80003e2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ea:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80003ee:	458c      	cmp	ip, r1
 80003f0:	d90e      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003f2:	1879      	adds	r1, r7, r1
 80003f4:	f100 36ff 	add.w	r6, r0, #4294967295
 80003f8:	bf2c      	ite	cs
 80003fa:	f04f 0901 	movcs.w	r9, #1
 80003fe:	f04f 0900 	movcc.w	r9, #0
 8000402:	458c      	cmp	ip, r1
 8000404:	d903      	bls.n	800040e <__udivmoddi4+0x19e>
 8000406:	f1b9 0f00 	cmp.w	r9, #0
 800040a:	f000 8096 	beq.w	800053a <__udivmoddi4+0x2ca>
 800040e:	4630      	mov	r0, r6
 8000410:	eba1 010c 	sub.w	r1, r1, ip
 8000414:	b29b      	uxth	r3, r3
 8000416:	fbb1 f6fe 	udiv	r6, r1, lr
 800041a:	fb0e 1116 	mls	r1, lr, r6, r1
 800041e:	fb06 fc08 	mul.w	ip, r6, r8
 8000422:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000426:	458c      	cmp	ip, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1ca>
 800042a:	1879      	adds	r1, r7, r1
 800042c:	f106 33ff 	add.w	r3, r6, #4294967295
 8000430:	d202      	bcs.n	8000438 <__udivmoddi4+0x1c8>
 8000432:	458c      	cmp	ip, r1
 8000434:	f200 8088 	bhi.w	8000548 <__udivmoddi4+0x2d8>
 8000438:	461e      	mov	r6, r3
 800043a:	eba1 030c 	sub.w	r3, r1, ip
 800043e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000442:	e770      	b.n	8000326 <__udivmoddi4+0xb6>
 8000444:	f1c6 0720 	rsb	r7, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa02 fc06 	lsl.w	ip, r2, r6
 8000450:	fa01 fe06 	lsl.w	lr, r1, r6
 8000454:	40fa      	lsrs	r2, r7
 8000456:	fa20 f807 	lsr.w	r8, r0, r7
 800045a:	40f9      	lsrs	r1, r7
 800045c:	fa00 f306 	lsl.w	r3, r0, r6
 8000460:	4322      	orrs	r2, r4
 8000462:	ea48 040e 	orr.w	r4, r8, lr
 8000466:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800046a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800046e:	fa1f f982 	uxth.w	r9, r2
 8000472:	fbb1 faf8 	udiv	sl, r1, r8
 8000476:	fb08 111a 	mls	r1, r8, sl, r1
 800047a:	fb0a f009 	mul.w	r0, sl, r9
 800047e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000482:	4570      	cmp	r0, lr
 8000484:	d90e      	bls.n	80004a4 <__udivmoddi4+0x234>
 8000486:	eb12 0e0e 	adds.w	lr, r2, lr
 800048a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800048e:	bf2c      	ite	cs
 8000490:	f04f 0b01 	movcs.w	fp, #1
 8000494:	f04f 0b00 	movcc.w	fp, #0
 8000498:	4570      	cmp	r0, lr
 800049a:	d902      	bls.n	80004a2 <__udivmoddi4+0x232>
 800049c:	f1bb 0f00 	cmp.w	fp, #0
 80004a0:	d04e      	beq.n	8000540 <__udivmoddi4+0x2d0>
 80004a2:	468a      	mov	sl, r1
 80004a4:	ebae 0e00 	sub.w	lr, lr, r0
 80004a8:	b2a4      	uxth	r4, r4
 80004aa:	fbbe f0f8 	udiv	r0, lr, r8
 80004ae:	fb08 ee10 	mls	lr, r8, r0, lr
 80004b2:	fb00 f909 	mul.w	r9, r0, r9
 80004b6:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004ba:	45f1      	cmp	r9, lr
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x25e>
 80004be:	eb12 0e0e 	adds.w	lr, r2, lr
 80004c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80004c6:	d201      	bcs.n	80004cc <__udivmoddi4+0x25c>
 80004c8:	45f1      	cmp	r9, lr
 80004ca:	d840      	bhi.n	800054e <__udivmoddi4+0x2de>
 80004cc:	4608      	mov	r0, r1
 80004ce:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80004d2:	ebae 0e09 	sub.w	lr, lr, r9
 80004d6:	fba0 890c 	umull	r8, r9, r0, ip
 80004da:	45ce      	cmp	lr, r9
 80004dc:	4641      	mov	r1, r8
 80004de:	464c      	mov	r4, r9
 80004e0:	d302      	bcc.n	80004e8 <__udivmoddi4+0x278>
 80004e2:	d106      	bne.n	80004f2 <__udivmoddi4+0x282>
 80004e4:	4543      	cmp	r3, r8
 80004e6:	d204      	bcs.n	80004f2 <__udivmoddi4+0x282>
 80004e8:	3801      	subs	r0, #1
 80004ea:	ebb8 010c 	subs.w	r1, r8, ip
 80004ee:	eb69 0402 	sbc.w	r4, r9, r2
 80004f2:	b37d      	cbz	r5, 8000554 <__udivmoddi4+0x2e4>
 80004f4:	1a5a      	subs	r2, r3, r1
 80004f6:	eb6e 0e04 	sbc.w	lr, lr, r4
 80004fa:	40f2      	lsrs	r2, r6
 80004fc:	fa0e f707 	lsl.w	r7, lr, r7
 8000500:	fa2e f306 	lsr.w	r3, lr, r6
 8000504:	2600      	movs	r6, #0
 8000506:	4317      	orrs	r7, r2
 8000508:	e9c5 7300 	strd	r7, r3, [r5]
 800050c:	e6fc      	b.n	8000308 <__udivmoddi4+0x98>
 800050e:	462e      	mov	r6, r5
 8000510:	4628      	mov	r0, r5
 8000512:	e6f9      	b.n	8000308 <__udivmoddi4+0x98>
 8000514:	1a84      	subs	r4, r0, r2
 8000516:	eb61 0103 	sbc.w	r1, r1, r3
 800051a:	2001      	movs	r0, #1
 800051c:	4688      	mov	r8, r1
 800051e:	e74a      	b.n	80003b6 <__udivmoddi4+0x146>
 8000520:	3802      	subs	r0, #2
 8000522:	443c      	add	r4, r7
 8000524:	e72b      	b.n	800037e <__udivmoddi4+0x10e>
 8000526:	3802      	subs	r0, #2
 8000528:	443c      	add	r4, r7
 800052a:	e6e3      	b.n	80002f4 <__udivmoddi4+0x84>
 800052c:	3e02      	subs	r6, #2
 800052e:	443b      	add	r3, r7
 8000530:	e6cc      	b.n	80002cc <__udivmoddi4+0x5c>
 8000532:	f1ac 0c02 	sub.w	ip, ip, #2
 8000536:	4439      	add	r1, r7
 8000538:	e70c      	b.n	8000354 <__udivmoddi4+0xe4>
 800053a:	3802      	subs	r0, #2
 800053c:	4439      	add	r1, r7
 800053e:	e767      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000540:	f1aa 0a02 	sub.w	sl, sl, #2
 8000544:	4496      	add	lr, r2
 8000546:	e7ad      	b.n	80004a4 <__udivmoddi4+0x234>
 8000548:	3e02      	subs	r6, #2
 800054a:	4439      	add	r1, r7
 800054c:	e775      	b.n	800043a <__udivmoddi4+0x1ca>
 800054e:	3802      	subs	r0, #2
 8000550:	4496      	add	lr, r2
 8000552:	e7bc      	b.n	80004ce <__udivmoddi4+0x25e>
 8000554:	462e      	mov	r6, r5
 8000556:	e6d7      	b.n	8000308 <__udivmoddi4+0x98>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800057e:	4b2f      	ldr	r3, [pc, #188]	; (800063c <MX_ADC1_Init+0xe0>)
 8000580:	4a2f      	ldr	r2, [pc, #188]	; (8000640 <MX_ADC1_Init+0xe4>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000584:	4b2d      	ldr	r3, [pc, #180]	; (800063c <MX_ADC1_Init+0xe0>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058a:	4b2c      	ldr	r3, [pc, #176]	; (800063c <MX_ADC1_Init+0xe0>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b2a      	ldr	r3, [pc, #168]	; (800063c <MX_ADC1_Init+0xe0>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <MX_ADC1_Init+0xe0>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <MX_ADC1_Init+0xe0>)
 800059e:	2204      	movs	r2, #4
 80005a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <MX_ADC1_Init+0xe0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <MX_ADC1_Init+0xe0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_ADC1_Init+0xe0>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0xe0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <MX_ADC1_Init+0xe0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0xe0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <MX_ADC1_Init+0xe0>)
 80005e0:	f001 faea 	bl	8001bb8 <HAL_ADC_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005ea:	f000 fb7d 	bl	8000ce8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	4810      	ldr	r0, [pc, #64]	; (800063c <MX_ADC1_Init+0xe0>)
 80005fa:	f002 f83f 	bl	800267c <HAL_ADCEx_MultiModeConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000604:	f000 fb70 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_ADC1_Init+0xe8>)
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060c:	2306      	movs	r3, #6
 800060e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000614:	237f      	movs	r3, #127	; 0x7f
 8000616:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000618:	2304      	movs	r3, #4
 800061a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0xe0>)
 8000626:	f001 fc19 	bl	8001e5c <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000630:	f000 fb5a 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200035dc 	.word	0x200035dc
 8000640:	42028000 	.word	0x42028000
 8000644:	14f00020 	.word	0x14f00020

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b0ae      	sub	sp, #184	; 0xb8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2294      	movs	r2, #148	; 0x94
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f00a f9b0 	bl	800a9ce <memset>
  if(adcHandle->Instance==ADC1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a27      	ldr	r2, [pc, #156]	; (8000710 <HAL_ADC_MspInit+0xc8>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d146      	bne.n	8000706 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000678:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800067c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800067e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSE;
 8000686:	2303      	movs	r3, #3
 8000688:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800068e:	2308      	movs	r3, #8
 8000690:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000692:	2307      	movs	r3, #7
 8000694:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800069e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 fe5b 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006b4:	f000 fb18 	bl	8000ce8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80006e8:	233b      	movs	r3, #59	; 0x3b
 80006ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <HAL_ADC_MspInit+0xd0>)
 8000702:	f002 fd2d 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	37b8      	adds	r7, #184	; 0xb8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	42028000 	.word	0x42028000
 8000714:	40021000 	.word	0x40021000
 8000718:	42020000 	.word	0x42020000

0800071c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000742:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <MX_FREERTOS_Init+0x3c>)
 8000744:	2100      	movs	r1, #0
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_FREERTOS_Init+0x40>)
 8000748:	f007 fe06 	bl	8008358 <osThreadNew>
 800074c:	4603      	mov	r3, r0
 800074e:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <MX_FREERTOS_Init+0x44>)
 8000750:	6013      	str	r3, [r2, #0]

  /* creation of pttControlTask */
  pttControlTaskHandle = osThreadNew(pttControl, NULL, &pttControlTask_attributes);
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <MX_FREERTOS_Init+0x48>)
 8000754:	2100      	movs	r1, #0
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_FREERTOS_Init+0x4c>)
 8000758:	f007 fdfe 	bl	8008358 <osThreadNew>
 800075c:	4603      	mov	r3, r0
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <MX_FREERTOS_Init+0x50>)
 8000760:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */


  TaskParams param = {
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <MX_FREERTOS_Init+0x54>)
 8000764:	463b      	mov	r3, r7
 8000766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800076a:	6018      	str	r0, [r3, #0]
 800076c:	3304      	adds	r3, #4
 800076e:	8019      	strh	r1, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	0800aa34 	.word	0x0800aa34
 800077c:	08000795 	.word	0x08000795
 8000780:	2000002c 	.word	0x2000002c
 8000784:	0800aa58 	.word	0x0800aa58
 8000788:	080007cd 	.word	0x080007cd
 800078c:	20000030 	.word	0x20000030
 8000790:	0800aa14 	.word	0x0800aa14

08000794 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f007 fe6d 	bl	800847c <osDelay>
	  HAL_GPIO_TogglePin(RJ45_LED2_GPIO_Port, RJ45_LED2_Pin);
 80007a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <_Z16StartDefaultTaskPv+0x34>)
 80007a8:	f002 fe72 	bl	8003490 <HAL_GPIO_TogglePin>
	  osDelay(500);
 80007ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b0:	f007 fe64 	bl	800847c <osDelay>
	  HAL_GPIO_TogglePin(RJ45_LED2_GPIO_Port, RJ45_LED2_Pin);
 80007b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <_Z16StartDefaultTaskPv+0x34>)
 80007ba:	f002 fe69 	bl	8003490 <HAL_GPIO_TogglePin>
	  osDelay(500);
 80007be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c2:	f007 fe5b 	bl	800847c <osDelay>
    osDelay(1);
 80007c6:	e7e9      	b.n	800079c <_Z16StartDefaultTaskPv+0x8>
 80007c8:	42020800 	.word	0x42020800

080007cc <_Z10pttControlPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pttControl */
__weak void pttControl(void *argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pttControl */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(500);
 80007d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d8:	f007 fe50 	bl	800847c <osDelay>
 80007dc:	e7fa      	b.n	80007d4 <_Z10pttControlPv+0x8>
	...

080007e0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_CRC_Init+0x3c>)
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <MX_CRC_Init+0x40>)
 80007e8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_CRC_Init+0x3c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_CRC_Init+0x3c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_CRC_Init+0x3c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_CRC_Init+0x3c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_CRC_Init+0x3c>)
 8000804:	2201      	movs	r2, #1
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_CRC_Init+0x3c>)
 800080a:	f002 f8bb 	bl	8002984 <HAL_CRC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000814:	f000 fa68 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20003644 	.word	0x20003644
 8000820:	40023000 	.word	0x40023000

08000824 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_CRC_MspInit+0x38>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10b      	bne.n	800084e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_CRC_MspInit+0x3c>)
 8000838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_CRC_MspInit+0x3c>)
 800083c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000840:	6493      	str	r3, [r2, #72]	; 0x48
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <HAL_CRC_MspInit+0x3c>)
 8000844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023000 	.word	0x40023000
 8000860:	40021000 	.word	0x40021000

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_DMA_Init+0x60>)
 800086c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_DMA_Init+0x60>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6493      	str	r3, [r2, #72]	; 0x48
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_DMA_Init+0x60>)
 8000878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_DMA_Init+0x60>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <MX_DMA_Init+0x60>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6493      	str	r3, [r2, #72]	; 0x48
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_DMA_Init+0x60>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2105      	movs	r1, #5
 800089e:	201d      	movs	r0, #29
 80008a0:	f002 f848 	bl	8002934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008a4:	201d      	movs	r0, #29
 80008a6:	f002 f85f 	bl	8002968 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2105      	movs	r1, #5
 80008ae:	201e      	movs	r0, #30
 80008b0:	f002 f840 	bl	8002934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008b4:	201e      	movs	r0, #30
 80008b6:	f002 f857 	bl	8002968 <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b45      	ldr	r3, [pc, #276]	; (80009f4 <MX_GPIO_Init+0x12c>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a44      	ldr	r2, [pc, #272]	; (80009f4 <MX_GPIO_Init+0x12c>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b42      	ldr	r3, [pc, #264]	; (80009f4 <MX_GPIO_Init+0x12c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <MX_GPIO_Init+0x12c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a3e      	ldr	r2, [pc, #248]	; (80009f4 <MX_GPIO_Init+0x12c>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <MX_GPIO_Init+0x12c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <MX_GPIO_Init+0x12c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a38      	ldr	r2, [pc, #224]	; (80009f4 <MX_GPIO_Init+0x12c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <MX_GPIO_Init+0x12c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <MX_GPIO_Init+0x12c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a32      	ldr	r2, [pc, #200]	; (80009f4 <MX_GPIO_Init+0x12c>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MX_GPIO_Init+0x12c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Rj45_LED1_Pin|RJ45_LED2_Pin|PreAmp_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000944:	482c      	ldr	r0, [pc, #176]	; (80009f8 <MX_GPIO_Init+0x130>)
 8000946:	f002 fd8b 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LDC_EN_Pin|LCD_SEL_Pin|ROT_UP_Pin|ROT_DOWN_Pin
 800094a:	2200      	movs	r2, #0
 800094c:	f647 0183 	movw	r1, #30851	; 0x7883
 8000950:	482a      	ldr	r0, [pc, #168]	; (80009fc <MX_GPIO_Init+0x134>)
 8000952:	f002 fd85 	bl	8003460 <HAL_GPIO_WritePin>
                          |ROT_LEFT_Pin|ROT_RIGHT_Pin|AMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay_SwitchB_Pin|Relay_SwitchA_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <MX_GPIO_Init+0x138>)
 800095e:	f002 fd7f 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Rj45_LED1_Pin|RJ45_LED2_Pin|PreAmp_Pin;
 8000962:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	481f      	ldr	r0, [pc, #124]	; (80009f8 <MX_GPIO_Init+0x130>)
 800097c:	f002 fbf0 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PTT_Main_Pin|PTT_Sub_Pin;
 8000980:	23c0      	movs	r3, #192	; 0xc0
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	481b      	ldr	r0, [pc, #108]	; (8000a00 <MX_GPIO_Init+0x138>)
 8000994:	f002 fbe4 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LDC_EN_Pin|LCD_SEL_Pin|ROT_UP_Pin|ROT_DOWN_Pin
 8000998:	f647 0383 	movw	r3, #30851	; 0x7883
 800099c:	617b      	str	r3, [r7, #20]
                          |ROT_LEFT_Pin|ROT_RIGHT_Pin|AMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_GPIO_Init+0x134>)
 80009b2:	f002 fbd5 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Relay_SwitchB_Pin|Relay_SwitchA_Pin;
 80009b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_GPIO_Init+0x138>)
 80009d0:	f002 fbc6 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Coax_NC_Pin|Coax_NO_Pin;
 80009d4:	2330      	movs	r3, #48	; 0x30
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_GPIO_Init+0x134>)
 80009e8:	f002 fbba 	bl	8003160 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	42020800 	.word	0x42020800
 80009fc:	42020400 	.word	0x42020400
 8000a00:	42020000 	.word	0x42020000

08000a04 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_I2C1_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <MX_I2C1_Init+0x7c>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a40:	f002 fd40 	bl	80034c4 <HAL_I2C_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f000 f94d 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a52:	f003 fb5e 	bl	8004112 <HAL_I2CEx_ConfigAnalogFilter>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f000 f944 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a64:	f003 fba0 	bl	80041a8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 f93b 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200036d0 	.word	0x200036d0
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	009034b6 	.word	0x009034b6

08000a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0ae      	sub	sp, #184	; 0xb8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2294      	movs	r2, #148	; 0x94
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f009 ff92 	bl	800a9ce <memset>
  if(i2cHandle->Instance==I2C1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <HAL_I2C_MspInit+0x134>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d17d      	bne.n	8000bb0 <HAL_I2C_MspInit+0x12c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ab4:	2340      	movs	r3, #64	; 0x40
 8000ab6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 fc4f 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000acc:	f000 f90c 	bl	8000ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <HAL_I2C_MspInit+0x138>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <HAL_I2C_MspInit+0x138>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <HAL_I2C_MspInit+0x138>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ae8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b02:	2304      	movs	r3, #4
 8000b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	482c      	ldr	r0, [pc, #176]	; (8000bc0 <HAL_I2C_MspInit+0x13c>)
 8000b10:	f002 fb26 	bl	8003160 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <HAL_I2C_MspInit+0x138>)
 8000b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <HAL_I2C_MspInit+0x138>)
 8000b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <HAL_I2C_MspInit+0x138>)
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b2e:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <HAL_I2C_MspInit+0x144>)
 8000b30:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b34:	2212      	movs	r2, #18
 8000b36:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000b62:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b64:	f001 fff8 	bl	8002b58 <HAL_DMA_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8000b6e:	f000 f8bb 	bl	8000ce8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_i2c1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b72:	2110      	movs	r1, #16
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b76:	f002 fa60 	bl	800303a <HAL_DMA_ConfigChannelAttributes>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8000b80:	f000 f8b2 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b88:	639a      	str	r2, [r3, #56]	; 0x38
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_I2C_MspInit+0x140>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2105      	movs	r1, #5
 8000b94:	2037      	movs	r0, #55	; 0x37
 8000b96:	f001 fecd 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b9a:	2037      	movs	r0, #55	; 0x37
 8000b9c:	f001 fee4 	bl	8002968 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2105      	movs	r1, #5
 8000ba4:	2038      	movs	r0, #56	; 0x38
 8000ba6:	f001 fec5 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000baa:	2038      	movs	r0, #56	; 0x38
 8000bac:	f001 fedc 	bl	8002968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	37b8      	adds	r7, #184	; 0xb8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	42020400 	.word	0x42020400
 8000bc4:	20003668 	.word	0x20003668
 8000bc8:	4002001c 	.word	0x4002001c

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f000 fda3 	bl	800171a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f819 	bl	8000c0a <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f7ff fe76 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bdc:	f7ff fe42 	bl	8000864 <MX_DMA_Init>
  MX_CRC_Init();
 8000be0:	f7ff fdfe 	bl	80007e0 <MX_CRC_Init>
  MX_SPI2_Init();
 8000be4:	f000 f886 	bl	8000cf4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000be8:	f000 fc88 	bl	80014fc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000bec:	f7ff fcb6 	bl	800055c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000bf0:	f7ff ff08 	bl	8000a04 <MX_I2C1_Init>
//  MX_ICACHE_Init();
  MX_TIM1_Init();
 8000bf4:	f000 fb02 	bl	80011fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bf8:	f000 fb5a 	bl	80012b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000bfc:	f007 fb62 	bl	80082c4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c00:	f7ff fd9c 	bl	800073c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c04:	f007 fb82 	bl	800830c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <main+0x3c>

08000c0a <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b098      	sub	sp, #96	; 0x60
 8000c0e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	2248      	movs	r2, #72	; 0x48
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f009 fed8 	bl	800a9ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f003 fb15 	bl	800425c <HAL_PWREx_ControlVoltageScaling>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	bf14      	ite	ne
 8000c38:	2301      	movne	r3, #1
 8000c3a:	2300      	moveq	r3, #0
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000c42:	f000 f851 	bl	8000ce8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	2302      	movs	r3, #2
 8000c52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c54:	2303      	movs	r3, #3
 8000c56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000c5c:	2332      	movs	r3, #50	; 0x32
 8000c5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c60:	2307      	movs	r3, #7
 8000c62:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 fb83 	bl	800437c <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf14      	ite	ne
 8000c7c:	2301      	movne	r3, #1
 8000c7e:	2300      	moveq	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000c86:	f000 f82f 	bl	8000ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f004 f84c 	bl	8004d40 <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8000cb8:	f000 f816 	bl	8000ce8 <Error_Handler>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3760      	adds	r7, #96	; 0x60
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d101      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd6:	f000 fd3b 	bl	8001750 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40014800 	.word	0x40014800

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <MX_SPI2_Init+0x78>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d2a:	2210      	movs	r2, #16
 8000d2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d42:	2207      	movs	r2, #7
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d4e:	2208      	movs	r2, #8
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_SPI2_Init+0x74>)
 8000d54:	f005 f81c 	bl	8005d90 <HAL_SPI_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d5e:	f7ff ffc3 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000371c 	.word	0x2000371c
 8000d6c:	40003800 	.word	0x40003800

08000d70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a34      	ldr	r2, [pc, #208]	; (8000e60 <HAL_SPI_MspInit+0xf0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d162      	bne.n	8000e58 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d92:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <HAL_SPI_MspInit+0xf4>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d96:	4a33      	ldr	r2, [pc, #204]	; (8000e64 <HAL_SPI_MspInit+0xf4>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <HAL_SPI_MspInit+0xf4>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_SPI_MspInit+0xf4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <HAL_SPI_MspInit+0xf4>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_SPI_MspInit+0xf4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000dc2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4822      	ldr	r0, [pc, #136]	; (8000e68 <HAL_SPI_MspInit+0xf8>)
 8000de0:	f002 f9be 	bl	8003160 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000de6:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <HAL_SPI_MspInit+0x100>)
 8000de8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000dec:	220e      	movs	r2, #14
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000df2:	2210      	movs	r2, #16
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000e1c:	f001 fe9c 	bl	8002b58 <HAL_DMA_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000e26:	f7ff ff5f 	bl	8000ce8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000e2e:	f002 f904 	bl	800303a <HAL_DMA_ConfigChannelAttributes>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000e38:	f7ff ff56 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000e40:	655a      	str	r2, [r3, #84]	; 0x54
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_SPI_MspInit+0xfc>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	203c      	movs	r0, #60	; 0x3c
 8000e4e:	f001 fd71 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000e52:	203c      	movs	r0, #60	; 0x3c
 8000e54:	f001 fd88 	bl	8002968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40003800 	.word	0x40003800
 8000e64:	40021000 	.word	0x40021000
 8000e68:	42020400 	.word	0x42020400
 8000e6c:	20003780 	.word	0x20003780
 8000e70:	40020008 	.word	0x40020008

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_MspInit+0x60>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <HAL_MspInit+0x60>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6613      	str	r3, [r2, #96]	; 0x60
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_MspInit+0x60>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_MspInit+0x60>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_MspInit+0x60>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_MspInit+0x60>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2107      	movs	r1, #7
 8000eae:	f06f 0001 	mvn.w	r0, #1
 8000eb2:	f001 fd3f 	bl	8002934 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000eb6:	f003 fa2d 	bl	8004314 <HAL_PWREx_DisableUCPDDeadBattery>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8000eba:	2004      	movs	r0, #4
 8000ebc:	f000 fc68 	bl	8001790 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000ec0:	f000 fcb6 	bl	8001830 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 fc8b 	bl	80017e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	2047      	movs	r0, #71	; 0x47
 8000eee:	f001 fd21 	bl	8002934 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000ef2:	2047      	movs	r0, #71	; 0x47
 8000ef4:	f001 fd38 	bl	8002968 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_InitTick+0x9c>)
 8000efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efc:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_InitTick+0x9c>)
 8000efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f02:	6613      	str	r3, [r2, #96]	; 0x60
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_InitTick+0x9c>)
 8000f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f10:	f107 0210 	add.w	r2, r7, #16
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 f912 	bl	8005144 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f20:	f004 f8fc 	bl	800511c <HAL_RCC_GetPCLK2Freq>
 8000f24:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_InitTick+0xa0>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9b      	lsrs	r3, r3, #18
 8000f30:	3b01      	subs	r3, #1
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_InitTick+0xa4>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <HAL_InitTick+0xa8>)
 8000f38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_InitTick+0xa4>)
 8000f3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f40:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_InitTick+0xa4>)
 8000f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f46:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_InitTick+0xa4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_InitTick+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_InitTick+0xa4>)
 8000f56:	f005 f8de 	bl	8006116 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d104      	bne.n	8000f6a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <HAL_InitTick+0xa4>)
 8000f62:	f005 f939 	bl	80061d8 <HAL_TIM_Base_Start_IT>
 8000f66:	4603      	mov	r3, r0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	200037e8 	.word	0x200037e8
 8000f80:	40014800 	.word	0x40014800

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <DMA1_Channel1_IRQHandler+0x10>)
 8000fb6:	f001 ff32 	bl	8002e1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20003780 	.word	0x20003780

08000fc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <DMA1_Channel2_IRQHandler+0x10>)
 8000fca:	f001 ff28 	bl	8002e1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20003668 	.word	0x20003668

08000fd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <I2C1_EV_IRQHandler+0x10>)
 8000fde:	f002 fb00 	bl	80035e2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200036d0 	.word	0x200036d0

08000fec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <I2C1_ER_IRQHandler+0x10>)
 8000ff2:	f002 fb10 	bl	8003616 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200036d0 	.word	0x200036d0

08001000 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <SPI2_IRQHandler+0x10>)
 8001006:	f004 ff67 	bl	8005ed8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000371c 	.word	0x2000371c

08001014 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <USART1_IRQHandler+0x10>)
 800101a:	f006 f907 	bl	800722c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200038cc 	.word	0x200038cc

08001028 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM17_IRQHandler+0x10>)
 800102e:	f005 fa40 	bl	80064b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200037e8 	.word	0x200037e8

0800103c <HAL_UART_TxCpltCallback>:

	  }
//	 SEGGER_SYSVIEW_RecordExitISR();
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
//	SEGGER_SYSVIEW_RecordEnterISR();
	if(huart->Instance==USART3) // Is it the USB-Com port?
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a09      	ldr	r2, [pc, #36]	; (8001074 <HAL_UART_TxCpltCallback+0x38>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d109      	bne.n	8001066 <HAL_UART_TxCpltCallback+0x2a>
//		uartRXHandler(NULL);

//		vTaskNotifyGiveFromISR((TaskHandle_t)uartTxTaskHandle, &xHigherPriorityTaskWoken); // wake UART send task, when transfer is done
		/* Actual macro used here is port specific. */

		if (xHigherPriorityTaskWoken == pdTRUE) {							   // context switch
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d106      	bne.n	8001066 <HAL_UART_TxCpltCallback+0x2a>
//			SEGGER_SYSVIEW_RecordExitISRToScheduler();
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_UART_TxCpltCallback+0x2a>
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_UART_TxCpltCallback+0x3c>)
 8001060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001064:	601a      	str	r2, [r3, #0]
		}
	}
//	SEGGER_SYSVIEW_RecordExitISR();

}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40004800 	.word	0x40004800
 8001078:	e000ed04 	.word	0xe000ed04

0800107c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80010a6:	4b4f      	ldr	r3, [pc, #316]	; (80011e4 <SystemCoreClockUpdate+0x144>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d107      	bne.n	80010c2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80010b2:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <SystemCoreClockUpdate+0x144>)
 80010b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e005      	b.n	80010ce <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80010c2:	4b48      	ldr	r3, [pc, #288]	; (80011e4 <SystemCoreClockUpdate+0x144>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80010ce:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <SystemCoreClockUpdate+0x148>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010d8:	4b42      	ldr	r3, [pc, #264]	; (80011e4 <SystemCoreClockUpdate+0x144>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b0c      	cmp	r3, #12
 80010e2:	d866      	bhi.n	80011b2 <SystemCoreClockUpdate+0x112>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <SystemCoreClockUpdate+0x4c>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	08001121 	.word	0x08001121
 80010f0:	080011b3 	.word	0x080011b3
 80010f4:	080011b3 	.word	0x080011b3
 80010f8:	080011b3 	.word	0x080011b3
 80010fc:	08001129 	.word	0x08001129
 8001100:	080011b3 	.word	0x080011b3
 8001104:	080011b3 	.word	0x080011b3
 8001108:	080011b3 	.word	0x080011b3
 800110c:	08001131 	.word	0x08001131
 8001110:	080011b3 	.word	0x080011b3
 8001114:	080011b3 	.word	0x080011b3
 8001118:	080011b3 	.word	0x080011b3
 800111c:	08001139 	.word	0x08001139
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001120:	4a32      	ldr	r2, [pc, #200]	; (80011ec <SystemCoreClockUpdate+0x14c>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	6013      	str	r3, [r2, #0]
      break;
 8001126:	e048      	b.n	80011ba <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <SystemCoreClockUpdate+0x14c>)
 800112a:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <SystemCoreClockUpdate+0x150>)
 800112c:	601a      	str	r2, [r3, #0]
      break;
 800112e:	e044      	b.n	80011ba <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <SystemCoreClockUpdate+0x14c>)
 8001132:	4a30      	ldr	r2, [pc, #192]	; (80011f4 <SystemCoreClockUpdate+0x154>)
 8001134:	601a      	str	r2, [r3, #0]
      break;
 8001136:	e040      	b.n	80011ba <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <SystemCoreClockUpdate+0x144>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <SystemCoreClockUpdate+0x144>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	3301      	adds	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d003      	beq.n	800115e <SystemCoreClockUpdate+0xbe>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d006      	beq.n	800116a <SystemCoreClockUpdate+0xca>
 800115c:	e00b      	b.n	8001176 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800115e:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <SystemCoreClockUpdate+0x150>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	613b      	str	r3, [r7, #16]
          break;
 8001168:	e00b      	b.n	8001182 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800116a:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <SystemCoreClockUpdate+0x154>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	613b      	str	r3, [r7, #16]
          break;
 8001174:	e005      	b.n	8001182 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	613b      	str	r3, [r7, #16]
          break;
 8001180:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <SystemCoreClockUpdate+0x144>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <SystemCoreClockUpdate+0x144>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0e5b      	lsrs	r3, r3, #25
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	3301      	adds	r3, #1
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <SystemCoreClockUpdate+0x14c>)
 80011ae:	6013      	str	r3, [r2, #0]
      break;
 80011b0:	e003      	b.n	80011ba <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <SystemCoreClockUpdate+0x14c>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	6013      	str	r3, [r2, #0]
      break;
 80011b8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <SystemCoreClockUpdate+0x144>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <SystemCoreClockUpdate+0x158>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <SystemCoreClockUpdate+0x14c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	fa22 f303 	lsr.w	r3, r2, r3
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemCoreClockUpdate+0x14c>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40021000 	.word	0x40021000
 80011e8:	0800aa94 	.word	0x0800aa94
 80011ec:	20000000 	.word	0x20000000
 80011f0:	00f42400 	.word	0x00f42400
 80011f4:	007a1200 	.word	0x007a1200
 80011f8:	0800aa7c 	.word	0x0800aa7c

080011fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2224      	movs	r2, #36	; 0x24
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f009 fbdf 	bl	800a9ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_TIM1_Init+0xac>)
 800121c:	4a23      	ldr	r2, [pc, #140]	; (80012ac <MX_TIM1_Init+0xb0>)
 800121e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_TIM1_Init+0xac>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_TIM1_Init+0xac>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_TIM1_Init+0xac>)
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_TIM1_Init+0xac>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_TIM1_Init+0xac>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_TIM1_Init+0xac>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001246:	2301      	movs	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800125e:	2301      	movs	r3, #1
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_TIM1_Init+0xac>)
 8001272:	f005 f878 	bl	8006366 <HAL_TIM_Encoder_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800127c:	f7ff fd34 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_TIM1_Init+0xac>)
 8001292:	f005 fed5 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800129c:	f7ff fd24 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3730      	adds	r7, #48	; 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20003834 	.word	0x20003834
 80012ac:	40012c00 	.word	0x40012c00

080012b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012ea:	f04f 32ff 	mov.w	r2, #4294967295
 80012ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012fc:	4818      	ldr	r0, [pc, #96]	; (8001360 <MX_TIM2_Init+0xb0>)
 80012fe:	f004 ffdb 	bl	80062b8 <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001308:	f7ff fcee 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <MX_TIM2_Init+0xb0>)
 800131c:	f005 fe90 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001326:	f7ff fcdf 	bl	8000ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	; 0x60
 800132c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM2_Init+0xb0>)
 8001342:	f005 f9d5 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800134c:	f7ff fccc 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM2_Init+0xb0>)
 8001352:	f000 f869 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20003880 	.word	0x20003880

08001364 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d128      	bne.n	80013d8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <HAL_TIM_Encoder_MspInit+0x80>)
 800138c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001390:	6613      	str	r3, [r2, #96]	; 0x60
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <HAL_TIM_Encoder_MspInit+0x84>)
 80013d4:	f001 fec4 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40012c00 	.word	0x40012c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	42020000 	.word	0x42020000

080013ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fc:	d10b      	bne.n	8001416 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_TIM_PWM_MspInit+0x38>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_TIM_PWM_MspInit+0x38>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6593      	str	r3, [r2, #88]	; 0x58
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_TIM_PWM_MspInit+0x38>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001448:	d11c      	bne.n	8001484 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_TIM_MspPostInit+0x64>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_TIM_MspPostInit+0x64>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_TIM_MspPostInit+0x64>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001466:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001474:	2301      	movs	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <HAL_TIM_MspPostInit+0x68>)
 8001480:	f001 fe6e 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000
 8001490:	42020000 	.word	0x42020000

08001494 <LL_USART_EnableRxTimeout>:
  * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	605a      	str	r2, [r3, #4]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_USART_SetRxTimeout>:
  * @param  USARTx USART Instance
  * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	615a      	str	r2, [r3, #20]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_USART_EnableIT_RTO>:
  * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001502:	4a23      	ldr	r2, [pc, #140]	; (8001590 <MX_USART1_UART_Init+0x94>)
 8001504:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800150c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_USART1_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_USART1_UART_Init+0x90>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_USART1_UART_Init+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001544:	4811      	ldr	r0, [pc, #68]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001546:	f005 fe21 	bl	800718c <HAL_UART_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001550:	f7ff fbca 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_USART1_UART_Init+0x90>)
 8001558:	f006 fda6 	bl	80080a8 <HAL_UARTEx_SetTxFifoThreshold>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001562:	f7ff fbc1 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <MX_USART1_UART_Init+0x90>)
 800156a:	f006 fddb 	bl	8008124 <HAL_UARTEx_SetRxFifoThreshold>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001574:	f7ff fbb8 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_USART1_UART_Init+0x90>)
 800157a:	f006 fd5c 	bl	8008036 <HAL_UARTEx_DisableFifoMode>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001584:	f7ff fbb0 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200038cc 	.word	0x200038cc
 8001590:	40013800 	.word	0x40013800

08001594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0b0      	sub	sp, #192	; 0xc0
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	2294      	movs	r2, #148	; 0x94
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f009 fa0a 	bl	800a9ce <memset>
  if(uartHandle->Instance==USART1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a3e      	ldr	r2, [pc, #248]	; (80016b8 <HAL_UART_MspInit+0x124>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d174      	bne.n	80016ae <HAL_UART_MspInit+0x11a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015c8:	2300      	movs	r3, #0
 80015ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fec7 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015dc:	f7ff fb84 	bl	8000ce8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HAL_UART_MspInit+0x128>)
 80015e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e4:	4a35      	ldr	r2, [pc, #212]	; (80016bc <HAL_UART_MspInit+0x128>)
 80015e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ea:	6613      	str	r3, [r2, #96]	; 0x60
 80015ec:	4b33      	ldr	r3, [pc, #204]	; (80016bc <HAL_UART_MspInit+0x128>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_UART_MspInit+0x128>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <HAL_UART_MspInit+0x128>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <HAL_UART_MspInit+0x128>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HAL_UART_MspInit+0x128>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <HAL_UART_MspInit+0x128>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_UART_MspInit+0x128>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001642:	2307      	movs	r3, #7
 8001644:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800164c:	4619      	mov	r1, r3
 800164e:	481c      	ldr	r0, [pc, #112]	; (80016c0 <HAL_UART_MspInit+0x12c>)
 8001650:	f001 fd86 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001654:	2340      	movs	r3, #64	; 0x40
 8001656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800166c:	2307      	movs	r3, #7
 800166e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001676:	4619      	mov	r1, r3
 8001678:	4812      	ldr	r0, [pc, #72]	; (80016c4 <HAL_UART_MspInit+0x130>)
 800167a:	f001 fd71 	bl	8003160 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2105      	movs	r1, #5
 8001682:	203d      	movs	r0, #61	; 0x3d
 8001684:	f001 f956 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001688:	203d      	movs	r0, #61	; 0x3d
 800168a:	f001 f96d 	bl	8002968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    LL_USART_EnableRxTimeout(uartHandle->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fefe 	bl	8001494 <LL_USART_EnableRxTimeout>
    LL_USART_SetRxTimeout(uartHandle->Instance, 0xFF);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	21ff      	movs	r1, #255	; 0xff
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff08 	bl	80014b4 <LL_USART_SetRxTimeout>
    LL_USART_EnableIT_RTO(uartHandle->Instance);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff16 	bl	80014da <LL_USART_EnableIT_RTO>

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016ae:	bf00      	nop
 80016b0:	37c0      	adds	r7, #192	; 0xc0
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40013800 	.word	0x40013800
 80016bc:	40021000 	.word	0x40021000
 80016c0:	42020000 	.word	0x42020000
 80016c4:	42020400 	.word	0x42020400

080016c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016cc:	f7ff fcd6 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016d2:	e003      	b.n	80016dc <LoopCopyDataInit>

080016d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016da:	3104      	adds	r1, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016dc:	480a      	ldr	r0, [pc, #40]	; (8001708 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <LoopForever+0xe>)
	adds	r2, r0, r1
 80016e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016e4:	d3f6      	bcc.n	80016d4 <CopyDataInit>
	ldr	r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016e8:	e002      	b.n	80016f0 <LoopFillZerobss>

080016ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016ec:	f842 3b04 	str.w	r3, [r2], #4

080016f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <LoopForever+0x16>)
	cmp	r2, r3
 80016f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016f4:	d3f9      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016f6:	f009 f939 	bl	800a96c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fa:	f7ff fa67 	bl	8000bcc <main>

080016fe <LoopForever>:

LoopForever:
    b LoopForever
 80016fe:	e7fe      	b.n	80016fe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001700:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001704:	0800ab0c 	.word	0x0800ab0c
	ldr	r0, =_sdata
 8001708:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800170c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001710:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001714:	200039a0 	.word	0x200039a0

08001718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_2_IRQHandler>

0800171a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001724:	2004      	movs	r0, #4
 8001726:	f001 f8fa 	bl	800291e <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800172a:	f7ff fcb9 	bl	80010a0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fbd2 	bl	8000ed8 <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e001      	b.n	8001744 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001740:	f7ff fb98 	bl	8000e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001744:	79fb      	ldrb	r3, [r7, #7]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	2000395c 	.word	0x2000395c

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000395c 	.word	0x2000395c

08001790 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  * @note   Retrieve the TrimmingValue from factory located at
  *         VREFBUF_SC0_CAL_ADDR or VREFBUF_SC1_CAL_ADDR addresses.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t TrimmingValue;

  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x44>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 0204 	bic.w	r2, r3, #4
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x44>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]

  /* Restrieve Calibration data and store them into trimming field */
  if (VoltageScaling == SYSCFG_VREFBUF_VOLTAGE_SCALE0)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d105      	bne.n	80017ba <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x2a>
  {
    TrimmingValue = ((uint32_t) *VREFBUF_SC0_CAL_ADDR) & 0x3FU;
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x48>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e004      	b.n	80017c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x34>
  }
  else
  {
    TrimmingValue = ((uint32_t) *VREFBUF_SC1_CAL_ADDR) & 0x3FU;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x4c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017c2:	60fb      	str	r3, [r7, #12]
  }
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  HAL_SYSCFG_VREFBUF_TrimmingConfig(TrimmingValue);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f81f 	bl	8001808 <HAL_SYSCFG_VREFBUF_TrimmingConfig>
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40010100 	.word	0x40010100
 80017d8:	0bfa0579 	.word	0x0bfa0579
 80017dc:	0bfa0530 	.word	0x0bfa0530

080017e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 0202 	bic.w	r2, r3, #2
 80017f0:	4904      	ldr	r1, [pc, #16]	; (8001804 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40010100 	.word	0x40010100

08001808 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001818:	4904      	ldr	r1, [pc, #16]	; (800182c <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40010100 	.word	0x40010100

08001830 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001842:	f7ff ff99 	bl	8001778 <HAL_GetTick>
 8001846:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 8001848:	e008      	b.n	800185c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800184a:	f7ff ff95 	bl	8001778 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b0a      	cmp	r3, #10
 8001856:	d901      	bls.n	800185c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e006      	b.n	800186a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010100 	.word	0x40010100

08001878 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3360      	adds	r3, #96	; 0x60
 80018f2:	461a      	mov	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <LL_ADC_SetOffset+0x44>)
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	4313      	orrs	r3, r2
 8001910:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	03fff000 	.word	0x03fff000

08001928 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3360      	adds	r3, #96	; 0x60
 8001936:	461a      	mov	r2, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3360      	adds	r3, #96	; 0x60
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	615a      	str	r2, [r3, #20]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3330      	adds	r3, #48	; 0x30
 80019c0:	461a      	mov	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	211f      	movs	r1, #31
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0e9b      	lsrs	r3, r3, #26
 80019e8:	f003 011f 	and.w	r1, r3, #31
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	431a      	orrs	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3314      	adds	r3, #20
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0e5b      	lsrs	r3, r3, #25
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	0d1b      	lsrs	r3, r3, #20
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2107      	movs	r1, #7
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	0d1b      	lsrs	r3, r3, #20
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0318 	and.w	r3, r3, #24
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	400b      	ands	r3, r1
 8001a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	0007ffff 	.word	0x0007ffff

08001aa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6093      	str	r3, [r2, #8]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ae0:	d101      	bne.n	8001ae6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <LL_ADC_IsEnabled+0x18>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_ADC_IsEnabled+0x1a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d101      	bne.n	8001b82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d101      	bne.n	8001ba8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e134      	b.n	8001e3c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fd31 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff67 	bl	8001acc <LL_ADC_IsDeepPowerDownEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff4d 	bl	8001aa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff82 	bl	8001b1c <LL_ADC_IsInternalRegulatorEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d115      	bne.n	8001c4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff66 	bl	8001af4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c28:	4b86      	ldr	r3, [pc, #536]	; (8001e44 <HAL_ADC_Init+0x28c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	4a86      	ldr	r2, [pc, #536]	; (8001e48 <HAL_ADC_Init+0x290>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	3301      	adds	r3, #1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff64 	bl	8001b1c <LL_ADC_IsInternalRegulatorEnabled>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10d      	bne.n	8001c76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	f043 0210 	orr.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	f043 0201 	orr.w	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff75 	bl	8001b6a <LL_ADC_REG_IsConversionOngoing>
 8001c80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 80cd 	bne.w	8001e2a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 80c9 	bne.w	8001e2a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ca0:	f043 0202 	orr.w	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff49 	bl	8001b44 <LL_ADC_IsEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d110      	bne.n	8001cda <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cb8:	4864      	ldr	r0, [pc, #400]	; (8001e4c <HAL_ADC_Init+0x294>)
 8001cba:	f7ff ff43 	bl	8001b44 <LL_ADC_IsEnabled>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4863      	ldr	r0, [pc, #396]	; (8001e50 <HAL_ADC_Init+0x298>)
 8001cc2:	f7ff ff3f 	bl	8001b44 <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4323      	orrs	r3, r4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	485f      	ldr	r0, [pc, #380]	; (8001e54 <HAL_ADC_Init+0x29c>)
 8001cd6:	f7ff fdcf 	bl	8001878 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7e5b      	ldrb	r3, [r3, #25]
 8001cde:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ce4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001cea:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001cf0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	045b      	lsls	r3, r3, #17
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_ADC_Init+0x2a0>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	69b9      	ldr	r1, [r7, #24]
 8001d42:	430b      	orrs	r3, r1
 8001d44:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff0d 	bl	8001b6a <LL_ADC_REG_IsConversionOngoing>
 8001d50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff1a 	bl	8001b90 <LL_ADC_INJ_IsConversionOngoing>
 8001d5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d140      	bne.n	8001de6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d13d      	bne.n	8001de6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d74:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d7c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d8c:	f023 0306 	bic.w	r3, r3, #6
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	69b9      	ldr	r1, [r7, #24]
 8001d96:	430b      	orrs	r3, r1
 8001d98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d118      	bne.n	8001dd6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	611a      	str	r2, [r3, #16]
 8001dd4:	e007      	b.n	8001de6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10c      	bne.n	8001e08 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f023 010f 	bic.w	r1, r3, #15
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
 8001e06:	e007      	b.n	8001e18 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 020f 	bic.w	r2, r2, #15
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f023 0303 	bic.w	r3, r3, #3
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	659a      	str	r2, [r3, #88]	; 0x58
 8001e28:	e007      	b.n	8001e3a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f043 0210 	orr.w	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3724      	adds	r7, #36	; 0x24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	053e2d63 	.word	0x053e2d63
 8001e4c:	42028000 	.word	0x42028000
 8001e50:	42028100 	.word	0x42028100
 8001e54:	42028300 	.word	0x42028300
 8001e58:	fff0c007 	.word	0xfff0c007

08001e5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b0b7      	sub	sp, #220	; 0xdc
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x22>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e3c1      	b.n	8002602 <HAL_ADC_ConfigChannel+0x7a6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fe6d 	bl	8001b6a <LL_ADC_REG_IsConversionOngoing>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 83a6 	bne.w	80025e4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f7ff fd83 	bl	80019b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fe5b 	bl	8001b6a <LL_ADC_REG_IsConversionOngoing>
 8001eb4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fe67 	bl	8001b90 <LL_ADC_INJ_IsConversionOngoing>
 8001ec2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ec6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 81c1 	bne.w	8002252 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f040 81bc 	bne.w	8002252 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ee2:	d10f      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7ff fd8a 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fd44 	bl	800198a <LL_ADC_SetSamplingTimeCommonConfig>
 8001f02:	e00e      	b.n	8001f22 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f7ff fd79 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fd34 	bl	800198a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00a      	beq.n	8001f5a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6919      	ldr	r1, [r3, #16]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f54:	f7ff fcc4 	bl	80018e0 <LL_ADC_SetOffset>
 8001f58:	e17b      	b.n	8002252 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fce1 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x12a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fcd6 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	0e9b      	lsrs	r3, r3, #26
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	e01e      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x168>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fccb 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e004      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001fb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x180>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0e9b      	lsrs	r3, r3, #26
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	e018      	b.n	800200e <HAL_ADC_ConfigChannel+0x1b2>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002000:	2320      	movs	r3, #32
 8002002:	e004      	b.n	800200e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800200e:	429a      	cmp	r2, r3
 8002010:	d106      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fc9a 	bl	8001954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fc7e 	bl	8001928 <LL_ADC_GetOffsetChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10a      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1f0>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2101      	movs	r1, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fc73 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	0e9b      	lsrs	r3, r3, #26
 8002046:	f003 021f 	and.w	r2, r3, #31
 800204a:	e01e      	b.n	800208a <HAL_ADC_ConfigChannel+0x22e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fc68 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800206a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800206e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002072:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800207a:	2320      	movs	r3, #32
 800207c:	e004      	b.n	8002088 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800207e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x246>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0e9b      	lsrs	r3, r3, #26
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	e018      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x278>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80020c6:	2320      	movs	r3, #32
 80020c8:	e004      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80020ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d106      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	2101      	movs	r1, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fc37 	bl	8001954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2102      	movs	r1, #2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fc1b 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x2b6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2102      	movs	r1, #2
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fc10 	bl	8001928 <LL_ADC_GetOffsetChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	0e9b      	lsrs	r3, r3, #26
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	e01e      	b.n	8002150 <HAL_ADC_ConfigChannel+0x2f4>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2102      	movs	r1, #2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fc05 	bl	8001928 <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002140:	2320      	movs	r3, #32
 8002142:	e004      	b.n	800214e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x30c>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	e016      	b.n	8002196 <HAL_ADC_ConfigChannel+0x33a>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800217a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800217c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002180:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	e004      	b.n	8002196 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800218c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002196:	429a      	cmp	r2, r3
 8002198:	d106      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	2102      	movs	r1, #2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fbd6 	bl	8001954 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2103      	movs	r1, #3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fbba 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10a      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x378>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2103      	movs	r1, #3
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fbaf 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	0e9b      	lsrs	r3, r3, #26
 80021ce:	f003 021f 	and.w	r2, r3, #31
 80021d2:	e017      	b.n	8002204 <HAL_ADC_ConfigChannel+0x3a8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2103      	movs	r1, #3
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fba4 	bl	8001928 <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ee:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e003      	b.n	8002202 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80021fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_ADC_ConfigChannel+0x3c0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0e9b      	lsrs	r3, r3, #26
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	e011      	b.n	8002240 <HAL_ADC_ConfigChannel+0x3e4>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800222a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800222c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800222e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002234:	2320      	movs	r3, #32
 8002236:	e003      	b.n	8002240 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002240:	429a      	cmp	r2, r3
 8002242:	d106      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	2103      	movs	r1, #3
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fb81 	bl	8001954 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fc74 	bl	8001b44 <LL_ADC_IsEnabled>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 81c9 	bne.w	80025f6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	461a      	mov	r2, r3
 8002272:	f7ff fbf5 	bl	8001a60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4a8f      	ldr	r2, [pc, #572]	; (80024b8 <HAL_ADC_ConfigChannel+0x65c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	f040 8131 	bne.w	80024e4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10b      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x44e>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	3301      	adds	r3, #1
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2b09      	cmp	r3, #9
 80022a0:	bf94      	ite	ls
 80022a2:	2301      	movls	r3, #1
 80022a4:	2300      	movhi	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	e019      	b.n	80022de <HAL_ADC_ConfigChannel+0x482>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ba:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80022c2:	2320      	movs	r3, #32
 80022c4:	e003      	b.n	80022ce <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80022c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	bf94      	ite	ls
 80022d8:	2301      	movls	r3, #1
 80022da:	2300      	movhi	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d079      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d107      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x4a2>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	0e9b      	lsrs	r3, r3, #26
 80022f4:	3301      	adds	r3, #1
 80022f6:	069b      	lsls	r3, r3, #26
 80022f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022fc:	e015      	b.n	800232a <HAL_ADC_ConfigChannel+0x4ce>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800230c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002316:	2320      	movs	r3, #32
 8002318:	e003      	b.n	8002322 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800231a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3301      	adds	r3, #1
 8002324:	069b      	lsls	r3, r3, #26
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_ADC_ConfigChannel+0x4ee>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0e9b      	lsrs	r3, r3, #26
 800233c:	3301      	adds	r3, #1
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	e017      	b.n	800237a <HAL_ADC_ConfigChannel+0x51e>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800235a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800235c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002362:	2320      	movs	r3, #32
 8002364:	e003      	b.n	800236e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	ea42 0103 	orr.w	r1, r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x544>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	0e9b      	lsrs	r3, r3, #26
 8002390:	3301      	adds	r3, #1
 8002392:	f003 021f 	and.w	r2, r3, #31
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	051b      	lsls	r3, r3, #20
 800239e:	e018      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x576>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80023bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	f003 021f 	and.w	r2, r3, #31
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d2:	430b      	orrs	r3, r1
 80023d4:	e081      	b.n	80024da <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d107      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x596>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	0e9b      	lsrs	r3, r3, #26
 80023e8:	3301      	adds	r3, #1
 80023ea:	069b      	lsls	r3, r3, #26
 80023ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f0:	e015      	b.n	800241e <HAL_ADC_ConfigChannel+0x5c2>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800240a:	2320      	movs	r3, #32
 800240c:	e003      	b.n	8002416 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	3301      	adds	r3, #1
 8002418:	069b      	lsls	r3, r3, #26
 800241a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_ADC_ConfigChannel+0x5e2>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	0e9b      	lsrs	r3, r3, #26
 8002430:	3301      	adds	r3, #1
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	e017      	b.n	800246e <HAL_ADC_ConfigChannel+0x612>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	61fb      	str	r3, [r7, #28]
  return result;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002456:	2320      	movs	r3, #32
 8002458:	e003      	b.n	8002462 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	ea42 0103 	orr.w	r1, r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_ADC_ConfigChannel+0x63e>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	3301      	adds	r3, #1
 8002486:	f003 021f 	and.w	r2, r3, #31
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	3b1e      	subs	r3, #30
 8002492:	051b      	lsls	r3, r3, #20
 8002494:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002498:	e01e      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x67c>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	613b      	str	r3, [r7, #16]
  return result;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e006      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x668>
 80024b6:	bf00      	nop
 80024b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 021f 	and.w	r2, r3, #31
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	3b1e      	subs	r3, #30
 80024d2:	051b      	lsls	r3, r3, #20
 80024d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d8:	430b      	orrs	r3, r1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	6892      	ldr	r2, [r2, #8]
 80024de:	4619      	mov	r1, r3
 80024e0:	f7ff fa92 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b48      	ldr	r3, [pc, #288]	; (800260c <HAL_ADC_ConfigChannel+0x7b0>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8082 	beq.w	80025f6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f2:	4847      	ldr	r0, [pc, #284]	; (8002610 <HAL_ADC_ConfigChannel+0x7b4>)
 80024f4:	f7ff f9e6 	bl	80018c4 <LL_ADC_GetCommonPathInternalCh>
 80024f8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024fc:	4845      	ldr	r0, [pc, #276]	; (8002614 <HAL_ADC_ConfigChannel+0x7b8>)
 80024fe:	f7ff fb21 	bl	8001b44 <LL_ADC_IsEnabled>
 8002502:	4604      	mov	r4, r0
 8002504:	4844      	ldr	r0, [pc, #272]	; (8002618 <HAL_ADC_ConfigChannel+0x7bc>)
 8002506:	f7ff fb1d 	bl	8001b44 <LL_ADC_IsEnabled>
 800250a:	4603      	mov	r3, r0
 800250c:	4323      	orrs	r3, r4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d15e      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a41      	ldr	r2, [pc, #260]	; (800261c <HAL_ADC_ConfigChannel+0x7c0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d127      	bne.n	800256c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800251c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d121      	bne.n	800256c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a39      	ldr	r2, [pc, #228]	; (8002614 <HAL_ADC_ConfigChannel+0x7b8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d161      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002536:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800253a:	4619      	mov	r1, r3
 800253c:	4834      	ldr	r0, [pc, #208]	; (8002610 <HAL_ADC_ConfigChannel+0x7b4>)
 800253e:	f7ff f9ae 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_ADC_ConfigChannel+0x7c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	4a36      	ldr	r2, [pc, #216]	; (8002624 <HAL_ADC_ConfigChannel+0x7c8>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	099b      	lsrs	r3, r3, #6
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800255c:	e002      	b.n	8002564 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3b01      	subs	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f9      	bne.n	800255e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800256a:	e044      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <HAL_ADC_ConfigChannel+0x7cc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d113      	bne.n	800259e <HAL_ADC_ConfigChannel+0x742>
 8002576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800257a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a23      	ldr	r2, [pc, #140]	; (8002614 <HAL_ADC_ConfigChannel+0x7b8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d134      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800258c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002594:	4619      	mov	r1, r3
 8002596:	481e      	ldr	r0, [pc, #120]	; (8002610 <HAL_ADC_ConfigChannel+0x7b4>)
 8002598:	f7ff f981 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800259c:	e02b      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_ADC_ConfigChannel+0x7d0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d126      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x79a>
 80025a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d120      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_ADC_ConfigChannel+0x7b8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d11b      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025c6:	4619      	mov	r1, r3
 80025c8:	4811      	ldr	r0, [pc, #68]	; (8002610 <HAL_ADC_ConfigChannel+0x7b4>)
 80025ca:	f7ff f968 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
 80025ce:	e012      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	f043 0220 	orr.w	r2, r3, #32
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80025e2:	e008      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002602:	4618      	mov	r0, r3
 8002604:	37dc      	adds	r7, #220	; 0xdc
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}
 800260a:	bf00      	nop
 800260c:	80080000 	.word	0x80080000
 8002610:	42028300 	.word	0x42028300
 8002614:	42028000 	.word	0x42028000
 8002618:	42028100 	.word	0x42028100
 800261c:	c7520000 	.word	0xc7520000
 8002620:	20000000 	.word	0x20000000
 8002624:	053e2d63 	.word	0x053e2d63
 8002628:	cb840000 	.word	0xcb840000
 800262c:	80000001 	.word	0x80000001

08002630 <LL_ADC_IsEnabled>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <LL_ADC_IsEnabled+0x18>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <LL_ADC_IsEnabled+0x1a>
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_ADC_REG_IsConversionOngoing>:
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d101      	bne.n	800266e <LL_ADC_REG_IsConversionOngoing+0x18>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b0a1      	sub	sp, #132	; 0x84
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002696:	2302      	movs	r3, #2
 8002698:	e089      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80026a2:	2300      	movs	r3, #0
 80026a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80026a6:	2300      	movs	r3, #0
 80026a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a42      	ldr	r2, [pc, #264]	; (80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d102      	bne.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026b4:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e001      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10b      	bne.n	80026dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e068      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ffb9 	bl	8002656 <LL_ADC_REG_IsConversionOngoing>
 80026e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ffb3 	bl	8002656 <LL_ADC_REG_IsConversionOngoing>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d14a      	bne.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d147      	bne.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026fc:	4b30      	ldr	r3, [pc, #192]	; (80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80026fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d027      	beq.n	8002758 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800271a:	035b      	lsls	r3, r3, #13
 800271c:	430b      	orrs	r3, r1
 800271e:	431a      	orrs	r2, r3
 8002720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002722:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002724:	4824      	ldr	r0, [pc, #144]	; (80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002726:	f7ff ff83 	bl	8002630 <LL_ADC_IsEnabled>
 800272a:	4604      	mov	r4, r0
 800272c:	4823      	ldr	r0, [pc, #140]	; (80027bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800272e:	f7ff ff7f 	bl	8002630 <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	4323      	orrs	r3, r4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d132      	bne.n	80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800273a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002742:	f023 030f 	bic.w	r3, r3, #15
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	6811      	ldr	r1, [r2, #0]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	6892      	ldr	r2, [r2, #8]
 800274e:	430a      	orrs	r2, r1
 8002750:	431a      	orrs	r2, r3
 8002752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002754:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002756:	e023      	b.n	80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002762:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002764:	4814      	ldr	r0, [pc, #80]	; (80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002766:	f7ff ff63 	bl	8002630 <LL_ADC_IsEnabled>
 800276a:	4604      	mov	r4, r0
 800276c:	4813      	ldr	r0, [pc, #76]	; (80027bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800276e:	f7ff ff5f 	bl	8002630 <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	4323      	orrs	r3, r4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d112      	bne.n	80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800277a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002782:	f023 030f 	bic.w	r3, r3, #15
 8002786:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002788:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800278a:	e009      	b.n	80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800279e:	e000      	b.n	80027a2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80027aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3784      	adds	r7, #132	; 0x84
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	42028000 	.word	0x42028000
 80027bc:	42028100 	.word	0x42028100
 80027c0:	42028300 	.word	0x42028300

080027c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f6:	4a04      	ldr	r2, [pc, #16]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	60d3      	str	r3, [r2, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	; (8002860 <__NVIC_EnableIRQ+0x38>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	; (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0152      	lsls	r2, r2, #5
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0152      	lsls	r2, r2, #5
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	bf28      	it	cs
 80028d6:	2303      	movcs	r3, #3
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3303      	adds	r3, #3
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b04      	subs	r3, #4
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ff4c 	bl	80027c4 <__NVIC_SetPriorityGrouping>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002942:	f7ff ff63 	bl	800280c <__NVIC_GetPriorityGrouping>
 8002946:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	6978      	ldr	r0, [r7, #20]
 800294e:	f7ff ffb3 	bl	80028b8 <NVIC_EncodePriority>
 8002952:	4602      	mov	r2, r0
 8002954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff82 	bl	8002864 <__NVIC_SetPriority>
}
 8002960:	bf00      	nop
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff56 	bl	8002828 <__NVIC_EnableIRQ>
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e054      	b.n	8002a40 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7f5b      	ldrb	r3, [r3, #29]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fd ff3c 	bl	8000824 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	791b      	ldrb	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <HAL_CRC_Init+0xc4>)
 80029c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0218 	bic.w	r2, r2, #24
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	e00c      	b.n	80029ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	461a      	mov	r2, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f834 	bl	8002a4c <HAL_CRCEx_Polynomial_Set>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e028      	b.n	8002a40 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	795b      	ldrb	r3, [r3, #5]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f04f 32ff 	mov.w	r2, #4294967295
 80029fe:	611a      	str	r2, [r3, #16]
 8002a00:	e004      	b.n	8002a0c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6912      	ldr	r2, [r2, #16]
 8002a0a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	04c11db7 	.word	0x04c11db7

08002a4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002a5c:	231f      	movs	r3, #31
 8002a5e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002a60:	bf00      	nop
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	613a      	str	r2, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HAL_CRCEx_Polynomial_Set+0x34>
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_CRCEx_Polynomial_Set+0x16>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b18      	cmp	r3, #24
 8002a84:	d846      	bhi.n	8002b14 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002b1b 	.word	0x08002b1b
 8002a90:	08002b15 	.word	0x08002b15
 8002a94:	08002b15 	.word	0x08002b15
 8002a98:	08002b15 	.word	0x08002b15
 8002a9c:	08002b15 	.word	0x08002b15
 8002aa0:	08002b15 	.word	0x08002b15
 8002aa4:	08002b15 	.word	0x08002b15
 8002aa8:	08002b15 	.word	0x08002b15
 8002aac:	08002b09 	.word	0x08002b09
 8002ab0:	08002b15 	.word	0x08002b15
 8002ab4:	08002b15 	.word	0x08002b15
 8002ab8:	08002b15 	.word	0x08002b15
 8002abc:	08002b15 	.word	0x08002b15
 8002ac0:	08002b15 	.word	0x08002b15
 8002ac4:	08002b15 	.word	0x08002b15
 8002ac8:	08002b15 	.word	0x08002b15
 8002acc:	08002afd 	.word	0x08002afd
 8002ad0:	08002b15 	.word	0x08002b15
 8002ad4:	08002b15 	.word	0x08002b15
 8002ad8:	08002b15 	.word	0x08002b15
 8002adc:	08002b15 	.word	0x08002b15
 8002ae0:	08002b15 	.word	0x08002b15
 8002ae4:	08002b15 	.word	0x08002b15
 8002ae8:	08002b15 	.word	0x08002b15
 8002aec:	08002af1 	.word	0x08002af1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d913      	bls.n	8002b1e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002afa:	e010      	b.n	8002b1e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b07      	cmp	r3, #7
 8002b00:	d90f      	bls.n	8002b22 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b06:	e00c      	b.n	8002b22 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	d90b      	bls.n	8002b26 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b12:	e008      	b.n	8002b26 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	75fb      	strb	r3, [r7, #23]
      break;
 8002b18:	e006      	b.n	8002b28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e004      	b.n	8002b28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e002      	b.n	8002b28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b26:	bf00      	nop
  }
  if (status == HAL_OK)
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10d      	bne.n	8002b4a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 0118 	bic.w	r1, r3, #24
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e08d      	b.n	8002c86 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_DMA_Init+0x138>)
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d80f      	bhi.n	8002b96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b45      	ldr	r3, [pc, #276]	; (8002c94 <HAL_DMA_Init+0x13c>)
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a45      	ldr	r2, [pc, #276]	; (8002c98 <HAL_DMA_Init+0x140>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	009a      	lsls	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a42      	ldr	r2, [pc, #264]	; (8002c9c <HAL_DMA_Init+0x144>)
 8002b92:	649a      	str	r2, [r3, #72]	; 0x48
 8002b94:	e00e      	b.n	8002bb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b40      	ldr	r3, [pc, #256]	; (8002ca0 <HAL_DMA_Init+0x148>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <HAL_DMA_Init+0x140>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	009a      	lsls	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a3c      	ldr	r2, [pc, #240]	; (8002ca4 <HAL_DMA_Init+0x14c>)
 8002bb2:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002bca:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002bce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa48 	bl	800309c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c14:	d102      	bne.n	8002c1c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c30:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_DMA_Init+0x104>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d80c      	bhi.n	8002c5c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa68 	bl	8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	e008      	b.n	8002c6e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40020407 	.word	0x40020407
 8002c94:	bffdfff8 	.word	0xbffdfff8
 8002c98:	cccccccd 	.word	0xcccccccd
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	bffdfbf8 	.word	0xbffdfbf8
 8002ca4:	40020400 	.word	0x40020400

08002ca8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d008      	beq.n	8002cd2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e040      	b.n	8002d54 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 020e 	bic.w	r2, r2, #14
 8002ce0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	f003 021c 	and.w	r2, r3, #28
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d1e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002d40:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d005      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	e047      	b.n	8002e14 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 020e 	bic.w	r2, r2, #14
 8002d92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db8:	f003 021c 	and.w	r2, r3, #28
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002dd0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00c      	beq.n	8002df4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002df2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
    }
  }
  return status;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	f003 031c 	and.w	r3, r3, #28
 8002e3e:	2204      	movs	r2, #4
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d053      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xd4>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d04e      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d024      	beq.n	8002eac <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f003 021c 	and.w	r2, r3, #28
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	2104      	movs	r1, #4
 8002e70:	fa01 f202 	lsl.w	r2, r1, r2
 8002e74:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80c0 	beq.w	800300e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002e96:	e0ba      	b.n	800300e <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80b6 	beq.w	800300e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002eaa:	e0b0      	b.n	800300e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0204 	bic.w	r2, r2, #4
 8002ec8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ece:	f003 021c 	and.w	r2, r3, #28
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8093 	beq.w	800300e <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ef0:	e08d      	b.n	800300e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	f003 031c 	and.w	r3, r3, #28
 8002efa:	2202      	movs	r2, #2
 8002efc:	409a      	lsls	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04e      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x186>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d049      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d018      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d108      	bne.n	8002f3e <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d06e      	beq.n	8003012 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f3c:	e069      	b.n	8003012 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d065      	beq.n	8003012 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f4e:	e060      	b.n	8003012 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 020a 	bic.w	r2, r2, #10
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	f003 021c 	and.w	r2, r3, #28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f82:	2102      	movs	r1, #2
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d03b      	beq.n	8003012 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002fa2:	e036      	b.n	8003012 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa8:	f003 031c 	and.w	r3, r3, #28
 8002fac:	2208      	movs	r2, #8
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02e      	beq.n	8003016 <HAL_DMA_IRQHandler+0x1f8>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d029      	beq.n	8003016 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 020e 	bic.w	r2, r2, #14
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	f003 021c 	and.w	r2, r3, #28
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800300c:	e002      	b.n	8003014 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003012:	bf00      	nop
  return;
 8003014:	bf00      	nop
 8003016:	bf00      	nop
}
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800302c:	b2db      	uxtb	r3, r3
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	72fb      	strb	r3, [r7, #11]
    return status;
 8003052:	7afb      	ldrb	r3, [r7, #11]
 8003054:	e01b      	b.n	800308e <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00d      	beq.n	8003084 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e003      	b.n	8003084 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003082:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	601a      	str	r2, [r3, #0]

  return status;
 800308c:	7afb      	ldrb	r3, [r7, #11]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b17      	ldr	r3, [pc, #92]	; (8003108 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d80a      	bhi.n	80030c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030bc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6513      	str	r3, [r2, #80]	; 0x50
 80030c4:	e007      	b.n	80030d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	009a      	lsls	r2, r3, #2
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80030d0:	4413      	add	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3b08      	subs	r3, #8
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2201      	movs	r2, #1
 80030f6:	409a      	lsls	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40020407 	.word	0x40020407
 800310c:	40020820 	.word	0x40020820
 8003110:	cccccccd 	.word	0xcccccccd
 8003114:	40020880 	.word	0x40020880

08003118 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	461a      	mov	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a08      	ldr	r2, [pc, #32]	; (800315c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800313a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3b01      	subs	r3, #1
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2201      	movs	r2, #1
 8003146:	409a      	lsls	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	1000823f 	.word	0x1000823f
 800315c:	40020940 	.word	0x40020940

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800316e:	e158      	b.n	8003422 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 814a 	beq.w	800341c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d00b      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d007      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800319c:	2b11      	cmp	r3, #17
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b12      	cmp	r3, #18
 80031a6:	d130      	bne.n	800320a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031de:	2201      	movs	r2, #1
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 0201 	and.w	r2, r3, #1
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	2203      	movs	r2, #3
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0xea>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b12      	cmp	r3, #18
 8003248:	d123      	bne.n	8003292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	220f      	movs	r2, #15
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	08da      	lsrs	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	6939      	ldr	r1, [r7, #16]
 800328e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80a4 	beq.w	800341c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80032d4:	4a5a      	ldr	r2, [pc, #360]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	3318      	adds	r3, #24
 80032dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_GPIO_Init+0x2e4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d025      	beq.n	800334c <HAL_GPIO_Init+0x1ec>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a51      	ldr	r2, [pc, #324]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d01f      	beq.n	8003348 <HAL_GPIO_Init+0x1e8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a50      	ldr	r2, [pc, #320]	; (800344c <HAL_GPIO_Init+0x2ec>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d019      	beq.n	8003344 <HAL_GPIO_Init+0x1e4>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a4f      	ldr	r2, [pc, #316]	; (8003450 <HAL_GPIO_Init+0x2f0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <HAL_GPIO_Init+0x1e0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a4e      	ldr	r2, [pc, #312]	; (8003454 <HAL_GPIO_Init+0x2f4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00d      	beq.n	800333c <HAL_GPIO_Init+0x1dc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a4d      	ldr	r2, [pc, #308]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d007      	beq.n	8003338 <HAL_GPIO_Init+0x1d8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a4c      	ldr	r2, [pc, #304]	; (800345c <HAL_GPIO_Init+0x2fc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_GPIO_Init+0x1d4>
 8003330:	2306      	movs	r3, #6
 8003332:	e00c      	b.n	800334e <HAL_GPIO_Init+0x1ee>
 8003334:	2307      	movs	r3, #7
 8003336:	e00a      	b.n	800334e <HAL_GPIO_Init+0x1ee>
 8003338:	2305      	movs	r3, #5
 800333a:	e008      	b.n	800334e <HAL_GPIO_Init+0x1ee>
 800333c:	2304      	movs	r3, #4
 800333e:	e006      	b.n	800334e <HAL_GPIO_Init+0x1ee>
 8003340:	2303      	movs	r3, #3
 8003342:	e004      	b.n	800334e <HAL_GPIO_Init+0x1ee>
 8003344:	2302      	movs	r3, #2
 8003346:	e002      	b.n	800334e <HAL_GPIO_Init+0x1ee>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_GPIO_Init+0x1ee>
 800334c:	2300      	movs	r3, #0
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	f002 0203 	and.w	r2, r2, #3
 8003354:	00d2      	lsls	r2, r2, #3
 8003356:	4093      	lsls	r3, r2
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800335e:	4938      	ldr	r1, [pc, #224]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3318      	adds	r3, #24
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 800336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003392:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c0:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3301      	adds	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	f47f ae9f 	bne.w	8003170 <HAL_GPIO_Init+0x10>
  }
}
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	4002f400 	.word	0x4002f400
 8003444:	42020000 	.word	0x42020000
 8003448:	42020400 	.word	0x42020400
 800344c:	42020800 	.word	0x42020800
 8003450:	42020c00 	.word	0x42020c00
 8003454:	42021000 	.word	0x42021000
 8003458:	42021400 	.word	0x42021400
 800345c:	42021800 	.word	0x42021800

08003460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
 800346c:	4613      	mov	r3, r2
 800346e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800347c:	e002      	b.n	8003484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034a2:	887a      	ldrh	r2, [r7, #2]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4013      	ands	r3, r2
 80034a8:	041a      	lsls	r2, r3, #16
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43d9      	mvns	r1, r3
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	400b      	ands	r3, r1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e081      	b.n	80035da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd faca 	bl	8000a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	; 0x24
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003514:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003524:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	e006      	b.n	800354c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800354a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d104      	bne.n	800355e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800355c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800356c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	ea42 0103 	orr.w	r1, r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	021a      	lsls	r2, r3, #8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69d9      	ldr	r1, [r3, #28]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
  }
}
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <HAL_I2C_ER_IRQHandler+0x46>
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	09db      	lsrs	r3, r3, #7
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800365a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	0a9b      	lsrs	r3, r3, #10
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <HAL_I2C_ER_IRQHandler+0x74>
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	09db      	lsrs	r3, r3, #7
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	f043 0208 	orr.w	r2, r3, #8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003688:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	0a5b      	lsrs	r3, r3, #9
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d010      	beq.n	80036b8 <HAL_I2C_ER_IRQHandler+0xa2>
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	09db      	lsrs	r3, r3, #7
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0202 	orr.w	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 030b 	and.w	r3, r3, #11
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80036c8:	68f9      	ldr	r1, [r7, #12]
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fb8a 	bl	8003de4 <I2C_ITError>
  }
}
 80036d0:	bf00      	nop
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
 800370c:	4613      	mov	r3, r2
 800370e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <I2C_Slave_ISR_IT+0x24>
 8003778:	2302      	movs	r3, #2
 800377a:	e0ec      	b.n	8003956 <I2C_Slave_ISR_IT+0x1fe>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <I2C_Slave_ISR_IT+0x4c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800379c:	6939      	ldr	r1, [r7, #16]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f9c0 	bl	8003b24 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d04d      	beq.n	800384c <I2C_Slave_ISR_IT+0xf4>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d047      	beq.n	800384c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d128      	bne.n	8003818 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b28      	cmp	r3, #40	; 0x28
 80037d0:	d108      	bne.n	80037e4 <I2C_Slave_ISR_IT+0x8c>
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037d8:	d104      	bne.n	80037e4 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80037da:	6939      	ldr	r1, [r7, #16]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 faab 	bl	8003d38 <I2C_ITListenCplt>
 80037e2:	e032      	b.n	800384a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b29      	cmp	r3, #41	; 0x29
 80037ee:	d10e      	bne.n	800380e <I2C_Slave_ISR_IT+0xb6>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f6:	d00a      	beq.n	800380e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2210      	movs	r2, #16
 80037fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fbe6 	bl	8003fd2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f92d 	bl	8003a66 <I2C_ITSlaveSeqCplt>
 800380c:	e01d      	b.n	800384a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2210      	movs	r2, #16
 8003814:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003816:	e096      	b.n	8003946 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2210      	movs	r2, #16
 800381e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f043 0204 	orr.w	r2, r3, #4
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <I2C_Slave_ISR_IT+0xe4>
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003838:	f040 8085 	bne.w	8003946 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	4619      	mov	r1, r3
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 face 	bl	8003de4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003848:	e07d      	b.n	8003946 <I2C_Slave_ISR_IT+0x1ee>
 800384a:	e07c      	b.n	8003946 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d030      	beq.n	80038ba <I2C_Slave_ISR_IT+0x162>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02a      	beq.n	80038ba <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d018      	beq.n	80038a0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d14f      	bne.n	800394a <I2C_Slave_ISR_IT+0x1f2>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038b0:	d04b      	beq.n	800394a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f8d7 	bl	8003a66 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80038b8:	e047      	b.n	800394a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	08db      	lsrs	r3, r3, #3
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	08db      	lsrs	r3, r3, #3
 80038ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80038d2:	6939      	ldr	r1, [r7, #16]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f842 	bl	800395e <I2C_ITAddrCplt>
 80038da:	e037      	b.n	800394c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d031      	beq.n	800394c <I2C_Slave_ISR_IT+0x1f4>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d02b      	beq.n	800394c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
 800392e:	e00d      	b.n	800394c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003936:	d002      	beq.n	800393e <I2C_Slave_ISR_IT+0x1e6>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f891 	bl	8003a66 <I2C_ITSlaveSeqCplt>
 8003944:	e002      	b.n	800394c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800394a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003974:	2b28      	cmp	r3, #40	; 0x28
 8003976:	d16a      	bne.n	8003a4e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	0c1b      	lsrs	r3, r3, #16
 8003990:	b29b      	uxth	r3, r3
 8003992:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003996:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80039b2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d138      	bne.n	8003a2e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80039bc:	897b      	ldrh	r3, [r7, #10]
 80039be:	09db      	lsrs	r3, r3, #7
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	89bb      	ldrh	r3, [r7, #12]
 80039c4:	4053      	eors	r3, r2
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f003 0306 	and.w	r3, r3, #6
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d11c      	bne.n	8003a0a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d13b      	bne.n	8003a5e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2208      	movs	r2, #8
 80039f2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039fc:	89ba      	ldrh	r2, [r7, #12]
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fe7c 	bl	8003700 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a08:	e029      	b.n	8003a5e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003a0a:	893b      	ldrh	r3, [r7, #8]
 8003a0c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fb1f 	bl	8004056 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a20:	89ba      	ldrh	r2, [r7, #12]
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fe6a 	bl	8003700 <HAL_I2C_AddrCallback>
}
 8003a2c:	e017      	b.n	8003a5e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fb0f 	bl	8004056 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a40:	89ba      	ldrh	r2, [r7, #12]
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	4619      	mov	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fe5a 	bl	8003700 <HAL_I2C_AddrCallback>
}
 8003a4c:	e007      	b.n	8003a5e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2208      	movs	r2, #8
 8003a54:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	0b9b      	lsrs	r3, r3, #14
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e00d      	b.n	8003ab8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	0bdb      	lsrs	r3, r3, #15
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b29      	cmp	r3, #41	; 0x29
 8003ac2:	d112      	bne.n	8003aea <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2228      	movs	r2, #40	; 0x28
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2221      	movs	r2, #33	; 0x21
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fabe 	bl	8004056 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fdf8 	bl	80036d8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ae8:	e017      	b.n	8003b1a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b2a      	cmp	r3, #42	; 0x2a
 8003af4:	d111      	bne.n	8003b1a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2228      	movs	r2, #40	; 0x28
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2222      	movs	r2, #34	; 0x22
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b04:	2102      	movs	r1, #2
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 faa5 	bl	8004056 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fde9 	bl	80036ec <HAL_I2C_SlaveRxCpltCallback>
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b40:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2220      	movs	r2, #32
 8003b48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b21      	cmp	r3, #33	; 0x21
 8003b4e:	d002      	beq.n	8003b56 <I2C_ITSlaveCplt+0x32>
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b29      	cmp	r3, #41	; 0x29
 8003b54:	d108      	bne.n	8003b68 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b56:	f248 0101 	movw	r1, #32769	; 0x8001
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fa7b 	bl	8004056 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2221      	movs	r2, #33	; 0x21
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
 8003b66:	e00d      	b.n	8003b84 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b22      	cmp	r3, #34	; 0x22
 8003b6c:	d002      	beq.n	8003b74 <I2C_ITSlaveCplt+0x50>
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b2a      	cmp	r3, #42	; 0x2a
 8003b72:	d107      	bne.n	8003b84 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003b74:	f248 0102 	movw	r1, #32770	; 0x8002
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fa6c 	bl	8004056 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2222      	movs	r2, #34	; 0x22
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b92:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b64      	ldr	r3, [pc, #400]	; (8003d30 <I2C_ITSlaveCplt+0x20c>)
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa14 	bl	8003fd2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	0b9b      	lsrs	r3, r3, #14
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d013      	beq.n	8003bde <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bc4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d020      	beq.n	8003c10 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bdc:	e018      	b.n	8003c10 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	0bdb      	lsrs	r3, r3, #15
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d012      	beq.n	8003c10 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00c      	beq.n	8003c5e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	f043 0204 	orr.w	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d010      	beq.n	8003cac <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8a7 	bl	8003de4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b28      	cmp	r3, #40	; 0x28
 8003ca0:	d141      	bne.n	8003d26 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ca2:	6979      	ldr	r1, [r7, #20]
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f847 	bl	8003d38 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003caa:	e03c      	b.n	8003d26 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cb4:	d014      	beq.n	8003ce0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fed5 	bl	8003a66 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <I2C_ITSlaveCplt+0x210>)
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fd1f 	bl	800371c <HAL_I2C_ListenCpltCallback>
}
 8003cde:	e022      	b.n	8003d26 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b22      	cmp	r3, #34	; 0x22
 8003cea:	d10e      	bne.n	8003d0a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fcf2 	bl	80036ec <HAL_I2C_SlaveRxCpltCallback>
}
 8003d08:	e00d      	b.n	8003d26 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fcd9 	bl	80036d8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	fe00e800 	.word	0xfe00e800
 8003d34:	ffff0000 	.word	0xffff0000

08003d38 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <I2C_ITListenCplt+0xa8>)
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	089b      	lsrs	r3, r3, #2
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d022      	beq.n	8003db6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f043 0204 	orr.w	r2, r3, #4
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003db6:	f248 0103 	movw	r1, #32771	; 0x8003
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f94b 	bl	8004056 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fca3 	bl	800371c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	ffff0000 	.word	0xffff0000

08003de4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <I2C_ITError+0x194>)
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	2b28      	cmp	r3, #40	; 0x28
 8003e1a:	d005      	beq.n	8003e28 <I2C_ITError+0x44>
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b29      	cmp	r3, #41	; 0x29
 8003e20:	d002      	beq.n	8003e28 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	2b2a      	cmp	r3, #42	; 0x2a
 8003e26:	d10b      	bne.n	8003e40 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e28:	2103      	movs	r1, #3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f913 	bl	8004056 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2228      	movs	r2, #40	; 0x28
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a50      	ldr	r2, [pc, #320]	; (8003f7c <I2C_ITError+0x198>)
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e3e:	e011      	b.n	8003e64 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e40:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f906 	bl	8004056 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b60      	cmp	r3, #96	; 0x60
 8003e54:	d003      	beq.n	8003e5e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d039      	beq.n	8003ee6 <I2C_ITError+0x102>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b11      	cmp	r3, #17
 8003e76:	d002      	beq.n	8003e7e <I2C_ITError+0x9a>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b21      	cmp	r3, #33	; 0x21
 8003e7c:	d133      	bne.n	8003ee6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e8c:	d107      	bne.n	8003e9e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e9c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff f8bb 	bl	800301e <HAL_DMA_GetState>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d017      	beq.n	8003ede <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <I2C_ITError+0x19c>)
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe ff4c 	bl	8002d60 <HAL_DMA_Abort_IT>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d04d      	beq.n	8003f6a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003edc:	e045      	b.n	8003f6a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f850 	bl	8003f84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ee4:	e041      	b.n	8003f6a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d039      	beq.n	8003f62 <I2C_ITError+0x17e>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b12      	cmp	r3, #18
 8003ef2:	d002      	beq.n	8003efa <I2C_ITError+0x116>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b22      	cmp	r3, #34	; 0x22
 8003ef8:	d133      	bne.n	8003f62 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f08:	d107      	bne.n	8003f1a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f18:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff f87d 	bl	800301e <HAL_DMA_GetState>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d017      	beq.n	8003f5a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2e:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <I2C_ITError+0x19c>)
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe ff0e 	bl	8002d60 <HAL_DMA_Abort_IT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d011      	beq.n	8003f6e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f54:	4610      	mov	r0, r2
 8003f56:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f58:	e009      	b.n	8003f6e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f812 	bl	8003f84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f60:	e005      	b.n	8003f6e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f80e 	bl	8003f84 <I2C_TreatErrorCallback>
  }
}
 8003f68:	e002      	b.n	8003f70 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f6a:	bf00      	nop
 8003f6c:	e000      	b.n	8003f70 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f6e:	bf00      	nop
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	ffff0000 	.word	0xffff0000
 8003f7c:	08003759 	.word	0x08003759
 8003f80:	0800401b 	.word	0x0800401b

08003f84 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b60      	cmp	r3, #96	; 0x60
 8003f96:	d10e      	bne.n	8003fb6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fbc8 	bl	8003744 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fb4:	e009      	b.n	8003fca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff fbb3 	bl	8003730 <HAL_I2C_ErrorCallback>
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d103      	bne.n	8003ff0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2200      	movs	r2, #0
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d007      	beq.n	800400e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	619a      	str	r2, [r3, #24]
  }
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	2200      	movs	r2, #0
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff ff9b 	bl	8003f84 <I2C_TreatErrorCallback>
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00f      	beq.n	8004090 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004076:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004084:	2b28      	cmp	r3, #40	; 0x28
 8004086:	d003      	beq.n	8004090 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800408e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004090:	887b      	ldrh	r3, [r7, #2]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00f      	beq.n	80040ba <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80040a0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040ae:	2b28      	cmp	r3, #40	; 0x28
 80040b0:	d003      	beq.n	80040ba <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80040ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	da03      	bge.n	80040ca <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d103      	bne.n	80040d8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80040d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d103      	bne.n	80040e6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f043 0320 	orr.w	r3, r3, #32
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d103      	bne.n	80040f4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6819      	ldr	r1, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	43da      	mvns	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	400a      	ands	r2, r1
 8004104:	601a      	str	r2, [r3, #0]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b20      	cmp	r3, #32
 8004126:	d138      	bne.n	800419a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004132:	2302      	movs	r3, #2
 8004134:	e032      	b.n	800419c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2224      	movs	r2, #36	; 0x24
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004164:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6819      	ldr	r1, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e000      	b.n	800419c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800419a:	2302      	movs	r3, #2
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d139      	bne.n	8004232 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e033      	b.n	8004234 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2224      	movs	r2, #36	; 0x24
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_PWREx_GetVoltageRange+0x18>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40007000 	.word	0x40007000

0800425c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800426c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800426e:	f000 f861 	bl	8004334 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004272:	4603      	mov	r3, r0
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004278:	d101      	bne.n	800427e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e03e      	b.n	80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800427e:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428a:	d101      	bne.n	8004290 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e035      	b.n	80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d101      	bne.n	800429c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e02f      	b.n	80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800429c:	4b19      	ldr	r3, [pc, #100]	; (8004304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80042a4:	4917      	ldr	r1, [pc, #92]	; (8004304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80042ac:	4b16      	ldr	r3, [pc, #88]	; (8004308 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	4a16      	ldr	r2, [pc, #88]	; (800430c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	09db      	lsrs	r3, r3, #7
 80042ba:	2232      	movs	r2, #50	; 0x32
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	4a13      	ldr	r2, [pc, #76]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	08db      	lsrs	r3, r3, #3
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042cc:	e002      	b.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d102      	bne.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f2      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	d101      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e000      	b.n	80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40007000 	.word	0x40007000
 8004308:	20000000 	.word	0x20000000
 800430c:	0a7c5ac5 	.word	0x0a7c5ac5
 8004310:	cccccccd 	.word	0xcccccccd

08004314 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800431e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004322:	6093      	str	r3, [r2, #8]
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40007000 	.word	0x40007000

08004334 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800434a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	e00a      	b.n	8004368 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d103      	bne.n	8004364 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800435c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	e001      	b.n	8004368 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004364:	2300      	movs	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004368:	687b      	ldr	r3, [r7, #4]
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40007000 	.word	0x40007000

0800437c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f000 bcd0 	b.w	8004d30 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004390:	4ba3      	ldr	r3, [pc, #652]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800439a:	4ba1      	ldr	r3, [pc, #644]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80e9 	beq.w	8004584 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <HAL_RCC_OscConfig+0x4a>
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b0c      	cmp	r3, #12
 80043bc:	f040 8083 	bne.w	80044c6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d17f      	bne.n	80044c6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043c6:	4b96      	ldr	r3, [pc, #600]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <HAL_RCC_OscConfig+0x64>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f000 bca8 	b.w	8004d30 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e4:	4b8e      	ldr	r3, [pc, #568]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <HAL_RCC_OscConfig+0x7e>
 80043f0:	4b8b      	ldr	r3, [pc, #556]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f8:	e005      	b.n	8004406 <HAL_RCC_OscConfig+0x8a>
 80043fa:	4b89      	ldr	r3, [pc, #548]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80043fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004406:	4293      	cmp	r3, r2
 8004408:	d224      	bcs.n	8004454 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	4618      	mov	r0, r3
 8004410:	f000 feca 	bl	80051a8 <RCC_SetFlashLatencyFromMSIRange>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f000 bc88 	b.w	8004d30 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004420:	4b7f      	ldr	r3, [pc, #508]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a7e      	ldr	r2, [pc, #504]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004426:	f043 0308 	orr.w	r3, r3, #8
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b7c      	ldr	r3, [pc, #496]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	4979      	ldr	r1, [pc, #484]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443e:	4b78      	ldr	r3, [pc, #480]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	4974      	ldr	r1, [pc, #464]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 800444e:	4313      	orrs	r3, r2
 8004450:	604b      	str	r3, [r1, #4]
 8004452:	e026      	b.n	80044a2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004454:	4b72      	ldr	r3, [pc, #456]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a71      	ldr	r2, [pc, #452]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 800445a:	f043 0308 	orr.w	r3, r3, #8
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	4b6f      	ldr	r3, [pc, #444]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	496c      	ldr	r1, [pc, #432]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004472:	4b6b      	ldr	r3, [pc, #428]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	4967      	ldr	r1, [pc, #412]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fe89 	bl	80051a8 <RCC_SetFlashLatencyFromMSIRange>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f000 bc47 	b.w	8004d30 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80044a2:	f000 fe13 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4a5e      	ldr	r2, [pc, #376]	; (8004624 <HAL_RCC_OscConfig+0x2a8>)
 80044aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044ac:	4b5e      	ldr	r3, [pc, #376]	; (8004628 <HAL_RCC_OscConfig+0x2ac>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fc fd11 	bl	8000ed8 <HAL_InitTick>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d060      	beq.n	8004582 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	f000 bc35 	b.w	8004d30 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d039      	beq.n	8004542 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044ce:	4b54      	ldr	r3, [pc, #336]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a53      	ldr	r2, [pc, #332]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044da:	f7fd f94d 	bl	8001778 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e0:	e00f      	b.n	8004502 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044e2:	f7fd f949 	bl	8001778 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d908      	bls.n	8004502 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044f0:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	f000 bc17 	b.w	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004502:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0e9      	beq.n	80044e2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800450e:	4b44      	ldr	r3, [pc, #272]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a43      	ldr	r2, [pc, #268]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004514:	f043 0308 	orr.w	r3, r3, #8
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b41      	ldr	r3, [pc, #260]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	493e      	ldr	r1, [pc, #248]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452c:	4b3c      	ldr	r3, [pc, #240]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	4939      	ldr	r1, [pc, #228]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
 8004540:	e020      	b.n	8004584 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004542:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a36      	ldr	r2, [pc, #216]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800454e:	f7fd f913 	bl	8001778 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004554:	e00e      	b.n	8004574 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004556:	f7fd f90f 	bl	8001778 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d907      	bls.n	8004574 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004564:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e3dd      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004574:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ea      	bne.n	8004556 <HAL_RCC_OscConfig+0x1da>
 8004580:	e000      	b.n	8004584 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004582:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d07e      	beq.n	800468e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b08      	cmp	r3, #8
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x226>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d10e      	bne.n	80045ba <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d10b      	bne.n	80045ba <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d06e      	beq.n	800468c <HAL_RCC_OscConfig+0x310>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d16a      	bne.n	800468c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e3ba      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_OscConfig+0x256>
 80045c4:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80045ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	e01d      	b.n	800460e <HAL_RCC_OscConfig+0x292>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x27a>
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80045e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e00b      	b.n	800460e <HAL_RCC_OscConfig+0x292>
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80045fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a06      	ldr	r2, [pc, #24]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 8004608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d020      	beq.n	8004658 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fd f8af 	bl	8001778 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x2ce>
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
 8004624:	20000000 	.word	0x20000000
 8004628:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800462c:	f7fd f8a4 	bl	8001778 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d907      	bls.n	800464a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463a:	4b9f      	ldr	r3, [pc, #636]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e372      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800464a:	4b9b      	ldr	r3, [pc, #620]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ea      	beq.n	800462c <HAL_RCC_OscConfig+0x2b0>
 8004656:	e01a      	b.n	800468e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd f88e 	bl	8001778 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465e:	e00e      	b.n	800467e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004660:	f7fd f88a 	bl	8001778 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d907      	bls.n	800467e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800466e:	4b92      	ldr	r3, [pc, #584]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e358      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800467e:	4b8e      	ldr	r3, [pc, #568]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1ea      	bne.n	8004660 <HAL_RCC_OscConfig+0x2e4>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d06c      	beq.n	8004774 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d005      	beq.n	80046ac <HAL_RCC_OscConfig+0x330>
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d119      	bne.n	80046da <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d116      	bne.n	80046da <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ac:	4b82      	ldr	r3, [pc, #520]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_OscConfig+0x348>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e335      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b7c      	ldr	r3, [pc, #496]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	4979      	ldr	r1, [pc, #484]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d8:	e04c      	b.n	8004774 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d029      	beq.n	8004736 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e2:	4b75      	ldr	r3, [pc, #468]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a74      	ldr	r2, [pc, #464]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ee:	f7fd f843 	bl	8001778 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f4:	e00e      	b.n	8004714 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f6:	f7fd f83f 	bl	8001778 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d907      	bls.n	8004714 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e30d      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004714:	4b68      	ldr	r3, [pc, #416]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ea      	beq.n	80046f6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b65      	ldr	r3, [pc, #404]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	4962      	ldr	r1, [pc, #392]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
 8004734:	e01e      	b.n	8004774 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004736:	4b60      	ldr	r3, [pc, #384]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a5f      	ldr	r2, [pc, #380]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 800473c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fd f819 	bl	8001778 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004748:	e00e      	b.n	8004768 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474a:	f7fd f815 	bl	8001778 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d907      	bls.n	8004768 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004758:	4b57      	ldr	r3, [pc, #348]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e2e3      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004768:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1ea      	bne.n	800474a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d05f      	beq.n	8004840 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d038      	beq.n	80047fa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d108      	bne.n	80047a2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004790:	4b49      	ldr	r3, [pc, #292]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004796:	4a48      	ldr	r2, [pc, #288]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004798:	f023 0310 	bic.w	r3, r3, #16
 800479c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80047a0:	e007      	b.n	80047b2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80047a2:	4b45      	ldr	r3, [pc, #276]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80047a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a8:	4a43      	ldr	r2, [pc, #268]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80047aa:	f043 0310 	orr.w	r3, r3, #16
 80047ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80047b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b8:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c2:	f7fc ffd9 	bl	8001778 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047c8:	e00f      	b.n	80047ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ca:	f7fc ffd5 	bl	8001778 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b07      	cmp	r3, #7
 80047d6:	d908      	bls.n	80047ea <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047d8:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e2a2      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ea:	4b33      	ldr	r3, [pc, #204]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80047ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0e8      	beq.n	80047ca <HAL_RCC_OscConfig+0x44e>
 80047f8:	e022      	b.n	8004840 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047fa:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 80047fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004800:	4a2d      	ldr	r2, [pc, #180]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004802:	f023 0301 	bic.w	r3, r3, #1
 8004806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480a:	f7fc ffb5 	bl	8001778 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004810:	e00f      	b.n	8004832 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004812:	f7fc ffb1 	bl	8001778 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b07      	cmp	r3, #7
 800481e:	d908      	bls.n	8004832 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004820:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e27e      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004832:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e8      	bne.n	8004812 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8131 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004852:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10d      	bne.n	800487a <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004862:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6593      	str	r3, [r2, #88]	; 0x58
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <HAL_RCC_OscConfig+0x53c>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <HAL_RCC_OscConfig+0x540>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d122      	bne.n	80048cc <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <HAL_RCC_OscConfig+0x540>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a0c      	ldr	r2, [pc, #48]	; (80048bc <HAL_RCC_OscConfig+0x540>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004892:	f7fc ff71 	bl	8001778 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004898:	e012      	b.n	80048c0 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489a:	f7fc ff6d 	bl	8001778 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d90b      	bls.n	80048c0 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048a8:	4b04      	ldr	r3, [pc, #16]	; (80048bc <HAL_RCC_OscConfig+0x540>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e23b      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c0:	4bb8      	ldr	r3, [pc, #736]	; (8004ba4 <HAL_RCC_OscConfig+0x828>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0e6      	beq.n	800489a <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01f      	beq.n	8004918 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048e4:	4bb0      	ldr	r3, [pc, #704]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	4aaf      	ldr	r2, [pc, #700]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048f4:	4bac      	ldr	r3, [pc, #688]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	4aab      	ldr	r2, [pc, #684]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004904:	e018      	b.n	8004938 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004906:	4ba8      	ldr	r3, [pc, #672]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	4aa6      	ldr	r2, [pc, #664]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004916:	e00f      	b.n	8004938 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004918:	4ba3      	ldr	r3, [pc, #652]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	4aa2      	ldr	r2, [pc, #648]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004928:	4b9f      	ldr	r3, [pc, #636]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	4a9e      	ldr	r2, [pc, #632]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004930:	f023 0304 	bic.w	r3, r3, #4
 8004934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d068      	beq.n	8004a12 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fc ff1a 	bl	8001778 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004946:	e011      	b.n	800496c <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fc ff16 	bl	8001778 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d908      	bls.n	800496c <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495a:	4b93      	ldr	r3, [pc, #588]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e1e1      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800496c:	4b8e      	ldr	r3, [pc, #568]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0e6      	beq.n	8004948 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d022      	beq.n	80049cc <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004986:	4b88      	ldr	r3, [pc, #544]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498c:	4a86      	ldr	r2, [pc, #536]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 800498e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004996:	e011      	b.n	80049bc <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004998:	f7fc feee 	bl	8001778 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d908      	bls.n	80049bc <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80049aa:	4b7f      	ldr	r3, [pc, #508]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e1b9      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80049bc:	4b7a      	ldr	r3, [pc, #488]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0e6      	beq.n	8004998 <HAL_RCC_OscConfig+0x61c>
 80049ca:	e068      	b.n	8004a9e <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049cc:	4b76      	ldr	r3, [pc, #472]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	4a75      	ldr	r2, [pc, #468]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 80049d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049dc:	e011      	b.n	8004a02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049de:	f7fc fecb 	bl	8001778 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d908      	bls.n	8004a02 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049f0:	4b6d      	ldr	r3, [pc, #436]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e196      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a02:	4b69      	ldr	r3, [pc, #420]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e6      	bne.n	80049de <HAL_RCC_OscConfig+0x662>
 8004a10:	e045      	b.n	8004a9e <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a12:	f7fc feb1 	bl	8001778 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a18:	e011      	b.n	8004a3e <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7fc fead 	bl	8001778 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d908      	bls.n	8004a3e <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a2c:	4b5e      	ldr	r3, [pc, #376]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e178      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a3e:	4b5a      	ldr	r3, [pc, #360]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e6      	bne.n	8004a1a <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004a4c:	4b56      	ldr	r3, [pc, #344]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d021      	beq.n	8004a9e <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a5a:	4b53      	ldr	r3, [pc, #332]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	4a51      	ldr	r2, [pc, #324]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a6a:	e011      	b.n	8004a90 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6c:	f7fc fe84 	bl	8001778 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d908      	bls.n	8004a90 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e14f      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a90:	4b45      	ldr	r3, [pc, #276]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e6      	bne.n	8004a6c <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b40      	ldr	r3, [pc, #256]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	4a3f      	ldr	r2, [pc, #252]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d04a      	beq.n	8004b52 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d023      	beq.n	8004b0c <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ac4:	4b38      	ldr	r3, [pc, #224]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aca:	4a37      	ldr	r2, [pc, #220]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad4:	f7fc fe50 	bl	8001778 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ada:	e00f      	b.n	8004afc <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004adc:	f7fc fe4c 	bl	8001778 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d908      	bls.n	8004afc <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aea:	4b2f      	ldr	r3, [pc, #188]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e119      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004afc:	4b2a      	ldr	r3, [pc, #168]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0e8      	beq.n	8004adc <HAL_RCC_OscConfig+0x760>
 8004b0a:	e022      	b.n	8004b52 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b0c:	4b26      	ldr	r3, [pc, #152]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b12:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fc fe2c 	bl	8001778 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b22:	e00f      	b.n	8004b44 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b24:	f7fc fe28 	bl	8001778 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d908      	bls.n	8004b44 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b32:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0f5      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b44:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e8      	bne.n	8004b24 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80e9 	beq.w	8004d2e <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b5c:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	f000 80a3 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d16a      	bne.n	8004c48 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7e:	f7fc fdfb 	bl	8001778 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b84:	e012      	b.n	8004bac <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b86:	f7fc fdf7 	bl	8001778 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d90b      	bls.n	8004bac <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <HAL_RCC_OscConfig+0x82c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e0c5      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
 8004ba4:	40007000 	.word	0x40007000
 8004ba8:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bac:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e6      	bne.n	8004b86 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb8:	4b5f      	ldr	r3, [pc, #380]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	4b5f      	ldr	r3, [pc, #380]	; (8004d3c <HAL_RCC_OscConfig+0x9c0>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bc8:	3a01      	subs	r2, #1
 8004bca:	0112      	lsls	r2, r2, #4
 8004bcc:	4311      	orrs	r1, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd2:	0212      	lsls	r2, r2, #8
 8004bd4:	4311      	orrs	r1, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bda:	0852      	lsrs	r2, r2, #1
 8004bdc:	3a01      	subs	r2, #1
 8004bde:	0552      	lsls	r2, r2, #21
 8004be0:	4311      	orrs	r1, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004be6:	0852      	lsrs	r2, r2, #1
 8004be8:	3a01      	subs	r2, #1
 8004bea:	0652      	lsls	r2, r2, #25
 8004bec:	4311      	orrs	r1, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bf2:	06d2      	lsls	r2, r2, #27
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	4950      	ldr	r1, [pc, #320]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bfc:	4b4e      	ldr	r3, [pc, #312]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a4d      	ldr	r2, [pc, #308]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c08:	4b4b      	ldr	r3, [pc, #300]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4a4a      	ldr	r2, [pc, #296]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fc fdb0 	bl	8001778 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	e00e      	b.n	8004c3a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fc fdac 	bl	8001778 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d907      	bls.n	8004c3a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c2a:	4b43      	ldr	r3, [pc, #268]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e07a      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c3a:	4b3f      	ldr	r3, [pc, #252]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ea      	beq.n	8004c1c <HAL_RCC_OscConfig+0x8a0>
 8004c46:	e072      	b.n	8004d2e <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c54:	4b38      	ldr	r3, [pc, #224]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c60:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a34      	ldr	r2, [pc, #208]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c6c:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4a31      	ldr	r2, [pc, #196]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c72:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fc fd7c 	bl	8001778 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c82:	e00e      	b.n	8004ca2 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fc fd78 	bl	8001778 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d907      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e046      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca2:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1ea      	bne.n	8004c84 <HAL_RCC_OscConfig+0x908>
 8004cae:	e03e      	b.n	8004d2e <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e039      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <HAL_RCC_OscConfig+0x9bc>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f003 0203 	and.w	r2, r3, #3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d12c      	bne.n	8004d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d123      	bne.n	8004d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d11b      	bne.n	8004d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d113      	bne.n	8004d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d109      	bne.n	8004d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	3b01      	subs	r3, #1
 8004d24:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d001      	beq.n	8004d2e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	019f800c 	.word	0x019f800c

08004d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e10d      	b.n	8004f74 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d58:	4b88      	ldr	r3, [pc, #544]	; (8004f7c <HAL_RCC_ClockConfig+0x23c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d910      	bls.n	8004d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d66:	4b85      	ldr	r3, [pc, #532]	; (8004f7c <HAL_RCC_ClockConfig+0x23c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 020f 	bic.w	r2, r3, #15
 8004d6e:	4983      	ldr	r1, [pc, #524]	; (8004f7c <HAL_RCC_ClockConfig+0x23c>)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	4b81      	ldr	r3, [pc, #516]	; (8004f7c <HAL_RCC_ClockConfig+0x23c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0f5      	b.n	8004f74 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8094 	beq.w	8004ebe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d134      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	4b78      	ldr	r3, [pc, #480]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e0e2      	b.n	8004f74 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004dae:	f000 fa5f 	bl	8005270 <RCC_GetSysClockFreqFromPLLSource>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4a73      	ldr	r2, [pc, #460]	; (8004f84 <HAL_RCC_ClockConfig+0x244>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d956      	bls.n	8004e6a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004dbc:	4b70      	ldr	r3, [pc, #448]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dc8:	4b6d      	ldr	r3, [pc, #436]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd0:	4a6b      	ldr	r2, [pc, #428]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e045      	b.n	8004e6a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d03f      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d13b      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004df2:	4b63      	ldr	r3, [pc, #396]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dfa:	4a61      	ldr	r2, [pc, #388]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	e030      	b.n	8004e6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e10:	4b5b      	ldr	r3, [pc, #364]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d115      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0a9      	b.n	8004f74 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d107      	bne.n	8004e38 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e28:	4b55      	ldr	r3, [pc, #340]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e09d      	b.n	8004f74 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e38:	4b51      	ldr	r3, [pc, #324]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e095      	b.n	8004f74 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e48:	f000 f8a2 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 8004e4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4a4c      	ldr	r2, [pc, #304]	; (8004f84 <HAL_RCC_ClockConfig+0x244>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d909      	bls.n	8004e6a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e56:	4b4a      	ldr	r3, [pc, #296]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e5e:	4a48      	ldr	r2, [pc, #288]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b45      	ldr	r3, [pc, #276]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4942      	ldr	r1, [pc, #264]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fc fc7c 	bl	8001778 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e013      	b.n	8004eac <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fc fc78 	bl	8001778 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d90a      	bls.n	8004eac <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 020c 	and.w	r2, r3, #12
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d001      	beq.n	8004eac <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e063      	b.n	8004f74 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eac:	4b34      	ldr	r3, [pc, #208]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 020c 	and.w	r2, r3, #12
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d1e2      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eca:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	492a      	ldr	r1, [pc, #168]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ee4:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eee:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <HAL_RCC_ClockConfig+0x23c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d210      	bcs.n	8004f20 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <HAL_RCC_ClockConfig+0x23c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 020f 	bic.w	r2, r3, #15
 8004f06:	491d      	ldr	r1, [pc, #116]	; (8004f7c <HAL_RCC_ClockConfig+0x23c>)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <HAL_RCC_ClockConfig+0x23c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e029      	b.n	8004f74 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f2c:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4911      	ldr	r1, [pc, #68]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4909      	ldr	r1, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x240>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f5e:	f000 f8b5 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8004f62:	4603      	mov	r3, r0
 8004f64:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <HAL_RCC_ClockConfig+0x248>)
 8004f66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f68:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <HAL_RCC_ClockConfig+0x24c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fb ffb3 	bl	8000ed8 <HAL_InitTick>
 8004f72:	4603      	mov	r3, r0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40022000 	.word	0x40022000
 8004f80:	40021000 	.word	0x40021000
 8004f84:	04c4b400 	.word	0x04c4b400
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	20000004 	.word	0x20000004

08004f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	; 0x24
 8004f94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9e:	4b47      	ldr	r3, [pc, #284]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa8:	4b44      	ldr	r3, [pc, #272]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d121      	bne.n	8005002 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d11e      	bne.n	8005002 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fd0:	4b3a      	ldr	r3, [pc, #232]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	e005      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fe0:	4b36      	ldr	r3, [pc, #216]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	091b      	lsrs	r3, r3, #4
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004fec:	4a34      	ldr	r2, [pc, #208]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x130>)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10d      	bne.n	8005018 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b04      	cmp	r3, #4
 8005006:	d102      	bne.n	800500e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005008:	4b2e      	ldr	r3, [pc, #184]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x134>)
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	e004      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d101      	bne.n	8005018 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005014:	4b2c      	ldr	r3, [pc, #176]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005016:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d146      	bne.n	80050ac <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800501e:	4b27      	ldr	r3, [pc, #156]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005028:	4b24      	ldr	r3, [pc, #144]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	3301      	adds	r3, #1
 8005034:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d003      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0xb4>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b03      	cmp	r3, #3
 8005040:	d00d      	beq.n	800505e <HAL_RCC_GetSysClockFreq+0xce>
 8005042:	e019      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005044:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 800504e:	68d2      	ldr	r2, [r2, #12]
 8005050:	0a12      	lsrs	r2, r2, #8
 8005052:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	617b      	str	r3, [r7, #20]
        break;
 800505c:	e019      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800505e:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8005068:	68d2      	ldr	r2, [r2, #12]
 800506a:	0a12      	lsrs	r2, r2, #8
 800506c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	617b      	str	r3, [r7, #20]
        break;
 8005076:	e00c      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8005082:	68d2      	ldr	r2, [r2, #12]
 8005084:	0a12      	lsrs	r2, r2, #8
 8005086:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	617b      	str	r3, [r7, #20]
        break;
 8005090:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	0e5b      	lsrs	r3, r3, #25
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	3301      	adds	r3, #1
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050ac:	69bb      	ldr	r3, [r7, #24]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3724      	adds	r7, #36	; 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	0800aa94 	.word	0x0800aa94
 80050c4:	00f42400 	.word	0x00f42400
 80050c8:	007a1200 	.word	0x007a1200

080050cc <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80050d0:	f7ff ff5e 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 80050d4:	4602      	mov	r2, r0
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_GetHCLKFreq+0x20>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	4903      	ldr	r1, [pc, #12]	; (80050f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80050e2:	5ccb      	ldrb	r3, [r1, r3]
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40021000 	.word	0x40021000
 80050f0:	0800aa7c 	.word	0x0800aa7c

080050f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050f8:	f7ff ffe8 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 80050fc:	4602      	mov	r2, r0
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	4903      	ldr	r1, [pc, #12]	; (8005118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800510a:	5ccb      	ldrb	r3, [r1, r3]
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40021000 	.word	0x40021000
 8005118:	0800aa8c 	.word	0x0800aa8c

0800511c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005120:	f7ff ffd4 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8005124:	4602      	mov	r2, r0
 8005126:	4b05      	ldr	r3, [pc, #20]	; (800513c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	0adb      	lsrs	r3, r3, #11
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	4903      	ldr	r1, [pc, #12]	; (8005140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005132:	5ccb      	ldrb	r3, [r1, r3]
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005138:	4618      	mov	r0, r3
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	0800aa8c 	.word	0x0800aa8c

08005144 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	220f      	movs	r2, #15
 8005152:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0203 	and.w	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <HAL_RCC_GetClockConfig+0x5c>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_RCC_GetClockConfig+0x5c>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	08db      	lsrs	r3, r3, #3
 800517e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005186:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <HAL_RCC_GetClockConfig+0x60>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 020f 	and.w	r2, r3, #15
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	601a      	str	r2, [r3, #0]
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40022000 	.word	0x40022000

080051a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051b4:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051c0:	f7ff f83e 	bl	8004240 <HAL_PWREx_GetVoltageRange>
 80051c4:	6138      	str	r0, [r7, #16]
 80051c6:	e014      	b.n	80051f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051cc:	4a26      	ldr	r2, [pc, #152]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d2:	6593      	str	r3, [r2, #88]	; 0x58
 80051d4:	4b24      	ldr	r3, [pc, #144]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051e0:	f7ff f82e 	bl	8004240 <HAL_PWREx_GetVoltageRange>
 80051e4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051e6:	4b20      	ldr	r3, [pc, #128]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80051ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fe:	d10b      	bne.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b80      	cmp	r3, #128	; 0x80
 8005204:	d919      	bls.n	800523a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2ba0      	cmp	r3, #160	; 0xa0
 800520a:	d902      	bls.n	8005212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800520c:	2302      	movs	r3, #2
 800520e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005210:	e013      	b.n	800523a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005212:	2301      	movs	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005216:	e010      	b.n	800523a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b80      	cmp	r3, #128	; 0x80
 800521c:	d902      	bls.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800521e:	2303      	movs	r3, #3
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e00a      	b.n	800523a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d102      	bne.n	8005230 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800522a:	2302      	movs	r3, #2
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e004      	b.n	800523a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b70      	cmp	r3, #112	; 0x70
 8005234:	d101      	bne.n	800523a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005236:	2301      	movs	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f023 020f 	bic.w	r2, r3, #15
 8005242:	490a      	ldr	r1, [pc, #40]	; (800526c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40021000 	.word	0x40021000
 800526c:	40022000 	.word	0x40022000

08005270 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800527a:	4b36      	ldr	r3, [pc, #216]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d118      	bne.n	80052b8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005286:	4b33      	ldr	r3, [pc, #204]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d107      	bne.n	80052a2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005292:	4b30      	ldr	r3, [pc, #192]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e005      	b.n	80052ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052a2:	4b2c      	ldr	r3, [pc, #176]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	091b      	lsrs	r3, r3, #4
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80052ae:	4a2a      	ldr	r2, [pc, #168]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052b8:	4b26      	ldr	r3, [pc, #152]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	3301      	adds	r3, #1
 80052ce:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d003      	beq.n	80052de <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d00d      	beq.n	80052f8 <RCC_GetSysClockFreqFromPLLSource+0x88>
 80052dc:	e019      	b.n	8005312 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052de:	4a1f      	ldr	r2, [pc, #124]	; (800535c <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80052e8:	68d2      	ldr	r2, [r2, #12]
 80052ea:	0a12      	lsrs	r2, r2, #8
 80052ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
 80052f4:	613b      	str	r3, [r7, #16]
      break;
 80052f6:	e019      	b.n	800532c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052f8:	4a19      	ldr	r2, [pc, #100]	; (8005360 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	4a14      	ldr	r2, [pc, #80]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005302:	68d2      	ldr	r2, [r2, #12]
 8005304:	0a12      	lsrs	r2, r2, #8
 8005306:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	613b      	str	r3, [r7, #16]
      break;
 8005310:	e00c      	b.n	800532c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800531c:	68d2      	ldr	r2, [r2, #12]
 800531e:	0a12      	lsrs	r2, r2, #8
 8005320:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	613b      	str	r3, [r7, #16]
      break;
 800532a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	0e5b      	lsrs	r3, r3, #25
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	3301      	adds	r3, #1
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005346:	683b      	ldr	r3, [r7, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40021000 	.word	0x40021000
 8005358:	0800aa94 	.word	0x0800aa94
 800535c:	00f42400 	.word	0x00f42400
 8005360:	007a1200 	.word	0x007a1200

08005364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800536c:	2300      	movs	r3, #0
 800536e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005370:	2300      	movs	r3, #0
 8005372:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537c:	2b00      	cmp	r3, #0
 800537e:	d040      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005384:	2b80      	cmp	r3, #128	; 0x80
 8005386:	d02a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d825      	bhi.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800538c:	2b60      	cmp	r3, #96	; 0x60
 800538e:	d026      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005390:	2b60      	cmp	r3, #96	; 0x60
 8005392:	d821      	bhi.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d006      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d81d      	bhi.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d010      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80053a4:	e018      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053a6:	4b8f      	ldr	r3, [pc, #572]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	4a8e      	ldr	r2, [pc, #568]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053b2:	e015      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fb56 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053c4:	e00c      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3320      	adds	r3, #32
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fc33 	bl	8005c38 <RCCEx_PLLSAI2_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80053d6:	e003      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	77fb      	strb	r3, [r7, #31]
        break;
 80053dc:	e000      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80053de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e0:	7ffb      	ldrb	r3, [r7, #31]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10b      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053e6:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ec:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f4:	497b      	ldr	r1, [pc, #492]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80053fc:	e001      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fe:	7ffb      	ldrb	r3, [r7, #31]
 8005400:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d047      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005416:	d030      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541c:	d82a      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800541e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005422:	d02a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005428:	d824      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800542a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542e:	d008      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005434:	d81e      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800543a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543e:	d010      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005440:	e018      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005442:	4b68      	ldr	r3, [pc, #416]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	4a67      	ldr	r2, [pc, #412]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800544e:	e015      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	2100      	movs	r1, #0
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fb08 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005460:	e00c      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3320      	adds	r3, #32
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fbe5 	bl	8005c38 <RCCEx_PLLSAI2_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005472:	e003      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
        break;
 8005478:	e000      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800547a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547c:	7ffb      	ldrb	r3, [r7, #31]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10b      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005482:	4b58      	ldr	r3, [pc, #352]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005484:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	4954      	ldr	r1, [pc, #336]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005498:	e001      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549a:	7ffb      	ldrb	r3, [r7, #31]
 800549c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80ab 	beq.w	8005602 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ac:	2300      	movs	r3, #0
 80054ae:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b0:	4b4c      	ldr	r3, [pc, #304]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10d      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054bc:	4b49      	ldr	r3, [pc, #292]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c0:	4a48      	ldr	r2, [pc, #288]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c6:	6593      	str	r3, [r2, #88]	; 0x58
 80054c8:	4b46      	ldr	r3, [pc, #280]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054d4:	2301      	movs	r3, #1
 80054d6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054d8:	4b43      	ldr	r3, [pc, #268]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a42      	ldr	r2, [pc, #264]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054e4:	f7fc f948 	bl	8001778 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ea:	e00f      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ec:	f7fc f944 	bl	8001778 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d908      	bls.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054fa:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800550a:	e006      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800550c:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0e9      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005518:	e000      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800551a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800551c:	7ffb      	ldrb	r3, [r7, #31]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d164      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005522:	4b30      	ldr	r3, [pc, #192]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01f      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d019      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005540:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	4a24      	ldr	r2, [pc, #144]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800555c:	4b21      	ldr	r3, [pc, #132]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	4a20      	ldr	r2, [pc, #128]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800556c:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01f      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fc f8fb 	bl	8001778 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005584:	e012      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005586:	f7fc f8f7 	bl	8001778 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f241 3288 	movw	r2, #5000	; 0x1388
 8005594:	4293      	cmp	r3, r2
 8005596:	d909      	bls.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005598:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80055aa:	e007      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0e5      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80055ba:	e000      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80055bc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80055be:	7ffb      	ldrb	r3, [r7, #31]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10c      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c4:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d4:	4903      	ldr	r1, [pc, #12]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055dc:	e008      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055de:	7ffb      	ldrb	r3, [r7, #31]
 80055e0:	77bb      	strb	r3, [r7, #30]
 80055e2:	e005      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ec:	7ffb      	ldrb	r3, [r7, #31]
 80055ee:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d105      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f6:	4baf      	ldr	r3, [pc, #700]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	4aae      	ldr	r2, [pc, #696]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80055fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005600:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800560e:	4ba9      	ldr	r3, [pc, #676]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f023 0203 	bic.w	r2, r3, #3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	49a5      	ldr	r1, [pc, #660]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005630:	4ba0      	ldr	r3, [pc, #640]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005636:	f023 020c 	bic.w	r2, r3, #12
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	499d      	ldr	r1, [pc, #628]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005652:	4b98      	ldr	r3, [pc, #608]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	4994      	ldr	r1, [pc, #592]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005674:	4b8f      	ldr	r3, [pc, #572]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	498c      	ldr	r1, [pc, #560]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005696:	4b87      	ldr	r3, [pc, #540]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a4:	4983      	ldr	r1, [pc, #524]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056b8:	4b7e      	ldr	r3, [pc, #504]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c6:	497b      	ldr	r1, [pc, #492]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056da:	4b76      	ldr	r3, [pc, #472]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e8:	4972      	ldr	r1, [pc, #456]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056fc:	4b6d      	ldr	r3, [pc, #436]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	496a      	ldr	r1, [pc, #424]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800571e:	4b65      	ldr	r3, [pc, #404]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572c:	4961      	ldr	r1, [pc, #388]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d031      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005748:	d00e      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800574a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800574e:	d814      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d015      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005758:	d10f      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575a:	4b56      	ldr	r3, [pc, #344]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	4a55      	ldr	r2, [pc, #340]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005764:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005766:	e00c      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f97c 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	77fb      	strb	r3, [r7, #31]
        break;
 800577e:	e000      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005782:	7ffb      	ldrb	r3, [r7, #31]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10b      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005788:	4b4a      	ldr	r3, [pc, #296]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005796:	4947      	ldr	r1, [pc, #284]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800579e:	e001      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	7ffb      	ldrb	r3, [r7, #31]
 80057a2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057b0:	4b40      	ldr	r3, [pc, #256]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057be:	493d      	ldr	r1, [pc, #244]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057d2:	4b38      	ldr	r3, [pc, #224]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e0:	4934      	ldr	r1, [pc, #208]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057f4:	4b2f      	ldr	r3, [pc, #188]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	492c      	ldr	r1, [pc, #176]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005816:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800581c:	f023 0203 	bic.w	r2, r3, #3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	4923      	ldr	r1, [pc, #140]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d028      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005838:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005846:	491b      	ldr	r1, [pc, #108]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005856:	d106      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005858:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800585e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005862:	60d3      	str	r3, [r2, #12]
 8005864:	e011      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800586e:	d10c      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	2101      	movs	r1, #1
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f8f8 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 800587c:	4603      	mov	r3, r0
 800587e:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005880:	7ffb      	ldrb	r3, [r7, #31]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 8005886:	7ffb      	ldrb	r3, [r7, #31]
 8005888:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d04d      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800589e:	d10b      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058a6:	4a03      	ldr	r2, [pc, #12]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80058b0:	e015      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000
 80058b8:	4b6b      	ldr	r3, [pc, #428]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c6:	4968      	ldr	r1, [pc, #416]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058ce:	4b66      	ldr	r3, [pc, #408]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058d4:	4a64      	ldr	r2, [pc, #400]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058e6:	d10d      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	2101      	movs	r1, #1
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f8bc 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80058f8:	7ffb      	ldrb	r3, [r7, #31]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d019      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80058fe:	7ffb      	ldrb	r3, [r7, #31]
 8005900:	77bb      	strb	r3, [r7, #30]
 8005902:	e016      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800590c:	d106      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590e:	4b56      	ldr	r3, [pc, #344]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	4a55      	ldr	r2, [pc, #340]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005918:	60d3      	str	r3, [r2, #12]
 800591a:	e00a      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005924:	d105      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005926:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	4a4f      	ldr	r2, [pc, #316]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d028      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800593e:	4b4a      	ldr	r3, [pc, #296]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594c:	4946      	ldr	r1, [pc, #280]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800595c:	d106      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800595e:	4b42      	ldr	r3, [pc, #264]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	4a41      	ldr	r2, [pc, #260]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005968:	60d3      	str	r3, [r2, #12]
 800596a:	e011      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005974:	d10c      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3304      	adds	r3, #4
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f000 f875 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005986:	7ffb      	ldrb	r3, [r7, #31]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800598c:	7ffb      	ldrb	r3, [r7, #31]
 800598e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01e      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800599c:	4b32      	ldr	r3, [pc, #200]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ac:	492e      	ldr	r1, [pc, #184]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059be:	d10c      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	2102      	movs	r1, #2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f850 	bl	8005a6c <RCCEx_PLLSAI1_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80059d0:	7ffb      	ldrb	r3, [r7, #31]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80059d6:	7ffb      	ldrb	r3, [r7, #31]
 80059d8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059e6:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ec:	f023 0204 	bic.w	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f6:	491c      	ldr	r1, [pc, #112]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a0a:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a10:	f023 0218 	bic.w	r2, r3, #24
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1a:	4913      	ldr	r1, [pc, #76]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d017      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a2e:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3e:	490a      	ldr	r1, [pc, #40]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a50:	d105      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a52:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4a04      	ldr	r2, [pc, #16]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a5c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005a5e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40021000 	.word	0x40021000

08005a6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d018      	beq.n	8005ab4 <RCCEx_PLLSAI1_Config+0x48>
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d81f      	bhi.n	8005ac6 <RCCEx_PLLSAI1_Config+0x5a>
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d002      	beq.n	8005a90 <RCCEx_PLLSAI1_Config+0x24>
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d009      	beq.n	8005aa2 <RCCEx_PLLSAI1_Config+0x36>
 8005a8e:	e01a      	b.n	8005ac6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a90:	4b65      	ldr	r3, [pc, #404]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d117      	bne.n	8005acc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa0:	e014      	b.n	8005acc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005aa2:	4b61      	ldr	r3, [pc, #388]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d110      	bne.n	8005ad0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab2:	e00d      	b.n	8005ad0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005ab4:	4b5c      	ldr	r3, [pc, #368]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac4:	e006      	b.n	8005ad4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8005aca:	e004      	b.n	8005ad6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005acc:	bf00      	nop
 8005ace:	e002      	b.n	8005ad6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005ad0:	bf00      	nop
 8005ad2:	e000      	b.n	8005ad6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005ad4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f040 809f 	bne.w	8005c1c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ade:	4b52      	ldr	r3, [pc, #328]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a51      	ldr	r2, [pc, #324]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ae4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aea:	f7fb fe45 	bl	8001778 <HAL_GetTick>
 8005aee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005af0:	e00f      	b.n	8005b12 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005af2:	f7fb fe41 	bl	8001778 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d908      	bls.n	8005b12 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b00:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d009      	beq.n	8005b20 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b10:	e006      	b.n	8005b20 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b12:	4b45      	ldr	r3, [pc, #276]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e9      	bne.n	8005af2 <RCCEx_PLLSAI1_Config+0x86>
 8005b1e:	e000      	b.n	8005b22 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005b20:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d179      	bne.n	8005c1c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d116      	bne.n	8005b5c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b2e:	4b3e      	ldr	r3, [pc, #248]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	4b3e      	ldr	r3, [pc, #248]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1c0>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6892      	ldr	r2, [r2, #8]
 8005b3a:	0211      	lsls	r1, r2, #8
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68d2      	ldr	r2, [r2, #12]
 8005b40:	06d2      	lsls	r2, r2, #27
 8005b42:	4311      	orrs	r1, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6852      	ldr	r2, [r2, #4]
 8005b48:	3a01      	subs	r2, #1
 8005b4a:	0112      	lsls	r2, r2, #4
 8005b4c:	4311      	orrs	r1, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	4934      	ldr	r1, [pc, #208]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	610b      	str	r3, [r1, #16]
 8005b5a:	e033      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d118      	bne.n	8005b94 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b62:	4b31      	ldr	r3, [pc, #196]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6892      	ldr	r2, [r2, #8]
 8005b6e:	0211      	lsls	r1, r2, #8
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6912      	ldr	r2, [r2, #16]
 8005b74:	0852      	lsrs	r2, r2, #1
 8005b76:	3a01      	subs	r2, #1
 8005b78:	0552      	lsls	r2, r2, #21
 8005b7a:	4311      	orrs	r1, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6852      	ldr	r2, [r2, #4]
 8005b80:	3a01      	subs	r2, #1
 8005b82:	0112      	lsls	r2, r2, #4
 8005b84:	4311      	orrs	r1, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	4926      	ldr	r1, [pc, #152]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	610b      	str	r3, [r1, #16]
 8005b92:	e017      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b94:	4b24      	ldr	r3, [pc, #144]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <RCCEx_PLLSAI1_Config+0x1c8>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6892      	ldr	r2, [r2, #8]
 8005ba0:	0211      	lsls	r1, r2, #8
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6952      	ldr	r2, [r2, #20]
 8005ba6:	0852      	lsrs	r2, r2, #1
 8005ba8:	3a01      	subs	r2, #1
 8005baa:	0652      	lsls	r2, r2, #25
 8005bac:	4311      	orrs	r1, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6852      	ldr	r2, [r2, #4]
 8005bb2:	3a01      	subs	r2, #1
 8005bb4:	0112      	lsls	r2, r2, #4
 8005bb6:	4311      	orrs	r1, r2
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	491a      	ldr	r1, [pc, #104]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bc4:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd0:	f7fb fdd2 	bl	8001778 <HAL_GetTick>
 8005bd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bd6:	e00f      	b.n	8005bf8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bd8:	f7fb fdce 	bl	8001778 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d908      	bls.n	8005bf8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005bf6:	e006      	b.n	8005c06 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0e9      	beq.n	8005bd8 <RCCEx_PLLSAI1_Config+0x16c>
 8005c04:	e000      	b.n	8005c08 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005c06:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	4904      	ldr	r1, [pc, #16]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	07ff800c 	.word	0x07ff800c
 8005c30:	ff9f800c 	.word	0xff9f800c
 8005c34:	f9ff800c 	.word	0xf9ff800c

08005c38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d018      	beq.n	8005c80 <RCCEx_PLLSAI2_Config+0x48>
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d81f      	bhi.n	8005c92 <RCCEx_PLLSAI2_Config+0x5a>
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d002      	beq.n	8005c5c <RCCEx_PLLSAI2_Config+0x24>
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d009      	beq.n	8005c6e <RCCEx_PLLSAI2_Config+0x36>
 8005c5a:	e01a      	b.n	8005c92 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c5c:	4b4a      	ldr	r3, [pc, #296]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d117      	bne.n	8005c98 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c6c:	e014      	b.n	8005c98 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c6e:	4b46      	ldr	r3, [pc, #280]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d110      	bne.n	8005c9c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c7e:	e00d      	b.n	8005c9c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005c80:	4b41      	ldr	r3, [pc, #260]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c90:	e006      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	73fb      	strb	r3, [r7, #15]
      break;
 8005c96:	e004      	b.n	8005ca2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005c98:	bf00      	nop
 8005c9a:	e002      	b.n	8005ca2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005c9c:	bf00      	nop
 8005c9e:	e000      	b.n	8005ca2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005ca0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d169      	bne.n	8005d7c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ca8:	4b37      	ldr	r3, [pc, #220]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a36      	ldr	r2, [pc, #216]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb4:	f7fb fd60 	bl	8001778 <HAL_GetTick>
 8005cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cba:	e00f      	b.n	8005cdc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cbc:	f7fb fd5c 	bl	8001778 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d908      	bls.n	8005cdc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cca:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cda:	e006      	b.n	8005cea <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cdc:	4b2a      	ldr	r3, [pc, #168]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e9      	bne.n	8005cbc <RCCEx_PLLSAI2_Config+0x84>
 8005ce8:	e000      	b.n	8005cec <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005cea:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d144      	bne.n	8005d7c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d115      	bne.n	8005d24 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cf8:	4b23      	ldr	r3, [pc, #140]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <RCCEx_PLLSAI2_Config+0x154>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6892      	ldr	r2, [r2, #8]
 8005d04:	0211      	lsls	r1, r2, #8
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68d2      	ldr	r2, [r2, #12]
 8005d0a:	06d2      	lsls	r2, r2, #27
 8005d0c:	4311      	orrs	r1, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6852      	ldr	r2, [r2, #4]
 8005d12:	3a01      	subs	r2, #1
 8005d14:	0112      	lsls	r2, r2, #4
 8005d16:	4311      	orrs	r1, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	491a      	ldr	r1, [pc, #104]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d24:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a17      	ldr	r2, [pc, #92]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fb fd22 	bl	8001778 <HAL_GetTick>
 8005d34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d36:	e00f      	b.n	8005d58 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d38:	f7fb fd1e 	bl	8001778 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d908      	bls.n	8005d58 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005d56:	e006      	b.n	8005d66 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0e9      	beq.n	8005d38 <RCCEx_PLLSAI2_Config+0x100>
 8005d64:	e000      	b.n	8005d68 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005d66:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005d70:	695a      	ldr	r2, [r3, #20]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	4904      	ldr	r1, [pc, #16]	; (8005d88 <RCCEx_PLLSAI2_Config+0x150>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	07ff800c 	.word	0x07ff800c

08005d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e095      	b.n	8005ece <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d108      	bne.n	8005dbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005db2:	d009      	beq.n	8005dc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	61da      	str	r2, [r3, #28]
 8005dba:	e005      	b.n	8005dc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fa ffc4 	bl	8000d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e08:	d902      	bls.n	8005e10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	e002      	b.n	8005e16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e1e:	d007      	beq.n	8005e30 <HAL_SPI_Init+0xa0>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	ea42 0103 	orr.w	r1, r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	f003 0204 	and.w	r2, r3, #4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005eac:	ea42 0103 	orr.w	r1, r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	099b      	lsrs	r3, r3, #6
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10f      	bne.n	8005f1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	099b      	lsrs	r3, r3, #6
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
    return;
 8005f1a:	e0d7      	b.n	80060cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <HAL_SPI_IRQHandler+0x66>
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	09db      	lsrs	r3, r3, #7
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
    return;
 8005f3c:	e0c6      	b.n	80060cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10c      	bne.n	8005f64 <HAL_SPI_IRQHandler+0x8c>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	099b      	lsrs	r3, r3, #6
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80b4 	beq.w	80060cc <HAL_SPI_IRQHandler+0x1f4>
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80ad 	beq.w	80060cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	099b      	lsrs	r3, r3, #6
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d023      	beq.n	8005fc6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d011      	beq.n	8005fae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8e:	f043 0204 	orr.w	r2, r3, #4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	e00b      	b.n	8005fc6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	693b      	ldr	r3, [r7, #16]
        return;
 8005fc4:	e082      	b.n	80060cc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd6:	f043 0201 	orr.w	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00c      	beq.n	8006022 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600c:	f043 0208 	orr.w	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006014:	2300      	movs	r3, #0
 8006016:	60bb      	str	r3, [r7, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006026:	2b00      	cmp	r3, #0
 8006028:	d04f      	beq.n	80060ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006038:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <HAL_SPI_IRQHandler+0x17e>
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d034      	beq.n	80060c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0203 	bic.w	r2, r2, #3
 8006064:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606a:	2b00      	cmp	r3, #0
 800606c:	d011      	beq.n	8006092 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <HAL_SPI_IRQHandler+0x1fc>)
 8006074:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	4618      	mov	r0, r3
 800607c:	f7fc fe70 	bl	8002d60 <HAL_DMA_Abort_IT>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	2b00      	cmp	r3, #0
 8006098:	d016      	beq.n	80060c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	4a0d      	ldr	r2, [pc, #52]	; (80060d4 <HAL_SPI_IRQHandler+0x1fc>)
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fc fe5a 	bl	8002d60 <HAL_DMA_Abort_IT>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80060be:	e003      	b.n	80060c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f809 	bl	80060d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060c6:	e000      	b.n	80060ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80060c8:	bf00      	nop
    return;
 80060ca:	bf00      	nop
  }
}
 80060cc:	3720      	adds	r7, #32
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	080060ed 	.word	0x080060ed

080060d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff ffe5 	bl	80060d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e049      	b.n	80061bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f841 	bl	80061c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2202      	movs	r2, #2
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3304      	adds	r3, #4
 8006152:	4619      	mov	r1, r3
 8006154:	4610      	mov	r0, r2
 8006156:	f000 fc03 	bl	8006960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d001      	beq.n	80061f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e04f      	b.n	8006290 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <HAL_TIM_Base_Start_IT+0xc4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01d      	beq.n	800624e <HAL_TIM_Base_Start_IT+0x76>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	d018      	beq.n	800624e <HAL_TIM_Base_Start_IT+0x76>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <HAL_TIM_Base_Start_IT+0x76>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_TIM_Base_Start_IT+0x76>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1c      	ldr	r2, [pc, #112]	; (80062a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_TIM_Base_Start_IT+0x76>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_TIM_Base_Start_IT+0x76>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d115      	bne.n	800627a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	4b17      	ldr	r3, [pc, #92]	; (80062b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006256:	4013      	ands	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b06      	cmp	r3, #6
 800625e:	d015      	beq.n	800628c <HAL_TIM_Base_Start_IT+0xb4>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006266:	d011      	beq.n	800628c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006278:	e008      	b.n	800628c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e000      	b.n	800628e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40013400 	.word	0x40013400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	00010007 	.word	0x00010007

080062b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e049      	b.n	800635e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fb f884 	bl	80013ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f000 fb32 	bl	8006960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b086      	sub	sp, #24
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e097      	b.n	80064aa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fa ffe8 	bl	8001364 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80063aa:	f023 0307 	bic.w	r3, r3, #7
 80063ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f000 fad0 	bl	8006960 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e8:	f023 0303 	bic.w	r3, r3, #3
 80063ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	4313      	orrs	r3, r2
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006406:	f023 030c 	bic.w	r3, r3, #12
 800640a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	4313      	orrs	r3, r2
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	011a      	lsls	r2, r3, #4
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	031b      	lsls	r3, r3, #12
 8006436:	4313      	orrs	r3, r2
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006444:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800644c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	4313      	orrs	r3, r2
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d122      	bne.n	800650e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d11b      	bne.n	800650e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f06f 0202 	mvn.w	r2, #2
 80064de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fa15 	bl	8006924 <HAL_TIM_IC_CaptureCallback>
 80064fa:	e005      	b.n	8006508 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa07 	bl	8006910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa18 	bl	8006938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b04      	cmp	r3, #4
 800651a:	d122      	bne.n	8006562 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d11b      	bne.n	8006562 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f06f 0204 	mvn.w	r2, #4
 8006532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f9eb 	bl	8006924 <HAL_TIM_IC_CaptureCallback>
 800654e:	e005      	b.n	800655c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9dd 	bl	8006910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f9ee 	bl	8006938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b08      	cmp	r3, #8
 800656e:	d122      	bne.n	80065b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b08      	cmp	r3, #8
 800657c:	d11b      	bne.n	80065b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f06f 0208 	mvn.w	r2, #8
 8006586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2204      	movs	r2, #4
 800658c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f9c1 	bl	8006924 <HAL_TIM_IC_CaptureCallback>
 80065a2:	e005      	b.n	80065b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f9b3 	bl	8006910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9c4 	bl	8006938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d122      	bne.n	800660a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d11b      	bne.n	800660a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f06f 0210 	mvn.w	r2, #16
 80065da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2208      	movs	r2, #8
 80065e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f997 	bl	8006924 <HAL_TIM_IC_CaptureCallback>
 80065f6:	e005      	b.n	8006604 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f989 	bl	8006910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f99a 	bl	8006938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d10e      	bne.n	8006636 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d107      	bne.n	8006636 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f06f 0201 	mvn.w	r2, #1
 800662e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7fa fb47 	bl	8000cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006640:	2b80      	cmp	r3, #128	; 0x80
 8006642:	d10e      	bne.n	8006662 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d107      	bne.n	8006662 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800665a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fd81 	bl	8007164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006670:	d10e      	bne.n	8006690 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667c:	2b80      	cmp	r3, #128	; 0x80
 800667e:	d107      	bne.n	8006690 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fd74 	bl	8007178 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d10e      	bne.n	80066bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d107      	bne.n	80066bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f948 	bl	800694c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d10e      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d107      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0220 	mvn.w	r2, #32
 80066e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fd34 	bl	8007150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006706:	2302      	movs	r3, #2
 8006708:	e0fd      	b.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x216>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b14      	cmp	r3, #20
 8006716:	f200 80f0 	bhi.w	80068fa <HAL_TIM_PWM_ConfigChannel+0x20a>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006775 	.word	0x08006775
 8006724:	080068fb 	.word	0x080068fb
 8006728:	080068fb 	.word	0x080068fb
 800672c:	080068fb 	.word	0x080068fb
 8006730:	080067b5 	.word	0x080067b5
 8006734:	080068fb 	.word	0x080068fb
 8006738:	080068fb 	.word	0x080068fb
 800673c:	080068fb 	.word	0x080068fb
 8006740:	080067f7 	.word	0x080067f7
 8006744:	080068fb 	.word	0x080068fb
 8006748:	080068fb 	.word	0x080068fb
 800674c:	080068fb 	.word	0x080068fb
 8006750:	08006837 	.word	0x08006837
 8006754:	080068fb 	.word	0x080068fb
 8006758:	080068fb 	.word	0x080068fb
 800675c:	080068fb 	.word	0x080068fb
 8006760:	08006879 	.word	0x08006879
 8006764:	080068fb 	.word	0x080068fb
 8006768:	080068fb 	.word	0x080068fb
 800676c:	080068fb 	.word	0x080068fb
 8006770:	080068b9 	.word	0x080068b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f98a 	bl	8006a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0208 	orr.w	r2, r2, #8
 800678e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0204 	bic.w	r2, r2, #4
 800679e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6999      	ldr	r1, [r3, #24]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	619a      	str	r2, [r3, #24]
      break;
 80067b2:	e0a3      	b.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f9fa 	bl	8006bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6999      	ldr	r1, [r3, #24]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	021a      	lsls	r2, r3, #8
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	619a      	str	r2, [r3, #24]
      break;
 80067f4:	e082      	b.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fa63 	bl	8006cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0208 	orr.w	r2, r2, #8
 8006810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0204 	bic.w	r2, r2, #4
 8006820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69d9      	ldr	r1, [r3, #28]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	61da      	str	r2, [r3, #28]
      break;
 8006834:	e062      	b.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 facb 	bl	8006dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69d9      	ldr	r1, [r3, #28]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	021a      	lsls	r2, r3, #8
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	61da      	str	r2, [r3, #28]
      break;
 8006876:	e041      	b.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fb14 	bl	8006eac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0208 	orr.w	r2, r2, #8
 8006892:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0204 	bic.w	r2, r2, #4
 80068a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068b6:	e021      	b.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fb58 	bl	8006f74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	021a      	lsls	r2, r3, #8
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068f8:	e000      	b.n	80068fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80068fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop

08006910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a40      	ldr	r2, [pc, #256]	; (8006a74 <TIM_Base_SetConfig+0x114>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d013      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697e:	d00f      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a3d      	ldr	r2, [pc, #244]	; (8006a78 <TIM_Base_SetConfig+0x118>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00b      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a3c      	ldr	r2, [pc, #240]	; (8006a7c <TIM_Base_SetConfig+0x11c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d007      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a3b      	ldr	r2, [pc, #236]	; (8006a80 <TIM_Base_SetConfig+0x120>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a3a      	ldr	r2, [pc, #232]	; (8006a84 <TIM_Base_SetConfig+0x124>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d108      	bne.n	80069b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2f      	ldr	r2, [pc, #188]	; (8006a74 <TIM_Base_SetConfig+0x114>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d01f      	beq.n	80069fa <TIM_Base_SetConfig+0x9a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c0:	d01b      	beq.n	80069fa <TIM_Base_SetConfig+0x9a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a2c      	ldr	r2, [pc, #176]	; (8006a78 <TIM_Base_SetConfig+0x118>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d017      	beq.n	80069fa <TIM_Base_SetConfig+0x9a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a2b      	ldr	r2, [pc, #172]	; (8006a7c <TIM_Base_SetConfig+0x11c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <TIM_Base_SetConfig+0x9a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a2a      	ldr	r2, [pc, #168]	; (8006a80 <TIM_Base_SetConfig+0x120>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00f      	beq.n	80069fa <TIM_Base_SetConfig+0x9a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <TIM_Base_SetConfig+0x124>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00b      	beq.n	80069fa <TIM_Base_SetConfig+0x9a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a28      	ldr	r2, [pc, #160]	; (8006a88 <TIM_Base_SetConfig+0x128>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d007      	beq.n	80069fa <TIM_Base_SetConfig+0x9a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <TIM_Base_SetConfig+0x12c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <TIM_Base_SetConfig+0x9a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a26      	ldr	r2, [pc, #152]	; (8006a90 <TIM_Base_SetConfig+0x130>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d108      	bne.n	8006a0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a10      	ldr	r2, [pc, #64]	; (8006a74 <TIM_Base_SetConfig+0x114>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00f      	beq.n	8006a58 <TIM_Base_SetConfig+0xf8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <TIM_Base_SetConfig+0x124>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00b      	beq.n	8006a58 <TIM_Base_SetConfig+0xf8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a11      	ldr	r2, [pc, #68]	; (8006a88 <TIM_Base_SetConfig+0x128>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d007      	beq.n	8006a58 <TIM_Base_SetConfig+0xf8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <TIM_Base_SetConfig+0x12c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d003      	beq.n	8006a58 <TIM_Base_SetConfig+0xf8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a0f      	ldr	r2, [pc, #60]	; (8006a90 <TIM_Base_SetConfig+0x130>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d103      	bne.n	8006a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	615a      	str	r2, [r3, #20]
}
 8006a66:	bf00      	nop
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800
 8006a80:	40000c00 	.word	0x40000c00
 8006a84:	40013400 	.word	0x40013400
 8006a88:	40014000 	.word	0x40014000
 8006a8c:	40014400 	.word	0x40014400
 8006a90:	40014800 	.word	0x40014800

08006a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f023 0302 	bic.w	r3, r3, #2
 8006ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a2c      	ldr	r2, [pc, #176]	; (8006ba0 <TIM_OC1_SetConfig+0x10c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00f      	beq.n	8006b14 <TIM_OC1_SetConfig+0x80>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <TIM_OC1_SetConfig+0x110>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <TIM_OC1_SetConfig+0x80>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <TIM_OC1_SetConfig+0x114>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d007      	beq.n	8006b14 <TIM_OC1_SetConfig+0x80>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a29      	ldr	r2, [pc, #164]	; (8006bac <TIM_OC1_SetConfig+0x118>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_OC1_SetConfig+0x80>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a28      	ldr	r2, [pc, #160]	; (8006bb0 <TIM_OC1_SetConfig+0x11c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d10c      	bne.n	8006b2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f023 0308 	bic.w	r3, r3, #8
 8006b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 0304 	bic.w	r3, r3, #4
 8006b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <TIM_OC1_SetConfig+0x10c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00f      	beq.n	8006b56 <TIM_OC1_SetConfig+0xc2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a1a      	ldr	r2, [pc, #104]	; (8006ba4 <TIM_OC1_SetConfig+0x110>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00b      	beq.n	8006b56 <TIM_OC1_SetConfig+0xc2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a19      	ldr	r2, [pc, #100]	; (8006ba8 <TIM_OC1_SetConfig+0x114>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <TIM_OC1_SetConfig+0xc2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a18      	ldr	r2, [pc, #96]	; (8006bac <TIM_OC1_SetConfig+0x118>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d003      	beq.n	8006b56 <TIM_OC1_SetConfig+0xc2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <TIM_OC1_SetConfig+0x11c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d111      	bne.n	8006b7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	621a      	str	r2, [r3, #32]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40013400 	.word	0x40013400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800

08006bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0210 	bic.w	r2, r3, #16
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f023 0320 	bic.w	r3, r3, #32
 8006c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	011b      	lsls	r3, r3, #4
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a28      	ldr	r2, [pc, #160]	; (8006cb4 <TIM_OC2_SetConfig+0x100>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC2_SetConfig+0x6c>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a27      	ldr	r2, [pc, #156]	; (8006cb8 <TIM_OC2_SetConfig+0x104>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10d      	bne.n	8006c3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <TIM_OC2_SetConfig+0x100>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00f      	beq.n	8006c64 <TIM_OC2_SetConfig+0xb0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a1c      	ldr	r2, [pc, #112]	; (8006cb8 <TIM_OC2_SetConfig+0x104>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00b      	beq.n	8006c64 <TIM_OC2_SetConfig+0xb0>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a1b      	ldr	r2, [pc, #108]	; (8006cbc <TIM_OC2_SetConfig+0x108>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d007      	beq.n	8006c64 <TIM_OC2_SetConfig+0xb0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a1a      	ldr	r2, [pc, #104]	; (8006cc0 <TIM_OC2_SetConfig+0x10c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_OC2_SetConfig+0xb0>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a19      	ldr	r2, [pc, #100]	; (8006cc4 <TIM_OC2_SetConfig+0x110>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d113      	bne.n	8006c8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40013400 	.word	0x40013400
 8006cbc:	40014000 	.word	0x40014000
 8006cc0:	40014400 	.word	0x40014400
 8006cc4:	40014800 	.word	0x40014800

08006cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0303 	bic.w	r3, r3, #3
 8006d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a27      	ldr	r2, [pc, #156]	; (8006dc4 <TIM_OC3_SetConfig+0xfc>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_OC3_SetConfig+0x6a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a26      	ldr	r2, [pc, #152]	; (8006dc8 <TIM_OC3_SetConfig+0x100>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d10d      	bne.n	8006d4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a1c      	ldr	r2, [pc, #112]	; (8006dc4 <TIM_OC3_SetConfig+0xfc>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00f      	beq.n	8006d76 <TIM_OC3_SetConfig+0xae>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a1b      	ldr	r2, [pc, #108]	; (8006dc8 <TIM_OC3_SetConfig+0x100>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_OC3_SetConfig+0xae>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a1a      	ldr	r2, [pc, #104]	; (8006dcc <TIM_OC3_SetConfig+0x104>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <TIM_OC3_SetConfig+0xae>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a19      	ldr	r2, [pc, #100]	; (8006dd0 <TIM_OC3_SetConfig+0x108>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_OC3_SetConfig+0xae>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a18      	ldr	r2, [pc, #96]	; (8006dd4 <TIM_OC3_SetConfig+0x10c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d113      	bne.n	8006d9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	621a      	str	r2, [r3, #32]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	40014000 	.word	0x40014000
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	031b      	lsls	r3, r3, #12
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <TIM_OC4_SetConfig+0xc0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00f      	beq.n	8006e5c <TIM_OC4_SetConfig+0x84>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <TIM_OC4_SetConfig+0xc4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00b      	beq.n	8006e5c <TIM_OC4_SetConfig+0x84>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a16      	ldr	r2, [pc, #88]	; (8006ea0 <TIM_OC4_SetConfig+0xc8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_OC4_SetConfig+0x84>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <TIM_OC4_SetConfig+0xcc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_OC4_SetConfig+0x84>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <TIM_OC4_SetConfig+0xd0>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d109      	bne.n	8006e70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	019b      	lsls	r3, r3, #6
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40013400 	.word	0x40013400
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400
 8006ea8:	40014800 	.word	0x40014800

08006eac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ef0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	041b      	lsls	r3, r3, #16
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a17      	ldr	r2, [pc, #92]	; (8006f60 <TIM_OC5_SetConfig+0xb4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00f      	beq.n	8006f26 <TIM_OC5_SetConfig+0x7a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a16      	ldr	r2, [pc, #88]	; (8006f64 <TIM_OC5_SetConfig+0xb8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00b      	beq.n	8006f26 <TIM_OC5_SetConfig+0x7a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <TIM_OC5_SetConfig+0xbc>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d007      	beq.n	8006f26 <TIM_OC5_SetConfig+0x7a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a14      	ldr	r2, [pc, #80]	; (8006f6c <TIM_OC5_SetConfig+0xc0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d003      	beq.n	8006f26 <TIM_OC5_SetConfig+0x7a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <TIM_OC5_SetConfig+0xc4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d109      	bne.n	8006f3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	621a      	str	r2, [r3, #32]
}
 8006f54:	bf00      	nop
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40013400 	.word	0x40013400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40014400 	.word	0x40014400
 8006f70:	40014800 	.word	0x40014800

08006f74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	051b      	lsls	r3, r3, #20
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a18      	ldr	r2, [pc, #96]	; (800702c <TIM_OC6_SetConfig+0xb8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00f      	beq.n	8006ff0 <TIM_OC6_SetConfig+0x7c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	; (8007030 <TIM_OC6_SetConfig+0xbc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00b      	beq.n	8006ff0 <TIM_OC6_SetConfig+0x7c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a16      	ldr	r2, [pc, #88]	; (8007034 <TIM_OC6_SetConfig+0xc0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d007      	beq.n	8006ff0 <TIM_OC6_SetConfig+0x7c>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a15      	ldr	r2, [pc, #84]	; (8007038 <TIM_OC6_SetConfig+0xc4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_OC6_SetConfig+0x7c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a14      	ldr	r2, [pc, #80]	; (800703c <TIM_OC6_SetConfig+0xc8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d109      	bne.n	8007004 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	029b      	lsls	r3, r3, #10
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	621a      	str	r2, [r3, #32]
}
 800701e:	bf00      	nop
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	40012c00 	.word	0x40012c00
 8007030:	40013400 	.word	0x40013400
 8007034:	40014000 	.word	0x40014000
 8007038:	40014400 	.word	0x40014400
 800703c:	40014800 	.word	0x40014800

08007040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007054:	2302      	movs	r3, #2
 8007056:	e068      	b.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a2e      	ldr	r2, [pc, #184]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d004      	beq.n	800708c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a2d      	ldr	r2, [pc, #180]	; (800713c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d108      	bne.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007092:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d01d      	beq.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ca:	d018      	beq.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1b      	ldr	r2, [pc, #108]	; (8007140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1a      	ldr	r2, [pc, #104]	; (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00e      	beq.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a18      	ldr	r2, [pc, #96]	; (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d009      	beq.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a13      	ldr	r2, [pc, #76]	; (800713c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a14      	ldr	r2, [pc, #80]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d10c      	bne.n	8007118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	4313      	orrs	r3, r2
 800710e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40013400 	.word	0x40013400
 8007140:	40000400 	.word	0x40000400
 8007144:	40000800 	.word	0x40000800
 8007148:	40000c00 	.word	0x40000c00
 800714c:	40014000 	.word	0x40014000

08007150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e042      	b.n	8007224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fa f9ef 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2224      	movs	r2, #36	; 0x24
 80071ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0201 	bic.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa76 	bl	80076c0 <UART_SetConfig>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e022      	b.n	8007224 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fd38 	bl	8007c5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800720a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fdbf 	bl	8007da0 <UART_CheckIdleState>
 8007222:	4603      	mov	r3, r0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007252:	4013      	ands	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d118      	bne.n	800728e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d013      	beq.n	800728e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d104      	bne.n	800727a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d009      	beq.n	800728e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 81fb 	beq.w	800767a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
      }
      return;
 800728c:	e1f5      	b.n	800767a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80ef 	beq.w	8007474 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4b73      	ldr	r3, [pc, #460]	; (8007468 <HAL_UART_IRQHandler+0x23c>)
 800729a:	4013      	ands	r3, r2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d105      	bne.n	80072ac <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	4b72      	ldr	r3, [pc, #456]	; (800746c <HAL_UART_IRQHandler+0x240>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 80e4 	beq.w	8007474 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d010      	beq.n	80072d8 <HAL_UART_IRQHandler+0xac>
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2201      	movs	r2, #1
 80072c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ce:	f043 0201 	orr.w	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d010      	beq.n	8007304 <HAL_UART_IRQHandler+0xd8>
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00b      	beq.n	8007304 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2202      	movs	r2, #2
 80072f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072fa:	f043 0204 	orr.w	r2, r3, #4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d010      	beq.n	8007330 <HAL_UART_IRQHandler+0x104>
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2204      	movs	r2, #4
 800731e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007326:	f043 0202 	orr.w	r2, r3, #2
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	f003 0308 	and.w	r3, r3, #8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d015      	beq.n	8007366 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b00      	cmp	r3, #0
 8007342:	d104      	bne.n	800734e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4b48      	ldr	r3, [pc, #288]	; (8007468 <HAL_UART_IRQHandler+0x23c>)
 8007348:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2208      	movs	r2, #8
 8007354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800735c:	f043 0208 	orr.w	r2, r3, #8
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736c:	2b00      	cmp	r3, #0
 800736e:	d011      	beq.n	8007394 <HAL_UART_IRQHandler+0x168>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00c      	beq.n	8007394 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800738a:	f043 0220 	orr.w	r2, r3, #32
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 816f 	beq.w	800767e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d011      	beq.n	80073ce <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d007      	beq.n	80073ce <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d004      	beq.n	80073ee <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d031      	beq.n	8007452 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fda1 	bl	8007f36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d123      	bne.n	800744a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007410:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d013      	beq.n	8007442 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741e:	4a14      	ldr	r2, [pc, #80]	; (8007470 <HAL_UART_IRQHandler+0x244>)
 8007420:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007426:	4618      	mov	r0, r3
 8007428:	f7fb fc9a 	bl	8002d60 <HAL_DMA_Abort_IT>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d017      	beq.n	8007462 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007440:	e00f      	b.n	8007462 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f926 	bl	8007694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007448:	e00b      	b.n	8007462 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f922 	bl	8007694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007450:	e007      	b.n	8007462 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f91e 	bl	8007694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007460:	e10d      	b.n	800767e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007462:	bf00      	nop
    return;
 8007464:	e10b      	b.n	800767e <HAL_UART_IRQHandler+0x452>
 8007466:	bf00      	nop
 8007468:	10000001 	.word	0x10000001
 800746c:	04000120 	.word	0x04000120
 8007470:	08007f9b 	.word	0x08007f9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007478:	2b01      	cmp	r3, #1
 800747a:	f040 80ab 	bne.w	80075d4 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80a5 	beq.w	80075d4 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	f003 0310 	and.w	r3, r3, #16
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 809f 	beq.w	80075d4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2210      	movs	r2, #16
 800749c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d155      	bne.n	8007558 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80074b6:	893b      	ldrh	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80e2 	beq.w	8007682 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074c4:	893a      	ldrh	r2, [r7, #8]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	f080 80db 	bcs.w	8007682 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	893a      	ldrh	r2, [r7, #8]
 80074d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d12b      	bne.n	800753c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689a      	ldr	r2, [r3, #8]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007512:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0210 	bic.w	r2, r2, #16
 8007530:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007536:	4618      	mov	r0, r3
 8007538:	f7fb fbb6 	bl	8002ca8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007548:	b29b      	uxth	r3, r3
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	b29b      	uxth	r3, r3
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f8a9 	bl	80076a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007556:	e094      	b.n	8007682 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007564:	b29b      	uxth	r3, r3
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007570:	b29b      	uxth	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8087 	beq.w	8007686 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8007578:	897b      	ldrh	r3, [r7, #10]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8083 	beq.w	8007686 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800758e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6812      	ldr	r2, [r2, #0]
 800759a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0210 	bic.w	r2, r2, #16
 80075c6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075c8:	897b      	ldrh	r3, [r7, #10]
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f86b 	bl	80076a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80075d2:	e058      	b.n	8007686 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <HAL_UART_IRQHandler+0x3ce>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fd01 	bl	8007ffa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075f8:	e048      	b.n	800768c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007600:	2b00      	cmp	r3, #0
 8007602:	d012      	beq.n	800762a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760a:	2b00      	cmp	r3, #0
 800760c:	d104      	bne.n	8007618 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800761c:	2b00      	cmp	r3, #0
 800761e:	d034      	beq.n	800768a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
    }
    return;
 8007628:	e02f      	b.n	800768a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <HAL_UART_IRQHandler+0x41a>
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fcc1 	bl	8007fc6 <UART_EndTransmit_IT>
    return;
 8007644:	e022      	b.n	800768c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d008      	beq.n	8007662 <HAL_UART_IRQHandler+0x436>
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fce1 	bl	8008022 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007660:	e014      	b.n	800768c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00f      	beq.n	800768c <HAL_UART_IRQHandler+0x460>
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	2b00      	cmp	r3, #0
 8007670:	da0c      	bge.n	800768c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fccb 	bl	800800e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007678:	e008      	b.n	800768c <HAL_UART_IRQHandler+0x460>
      return;
 800767a:	bf00      	nop
 800767c:	e006      	b.n	800768c <HAL_UART_IRQHandler+0x460>
    return;
 800767e:	bf00      	nop
 8007680:	e004      	b.n	800768c <HAL_UART_IRQHandler+0x460>
      return;
 8007682:	bf00      	nop
 8007684:	e002      	b.n	800768c <HAL_UART_IRQHandler+0x460>
      return;
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <HAL_UART_IRQHandler+0x460>
    return;
 800768a:	bf00      	nop
  }
}
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop

08007694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076c0:	b5b0      	push	{r4, r5, r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	4bb1      	ldr	r3, [pc, #708]	; (80079b0 <UART_SetConfig+0x2f0>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	69f9      	ldr	r1, [r7, #28]
 80076f4:	430b      	orrs	r3, r1
 80076f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4aa6      	ldr	r2, [pc, #664]	; (80079b4 <UART_SetConfig+0x2f4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d004      	beq.n	8007728 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	4313      	orrs	r3, r2
 8007726:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007732:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	69f9      	ldr	r1, [r7, #28]
 800773c:	430b      	orrs	r3, r1
 800773e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	f023 010f 	bic.w	r1, r3, #15
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a97      	ldr	r2, [pc, #604]	; (80079b8 <UART_SetConfig+0x2f8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d120      	bne.n	80077a2 <UART_SetConfig+0xe2>
 8007760:	4b96      	ldr	r3, [pc, #600]	; (80079bc <UART_SetConfig+0x2fc>)
 8007762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	2b03      	cmp	r3, #3
 800776c:	d816      	bhi.n	800779c <UART_SetConfig+0xdc>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <UART_SetConfig+0xb4>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007785 	.word	0x08007785
 8007778:	08007791 	.word	0x08007791
 800777c:	0800778b 	.word	0x0800778b
 8007780:	08007797 	.word	0x08007797
 8007784:	2301      	movs	r3, #1
 8007786:	76fb      	strb	r3, [r7, #27]
 8007788:	e0e7      	b.n	800795a <UART_SetConfig+0x29a>
 800778a:	2302      	movs	r3, #2
 800778c:	76fb      	strb	r3, [r7, #27]
 800778e:	e0e4      	b.n	800795a <UART_SetConfig+0x29a>
 8007790:	2304      	movs	r3, #4
 8007792:	76fb      	strb	r3, [r7, #27]
 8007794:	e0e1      	b.n	800795a <UART_SetConfig+0x29a>
 8007796:	2308      	movs	r3, #8
 8007798:	76fb      	strb	r3, [r7, #27]
 800779a:	e0de      	b.n	800795a <UART_SetConfig+0x29a>
 800779c:	2310      	movs	r3, #16
 800779e:	76fb      	strb	r3, [r7, #27]
 80077a0:	e0db      	b.n	800795a <UART_SetConfig+0x29a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a86      	ldr	r2, [pc, #536]	; (80079c0 <UART_SetConfig+0x300>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d132      	bne.n	8007812 <UART_SetConfig+0x152>
 80077ac:	4b83      	ldr	r3, [pc, #524]	; (80079bc <UART_SetConfig+0x2fc>)
 80077ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b2:	f003 030c 	and.w	r3, r3, #12
 80077b6:	2b0c      	cmp	r3, #12
 80077b8:	d828      	bhi.n	800780c <UART_SetConfig+0x14c>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <UART_SetConfig+0x100>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077f5 	.word	0x080077f5
 80077c4:	0800780d 	.word	0x0800780d
 80077c8:	0800780d 	.word	0x0800780d
 80077cc:	0800780d 	.word	0x0800780d
 80077d0:	08007801 	.word	0x08007801
 80077d4:	0800780d 	.word	0x0800780d
 80077d8:	0800780d 	.word	0x0800780d
 80077dc:	0800780d 	.word	0x0800780d
 80077e0:	080077fb 	.word	0x080077fb
 80077e4:	0800780d 	.word	0x0800780d
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	0800780d 	.word	0x0800780d
 80077f0:	08007807 	.word	0x08007807
 80077f4:	2300      	movs	r3, #0
 80077f6:	76fb      	strb	r3, [r7, #27]
 80077f8:	e0af      	b.n	800795a <UART_SetConfig+0x29a>
 80077fa:	2302      	movs	r3, #2
 80077fc:	76fb      	strb	r3, [r7, #27]
 80077fe:	e0ac      	b.n	800795a <UART_SetConfig+0x29a>
 8007800:	2304      	movs	r3, #4
 8007802:	76fb      	strb	r3, [r7, #27]
 8007804:	e0a9      	b.n	800795a <UART_SetConfig+0x29a>
 8007806:	2308      	movs	r3, #8
 8007808:	76fb      	strb	r3, [r7, #27]
 800780a:	e0a6      	b.n	800795a <UART_SetConfig+0x29a>
 800780c:	2310      	movs	r3, #16
 800780e:	76fb      	strb	r3, [r7, #27]
 8007810:	e0a3      	b.n	800795a <UART_SetConfig+0x29a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a6b      	ldr	r2, [pc, #428]	; (80079c4 <UART_SetConfig+0x304>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d120      	bne.n	800785e <UART_SetConfig+0x19e>
 800781c:	4b67      	ldr	r3, [pc, #412]	; (80079bc <UART_SetConfig+0x2fc>)
 800781e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007822:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007826:	2b30      	cmp	r3, #48	; 0x30
 8007828:	d013      	beq.n	8007852 <UART_SetConfig+0x192>
 800782a:	2b30      	cmp	r3, #48	; 0x30
 800782c:	d814      	bhi.n	8007858 <UART_SetConfig+0x198>
 800782e:	2b20      	cmp	r3, #32
 8007830:	d009      	beq.n	8007846 <UART_SetConfig+0x186>
 8007832:	2b20      	cmp	r3, #32
 8007834:	d810      	bhi.n	8007858 <UART_SetConfig+0x198>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <UART_SetConfig+0x180>
 800783a:	2b10      	cmp	r3, #16
 800783c:	d006      	beq.n	800784c <UART_SetConfig+0x18c>
 800783e:	e00b      	b.n	8007858 <UART_SetConfig+0x198>
 8007840:	2300      	movs	r3, #0
 8007842:	76fb      	strb	r3, [r7, #27]
 8007844:	e089      	b.n	800795a <UART_SetConfig+0x29a>
 8007846:	2302      	movs	r3, #2
 8007848:	76fb      	strb	r3, [r7, #27]
 800784a:	e086      	b.n	800795a <UART_SetConfig+0x29a>
 800784c:	2304      	movs	r3, #4
 800784e:	76fb      	strb	r3, [r7, #27]
 8007850:	e083      	b.n	800795a <UART_SetConfig+0x29a>
 8007852:	2308      	movs	r3, #8
 8007854:	76fb      	strb	r3, [r7, #27]
 8007856:	e080      	b.n	800795a <UART_SetConfig+0x29a>
 8007858:	2310      	movs	r3, #16
 800785a:	76fb      	strb	r3, [r7, #27]
 800785c:	e07d      	b.n	800795a <UART_SetConfig+0x29a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a59      	ldr	r2, [pc, #356]	; (80079c8 <UART_SetConfig+0x308>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d120      	bne.n	80078aa <UART_SetConfig+0x1ea>
 8007868:	4b54      	ldr	r3, [pc, #336]	; (80079bc <UART_SetConfig+0x2fc>)
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007872:	2bc0      	cmp	r3, #192	; 0xc0
 8007874:	d013      	beq.n	800789e <UART_SetConfig+0x1de>
 8007876:	2bc0      	cmp	r3, #192	; 0xc0
 8007878:	d814      	bhi.n	80078a4 <UART_SetConfig+0x1e4>
 800787a:	2b80      	cmp	r3, #128	; 0x80
 800787c:	d009      	beq.n	8007892 <UART_SetConfig+0x1d2>
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d810      	bhi.n	80078a4 <UART_SetConfig+0x1e4>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <UART_SetConfig+0x1cc>
 8007886:	2b40      	cmp	r3, #64	; 0x40
 8007888:	d006      	beq.n	8007898 <UART_SetConfig+0x1d8>
 800788a:	e00b      	b.n	80078a4 <UART_SetConfig+0x1e4>
 800788c:	2300      	movs	r3, #0
 800788e:	76fb      	strb	r3, [r7, #27]
 8007890:	e063      	b.n	800795a <UART_SetConfig+0x29a>
 8007892:	2302      	movs	r3, #2
 8007894:	76fb      	strb	r3, [r7, #27]
 8007896:	e060      	b.n	800795a <UART_SetConfig+0x29a>
 8007898:	2304      	movs	r3, #4
 800789a:	76fb      	strb	r3, [r7, #27]
 800789c:	e05d      	b.n	800795a <UART_SetConfig+0x29a>
 800789e:	2308      	movs	r3, #8
 80078a0:	76fb      	strb	r3, [r7, #27]
 80078a2:	e05a      	b.n	800795a <UART_SetConfig+0x29a>
 80078a4:	2310      	movs	r3, #16
 80078a6:	76fb      	strb	r3, [r7, #27]
 80078a8:	e057      	b.n	800795a <UART_SetConfig+0x29a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a47      	ldr	r2, [pc, #284]	; (80079cc <UART_SetConfig+0x30c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d125      	bne.n	8007900 <UART_SetConfig+0x240>
 80078b4:	4b41      	ldr	r3, [pc, #260]	; (80079bc <UART_SetConfig+0x2fc>)
 80078b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078c2:	d017      	beq.n	80078f4 <UART_SetConfig+0x234>
 80078c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078c8:	d817      	bhi.n	80078fa <UART_SetConfig+0x23a>
 80078ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ce:	d00b      	beq.n	80078e8 <UART_SetConfig+0x228>
 80078d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d4:	d811      	bhi.n	80078fa <UART_SetConfig+0x23a>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <UART_SetConfig+0x222>
 80078da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078de:	d006      	beq.n	80078ee <UART_SetConfig+0x22e>
 80078e0:	e00b      	b.n	80078fa <UART_SetConfig+0x23a>
 80078e2:	2300      	movs	r3, #0
 80078e4:	76fb      	strb	r3, [r7, #27]
 80078e6:	e038      	b.n	800795a <UART_SetConfig+0x29a>
 80078e8:	2302      	movs	r3, #2
 80078ea:	76fb      	strb	r3, [r7, #27]
 80078ec:	e035      	b.n	800795a <UART_SetConfig+0x29a>
 80078ee:	2304      	movs	r3, #4
 80078f0:	76fb      	strb	r3, [r7, #27]
 80078f2:	e032      	b.n	800795a <UART_SetConfig+0x29a>
 80078f4:	2308      	movs	r3, #8
 80078f6:	76fb      	strb	r3, [r7, #27]
 80078f8:	e02f      	b.n	800795a <UART_SetConfig+0x29a>
 80078fa:	2310      	movs	r3, #16
 80078fc:	76fb      	strb	r3, [r7, #27]
 80078fe:	e02c      	b.n	800795a <UART_SetConfig+0x29a>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a2b      	ldr	r2, [pc, #172]	; (80079b4 <UART_SetConfig+0x2f4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d125      	bne.n	8007956 <UART_SetConfig+0x296>
 800790a:	4b2c      	ldr	r3, [pc, #176]	; (80079bc <UART_SetConfig+0x2fc>)
 800790c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007910:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007914:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007918:	d017      	beq.n	800794a <UART_SetConfig+0x28a>
 800791a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800791e:	d817      	bhi.n	8007950 <UART_SetConfig+0x290>
 8007920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007924:	d00b      	beq.n	800793e <UART_SetConfig+0x27e>
 8007926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800792a:	d811      	bhi.n	8007950 <UART_SetConfig+0x290>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <UART_SetConfig+0x278>
 8007930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007934:	d006      	beq.n	8007944 <UART_SetConfig+0x284>
 8007936:	e00b      	b.n	8007950 <UART_SetConfig+0x290>
 8007938:	2300      	movs	r3, #0
 800793a:	76fb      	strb	r3, [r7, #27]
 800793c:	e00d      	b.n	800795a <UART_SetConfig+0x29a>
 800793e:	2302      	movs	r3, #2
 8007940:	76fb      	strb	r3, [r7, #27]
 8007942:	e00a      	b.n	800795a <UART_SetConfig+0x29a>
 8007944:	2304      	movs	r3, #4
 8007946:	76fb      	strb	r3, [r7, #27]
 8007948:	e007      	b.n	800795a <UART_SetConfig+0x29a>
 800794a:	2308      	movs	r3, #8
 800794c:	76fb      	strb	r3, [r7, #27]
 800794e:	e004      	b.n	800795a <UART_SetConfig+0x29a>
 8007950:	2310      	movs	r3, #16
 8007952:	76fb      	strb	r3, [r7, #27]
 8007954:	e001      	b.n	800795a <UART_SetConfig+0x29a>
 8007956:	2310      	movs	r3, #16
 8007958:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <UART_SetConfig+0x2f4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	f040 80a3 	bne.w	8007aac <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007966:	7efb      	ldrb	r3, [r7, #27]
 8007968:	2b08      	cmp	r3, #8
 800796a:	d83b      	bhi.n	80079e4 <UART_SetConfig+0x324>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0x2b4>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	08007999 	.word	0x08007999
 8007978:	080079a1 	.word	0x080079a1
 800797c:	080079a9 	.word	0x080079a9
 8007980:	080079e5 	.word	0x080079e5
 8007984:	080079d5 	.word	0x080079d5
 8007988:	080079e5 	.word	0x080079e5
 800798c:	080079e5 	.word	0x080079e5
 8007990:	080079e5 	.word	0x080079e5
 8007994:	080079dd 	.word	0x080079dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007998:	f7fd fbac 	bl	80050f4 <HAL_RCC_GetPCLK1Freq>
 800799c:	6178      	str	r0, [r7, #20]
        break;
 800799e:	e026      	b.n	80079ee <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079a0:	f7fd fbbc 	bl	800511c <HAL_RCC_GetPCLK2Freq>
 80079a4:	6178      	str	r0, [r7, #20]
        break;
 80079a6:	e022      	b.n	80079ee <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079a8:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <UART_SetConfig+0x310>)
 80079aa:	617b      	str	r3, [r7, #20]
        break;
 80079ac:	e01f      	b.n	80079ee <UART_SetConfig+0x32e>
 80079ae:	bf00      	nop
 80079b0:	cfff69f3 	.word	0xcfff69f3
 80079b4:	40008000 	.word	0x40008000
 80079b8:	40013800 	.word	0x40013800
 80079bc:	40021000 	.word	0x40021000
 80079c0:	40004400 	.word	0x40004400
 80079c4:	40004800 	.word	0x40004800
 80079c8:	40004c00 	.word	0x40004c00
 80079cc:	40005000 	.word	0x40005000
 80079d0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079d4:	f7fd fadc 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 80079d8:	6178      	str	r0, [r7, #20]
        break;
 80079da:	e008      	b.n	80079ee <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e0:	617b      	str	r3, [r7, #20]
        break;
 80079e2:	e004      	b.n	80079ee <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	76bb      	strb	r3, [r7, #26]
        break;
 80079ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 811b 	beq.w	8007c2c <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	4a96      	ldr	r2, [pc, #600]	; (8007c54 <UART_SetConfig+0x594>)
 80079fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a00:	461a      	mov	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a08:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	4413      	add	r3, r2
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d305      	bcc.n	8007a26 <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d902      	bls.n	8007a2c <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	76bb      	strb	r3, [r7, #26]
 8007a2a:	e0ff      	b.n	8007c2c <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f04f 0100 	mov.w	r1, #0
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	4a86      	ldr	r2, [pc, #536]	; (8007c54 <UART_SetConfig+0x594>)
 8007a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	f7f8 fbfc 	bl	8000240 <__aeabi_uldivmod>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4619      	mov	r1, r3
 8007a50:	f04f 0200 	mov.w	r2, #0
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	020b      	lsls	r3, r1, #8
 8007a5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a5e:	0202      	lsls	r2, r0, #8
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	6849      	ldr	r1, [r1, #4]
 8007a64:	0849      	lsrs	r1, r1, #1
 8007a66:	4608      	mov	r0, r1
 8007a68:	f04f 0100 	mov.w	r1, #0
 8007a6c:	1814      	adds	r4, r2, r0
 8007a6e:	eb43 0501 	adc.w	r5, r3, r1
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f8 fbde 	bl	8000240 <__aeabi_uldivmod>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4613      	mov	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a92:	d308      	bcc.n	8007aa6 <UART_SetConfig+0x3e6>
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a9a:	d204      	bcs.n	8007aa6 <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	60da      	str	r2, [r3, #12]
 8007aa4:	e0c2      	b.n	8007c2c <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	76bb      	strb	r3, [r7, #26]
 8007aaa:	e0bf      	b.n	8007c2c <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab4:	d165      	bne.n	8007b82 <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 8007ab6:	7efb      	ldrb	r3, [r7, #27]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d828      	bhi.n	8007b0e <UART_SetConfig+0x44e>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0x404>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	08007b0f 	.word	0x08007b0f
 8007ad4:	08007aff 	.word	0x08007aff
 8007ad8:	08007b0f 	.word	0x08007b0f
 8007adc:	08007b0f 	.word	0x08007b0f
 8007ae0:	08007b0f 	.word	0x08007b0f
 8007ae4:	08007b07 	.word	0x08007b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae8:	f7fd fb04 	bl	80050f4 <HAL_RCC_GetPCLK1Freq>
 8007aec:	6178      	str	r0, [r7, #20]
        break;
 8007aee:	e013      	b.n	8007b18 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007af0:	f7fd fb14 	bl	800511c <HAL_RCC_GetPCLK2Freq>
 8007af4:	6178      	str	r0, [r7, #20]
        break;
 8007af6:	e00f      	b.n	8007b18 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af8:	4b57      	ldr	r3, [pc, #348]	; (8007c58 <UART_SetConfig+0x598>)
 8007afa:	617b      	str	r3, [r7, #20]
        break;
 8007afc:	e00c      	b.n	8007b18 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007afe:	f7fd fa47 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 8007b02:	6178      	str	r0, [r7, #20]
        break;
 8007b04:	e008      	b.n	8007b18 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b0a:	617b      	str	r3, [r7, #20]
        break;
 8007b0c:	e004      	b.n	8007b18 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	76bb      	strb	r3, [r7, #26]
        break;
 8007b16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 8086 	beq.w	8007c2c <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	4a4b      	ldr	r2, [pc, #300]	; (8007c54 <UART_SetConfig+0x594>)
 8007b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b32:	005a      	lsls	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	441a      	add	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b0f      	cmp	r3, #15
 8007b4c:	d916      	bls.n	8007b7c <UART_SetConfig+0x4bc>
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b54:	d212      	bcs.n	8007b7c <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f023 030f 	bic.w	r3, r3, #15
 8007b5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	89fb      	ldrh	r3, [r7, #14]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	89fa      	ldrh	r2, [r7, #14]
 8007b78:	60da      	str	r2, [r3, #12]
 8007b7a:	e057      	b.n	8007c2c <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	76bb      	strb	r3, [r7, #26]
 8007b80:	e054      	b.n	8007c2c <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b82:	7efb      	ldrb	r3, [r7, #27]
 8007b84:	2b08      	cmp	r3, #8
 8007b86:	d828      	bhi.n	8007bda <UART_SetConfig+0x51a>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <UART_SetConfig+0x4d0>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007bb5 	.word	0x08007bb5
 8007b94:	08007bbd 	.word	0x08007bbd
 8007b98:	08007bc5 	.word	0x08007bc5
 8007b9c:	08007bdb 	.word	0x08007bdb
 8007ba0:	08007bcb 	.word	0x08007bcb
 8007ba4:	08007bdb 	.word	0x08007bdb
 8007ba8:	08007bdb 	.word	0x08007bdb
 8007bac:	08007bdb 	.word	0x08007bdb
 8007bb0:	08007bd3 	.word	0x08007bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bb4:	f7fd fa9e 	bl	80050f4 <HAL_RCC_GetPCLK1Freq>
 8007bb8:	6178      	str	r0, [r7, #20]
        break;
 8007bba:	e013      	b.n	8007be4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bbc:	f7fd faae 	bl	800511c <HAL_RCC_GetPCLK2Freq>
 8007bc0:	6178      	str	r0, [r7, #20]
        break;
 8007bc2:	e00f      	b.n	8007be4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc4:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <UART_SetConfig+0x598>)
 8007bc6:	617b      	str	r3, [r7, #20]
        break;
 8007bc8:	e00c      	b.n	8007be4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bca:	f7fd f9e1 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 8007bce:	6178      	str	r0, [r7, #20]
        break;
 8007bd0:	e008      	b.n	8007be4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd6:	617b      	str	r3, [r7, #20]
        break;
 8007bd8:	e004      	b.n	8007be4 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	76bb      	strb	r3, [r7, #26]
        break;
 8007be2:	bf00      	nop
    }

    if (pclk != 0U)
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d020      	beq.n	8007c2c <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	4a19      	ldr	r2, [pc, #100]	; (8007c54 <UART_SetConfig+0x594>)
 8007bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	085b      	lsrs	r3, r3, #1
 8007c02:	441a      	add	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2b0f      	cmp	r3, #15
 8007c14:	d908      	bls.n	8007c28 <UART_SetConfig+0x568>
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c1c:	d204      	bcs.n	8007c28 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	60da      	str	r2, [r3, #12]
 8007c26:	e001      	b.n	8007c2c <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007c48:	7ebb      	ldrb	r3, [r7, #26]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bdb0      	pop	{r4, r5, r7, pc}
 8007c52:	bf00      	nop
 8007c54:	0800aad4 	.word	0x0800aad4
 8007c58:	00f42400 	.word	0x00f42400

08007c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00a      	beq.n	8007c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	f003 0308 	and.w	r3, r3, #8
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00a      	beq.n	8007d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01a      	beq.n	8007d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d5a:	d10a      	bne.n	8007d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	605a      	str	r2, [r3, #4]
  }
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007db0:	f7f9 fce2 	bl	8001778 <HAL_GetTick>
 8007db4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d10e      	bne.n	8007de2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f82f 	bl	8007e36 <UART_WaitOnFlagUntilTimeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e025      	b.n	8007e2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d10e      	bne.n	8007e0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f819 	bl	8007e36 <UART_WaitOnFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e00f      	b.n	8007e2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	603b      	str	r3, [r7, #0]
 8007e42:	4613      	mov	r3, r2
 8007e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e46:	e062      	b.n	8007f0e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4e:	d05e      	beq.n	8007f0e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e50:	f7f9 fc92 	bl	8001778 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d302      	bcc.n	8007e66 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d11d      	bne.n	8007ea2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0201 	bic.w	r2, r2, #1
 8007e84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e045      	b.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d02e      	beq.n	8007f0e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ebe:	d126      	bne.n	8007f0e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ec8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ed8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0201 	bic.w	r2, r2, #1
 8007ee8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e00f      	b.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69da      	ldr	r2, [r3, #28]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4013      	ands	r3, r2
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	bf0c      	ite	eq
 8007f1e:	2301      	moveq	r3, #1
 8007f20:	2300      	movne	r3, #0
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d08d      	beq.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f4c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d107      	bne.n	8007f7a <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0210 	bic.w	r2, r2, #16
 8007f78:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7ff fb6b 	bl	8007694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fbe:	bf00      	nop
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b082      	sub	sp, #8
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fdc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7f9 f825 	bl	800103c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_UARTEx_DisableFifoMode+0x16>
 8008048:	2302      	movs	r3, #2
 800804a:	e027      	b.n	800809c <HAL_UARTEx_DisableFifoMode+0x66>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2224      	movs	r2, #36	; 0x24
 8008058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0201 	bic.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800807a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2220      	movs	r2, #32
 800808e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080bc:	2302      	movs	r3, #2
 80080be:	e02d      	b.n	800811c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2224      	movs	r2, #36	; 0x24
 80080cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0201 	bic.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f84f 	bl	80081a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2220      	movs	r2, #32
 800810e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008138:	2302      	movs	r3, #2
 800813a:	e02d      	b.n	8008198 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2224      	movs	r2, #36	; 0x24
 8008148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0201 	bic.w	r2, r2, #1
 8008162:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f811 	bl	80081a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2220      	movs	r2, #32
 800818a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d108      	bne.n	80081c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081c0:	e031      	b.n	8008226 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081c2:	2308      	movs	r3, #8
 80081c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081c6:	2308      	movs	r3, #8
 80081c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	0e5b      	lsrs	r3, r3, #25
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	0f5b      	lsrs	r3, r3, #29
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	7b3a      	ldrb	r2, [r7, #12]
 80081ee:	4911      	ldr	r1, [pc, #68]	; (8008234 <UARTEx_SetNbDataToProcess+0x94>)
 80081f0:	5c8a      	ldrb	r2, [r1, r2]
 80081f2:	fb02 f303 	mul.w	r3, r2, r3
 80081f6:	7b3a      	ldrb	r2, [r7, #12]
 80081f8:	490f      	ldr	r1, [pc, #60]	; (8008238 <UARTEx_SetNbDataToProcess+0x98>)
 80081fa:	5c8a      	ldrb	r2, [r1, r2]
 80081fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	7b7a      	ldrb	r2, [r7, #13]
 800820c:	4909      	ldr	r1, [pc, #36]	; (8008234 <UARTEx_SetNbDataToProcess+0x94>)
 800820e:	5c8a      	ldrb	r2, [r1, r2]
 8008210:	fb02 f303 	mul.w	r3, r2, r3
 8008214:	7b7a      	ldrb	r2, [r7, #13]
 8008216:	4908      	ldr	r1, [pc, #32]	; (8008238 <UARTEx_SetNbDataToProcess+0x98>)
 8008218:	5c8a      	ldrb	r2, [r1, r2]
 800821a:	fb93 f3f2 	sdiv	r3, r3, r2
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	0800aaec 	.word	0x0800aaec
 8008238:	0800aaf4 	.word	0x0800aaf4

0800823c <__NVIC_SetPriority>:
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824c:	2b00      	cmp	r3, #0
 800824e:	db0a      	blt.n	8008266 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	b2da      	uxtb	r2, r3
 8008254:	490c      	ldr	r1, [pc, #48]	; (8008288 <__NVIC_SetPriority+0x4c>)
 8008256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800825a:	0152      	lsls	r2, r2, #5
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	440b      	add	r3, r1
 8008260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008264:	e00a      	b.n	800827c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	b2da      	uxtb	r2, r3
 800826a:	4908      	ldr	r1, [pc, #32]	; (800828c <__NVIC_SetPriority+0x50>)
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	f003 030f 	and.w	r3, r3, #15
 8008272:	3b04      	subs	r3, #4
 8008274:	0152      	lsls	r2, r2, #5
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	440b      	add	r3, r1
 800827a:	761a      	strb	r2, [r3, #24]
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	e000e100 	.word	0xe000e100
 800828c:	e000ed00 	.word	0xe000ed00

08008290 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <SysTick_Handler+0x1c>)
 8008296:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008298:	f001 fbbe 	bl	8009a18 <xTaskGetSchedulerState>
 800829c:	4603      	mov	r3, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d001      	beq.n	80082a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80082a2:	f002 f82b 	bl	800a2fc <xPortSysTickHandler>
  }
}
 80082a6:	bf00      	nop
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	e000e010 	.word	0xe000e010

080082b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80082b4:	2100      	movs	r1, #0
 80082b6:	f06f 0004 	mvn.w	r0, #4
 80082ba:	f7ff ffbf 	bl	800823c <__NVIC_SetPriority>
#endif
}
 80082be:	bf00      	nop
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ca:	f3ef 8305 	mrs	r3, IPSR
 80082ce:	603b      	str	r3, [r7, #0]
  return(result);
 80082d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80082d6:	f06f 0305 	mvn.w	r3, #5
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	e00c      	b.n	80082f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082de:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <osKernelInitialize+0x44>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d105      	bne.n	80082f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082e6:	4b08      	ldr	r3, [pc, #32]	; (8008308 <osKernelInitialize+0x44>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	607b      	str	r3, [r7, #4]
 80082f0:	e002      	b.n	80082f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082f2:	f04f 33ff 	mov.w	r3, #4294967295
 80082f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082f8:	687b      	ldr	r3, [r7, #4]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000034 	.word	0x20000034

0800830c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008312:	f3ef 8305 	mrs	r3, IPSR
 8008316:	603b      	str	r3, [r7, #0]
  return(result);
 8008318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <osKernelStart+0x1a>
    stat = osErrorISR;
 800831e:	f06f 0305 	mvn.w	r3, #5
 8008322:	607b      	str	r3, [r7, #4]
 8008324:	e010      	b.n	8008348 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008326:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <osKernelStart+0x48>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d109      	bne.n	8008342 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800832e:	f7ff ffbf 	bl	80082b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <osKernelStart+0x48>)
 8008334:	2202      	movs	r2, #2
 8008336:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008338:	f000 ff72 	bl	8009220 <vTaskStartScheduler>
      stat = osOK;
 800833c:	2300      	movs	r3, #0
 800833e:	607b      	str	r3, [r7, #4]
 8008340:	e002      	b.n	8008348 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008342:	f04f 33ff 	mov.w	r3, #4294967295
 8008346:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008348:	687b      	ldr	r3, [r7, #4]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000034 	.word	0x20000034

08008358 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008358:	b580      	push	{r7, lr}
 800835a:	b08e      	sub	sp, #56	; 0x38
 800835c:	af04      	add	r7, sp, #16
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008364:	2300      	movs	r3, #0
 8008366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008368:	f3ef 8305 	mrs	r3, IPSR
 800836c:	617b      	str	r3, [r7, #20]
  return(result);
 800836e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008370:	2b00      	cmp	r3, #0
 8008372:	d17e      	bne.n	8008472 <osThreadNew+0x11a>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d07b      	beq.n	8008472 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800837a:	2380      	movs	r3, #128	; 0x80
 800837c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800837e:	2318      	movs	r3, #24
 8008380:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008382:	2300      	movs	r3, #0
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295
 800838a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d045      	beq.n	800841e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <osThreadNew+0x48>
        name = attr->name;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d008      	beq.n	80083c6 <osThreadNew+0x6e>
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	2b38      	cmp	r3, #56	; 0x38
 80083b8:	d805      	bhi.n	80083c6 <osThreadNew+0x6e>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <osThreadNew+0x72>
        return (NULL);
 80083c6:	2300      	movs	r3, #0
 80083c8:	e054      	b.n	8008474 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	089b      	lsrs	r3, r3, #2
 80083d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00e      	beq.n	8008400 <osThreadNew+0xa8>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	2b5f      	cmp	r3, #95	; 0x5f
 80083e8:	d90a      	bls.n	8008400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d006      	beq.n	8008400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <osThreadNew+0xa8>
        mem = 1;
 80083fa:	2301      	movs	r3, #1
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	e010      	b.n	8008422 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10c      	bne.n	8008422 <osThreadNew+0xca>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d108      	bne.n	8008422 <osThreadNew+0xca>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d104      	bne.n	8008422 <osThreadNew+0xca>
          mem = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	61bb      	str	r3, [r7, #24]
 800841c:	e001      	b.n	8008422 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d110      	bne.n	800844a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008430:	9202      	str	r2, [sp, #8]
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	6a3a      	ldr	r2, [r7, #32]
 800843c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fd4c 	bl	8008edc <xTaskCreateStatic>
 8008444:	4603      	mov	r3, r0
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	e013      	b.n	8008472 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d110      	bne.n	8008472 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	b29a      	uxth	r2, r3
 8008454:	f107 0310 	add.w	r3, r7, #16
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 fd7f 	bl	8008f66 <xTaskCreate>
 8008468:	4603      	mov	r3, r0
 800846a:	2b01      	cmp	r3, #1
 800846c:	d001      	beq.n	8008472 <osThreadNew+0x11a>
            hTask = NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008472:	693b      	ldr	r3, [r7, #16]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3728      	adds	r7, #40	; 0x28
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008484:	f3ef 8305 	mrs	r3, IPSR
 8008488:	60bb      	str	r3, [r7, #8]
  return(result);
 800848a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <osDelay+0x1c>
    stat = osErrorISR;
 8008490:	f06f 0305 	mvn.w	r3, #5
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	e007      	b.n	80084a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fe98 	bl	80091d8 <vTaskDelay>
    }
  }

  return (stat);
 80084a8:	68fb      	ldr	r3, [r7, #12]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a07      	ldr	r2, [pc, #28]	; (80084e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80084c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4a06      	ldr	r2, [pc, #24]	; (80084e4 <vApplicationGetIdleTaskMemory+0x30>)
 80084ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2280      	movs	r2, #128	; 0x80
 80084d0:	601a      	str	r2, [r3, #0]
}
 80084d2:	bf00      	nop
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	20000038 	.word	0x20000038
 80084e4:	20000098 	.word	0x20000098

080084e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4a07      	ldr	r2, [pc, #28]	; (8008514 <vApplicationGetTimerTaskMemory+0x2c>)
 80084f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4a06      	ldr	r2, [pc, #24]	; (8008518 <vApplicationGetTimerTaskMemory+0x30>)
 80084fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008506:	601a      	str	r2, [r3, #0]
}
 8008508:	bf00      	nop
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20000298 	.word	0x20000298
 8008518:	200002f8 	.word	0x200002f8

0800851c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f103 0208 	add.w	r2, r3, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f04f 32ff 	mov.w	r2, #4294967295
 8008534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f103 0208 	add.w	r2, r3, #8
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f103 0208 	add.w	r2, r3, #8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	601a      	str	r2, [r3, #0]
}
 80085b2:	bf00      	nop
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d103      	bne.n	80085de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e00c      	b.n	80085f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3308      	adds	r3, #8
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	e002      	b.n	80085ec <vListInsert+0x2e>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d2f6      	bcs.n	80085e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	601a      	str	r2, [r3, #0]
}
 8008624:	bf00      	nop
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6892      	ldr	r2, [r2, #8]
 8008646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6852      	ldr	r2, [r2, #4]
 8008650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d103      	bne.n	8008664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	1e5a      	subs	r2, r3, #1
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <xQueueGenericReset+0x1a>
 8008698:	f001 ff3e 	bl	800a518 <ulSetInterruptMask>
 800869c:	e7fe      	b.n	800869c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800869e:	f001 fe01 	bl	800a2a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086ae:	fb01 f303 	mul.w	r3, r1, r3
 80086b2:	441a      	add	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ce:	3b01      	subs	r3, #1
 80086d0:	68f9      	ldr	r1, [r7, #12]
 80086d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086d4:	fb01 f303 	mul.w	r3, r1, r3
 80086d8:	441a      	add	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	22ff      	movs	r2, #255	; 0xff
 80086e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	22ff      	movs	r2, #255	; 0xff
 80086ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10e      	bne.n	8008712 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d014      	beq.n	8008726 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3310      	adds	r3, #16
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fff3 	bl	80096ec <xTaskRemoveFromEventList>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00c      	beq.n	8008726 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800870c:	f001 fdb8 	bl	800a280 <vPortYield>
 8008710:	e009      	b.n	8008726 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3310      	adds	r3, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff ff00 	bl	800851c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3324      	adds	r3, #36	; 0x24
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff fefb 	bl	800851c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008726:	f001 fdcf 	bl	800a2c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800872a:	2301      	movs	r3, #1
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af02      	add	r7, sp, #8
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d102      	bne.n	800874e <xQueueGenericCreateStatic+0x1a>
 8008748:	f001 fee6 	bl	800a518 <ulSetInterruptMask>
 800874c:	e7fe      	b.n	800874c <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d102      	bne.n	800875a <xQueueGenericCreateStatic+0x26>
 8008754:	f001 fee0 	bl	800a518 <ulSetInterruptMask>
 8008758:	e7fe      	b.n	8008758 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <xQueueGenericCreateStatic+0x32>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <xQueueGenericCreateStatic+0x36>
 8008766:	2301      	movs	r3, #1
 8008768:	e000      	b.n	800876c <xQueueGenericCreateStatic+0x38>
 800876a:	2300      	movs	r3, #0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <xQueueGenericCreateStatic+0x42>
 8008770:	f001 fed2 	bl	800a518 <ulSetInterruptMask>
 8008774:	e7fe      	b.n	8008774 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <xQueueGenericCreateStatic+0x4e>
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <xQueueGenericCreateStatic+0x52>
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <xQueueGenericCreateStatic+0x54>
 8008786:	2300      	movs	r3, #0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <xQueueGenericCreateStatic+0x5e>
 800878c:	f001 fec4 	bl	800a518 <ulSetInterruptMask>
 8008790:	e7fe      	b.n	8008790 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008792:	2350      	movs	r3, #80	; 0x50
 8008794:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b50      	cmp	r3, #80	; 0x50
 800879a:	d002      	beq.n	80087a2 <xQueueGenericCreateStatic+0x6e>
 800879c:	f001 febc 	bl	800a518 <ulSetInterruptMask>
 80087a0:	e7fe      	b.n	80087a0 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087a2:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00d      	beq.n	80087ca <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	4613      	mov	r3, r2
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 f805 	bl	80087d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087ca:	697b      	ldr	r3, [r7, #20]
	}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d103      	bne.n	80087f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	e002      	b.n	80087f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008802:	2101      	movs	r1, #1
 8008804:	69b8      	ldr	r0, [r7, #24]
 8008806:	f7ff ff3d 	bl	8008684 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	78fa      	ldrb	r2, [r7, #3]
 800880e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b08a      	sub	sp, #40	; 0x28
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
 8008826:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008828:	2300      	movs	r3, #0
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d102      	bne.n	800883c <xQueueGenericSend+0x22>
 8008836:	f001 fe6f 	bl	800a518 <ulSetInterruptMask>
 800883a:	e7fe      	b.n	800883a <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d103      	bne.n	800884a <xQueueGenericSend+0x30>
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <xQueueGenericSend+0x34>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <xQueueGenericSend+0x36>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <xQueueGenericSend+0x40>
 8008854:	f001 fe60 	bl	800a518 <ulSetInterruptMask>
 8008858:	e7fe      	b.n	8008858 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b02      	cmp	r3, #2
 800885e:	d103      	bne.n	8008868 <xQueueGenericSend+0x4e>
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	2b01      	cmp	r3, #1
 8008866:	d101      	bne.n	800886c <xQueueGenericSend+0x52>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <xQueueGenericSend+0x54>
 800886c:	2300      	movs	r3, #0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d102      	bne.n	8008878 <xQueueGenericSend+0x5e>
 8008872:	f001 fe51 	bl	800a518 <ulSetInterruptMask>
 8008876:	e7fe      	b.n	8008876 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008878:	f001 f8ce 	bl	8009a18 <xTaskGetSchedulerState>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d102      	bne.n	8008888 <xQueueGenericSend+0x6e>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <xQueueGenericSend+0x72>
 8008888:	2301      	movs	r3, #1
 800888a:	e000      	b.n	800888e <xQueueGenericSend+0x74>
 800888c:	2300      	movs	r3, #0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <xQueueGenericSend+0x7e>
 8008892:	f001 fe41 	bl	800a518 <ulSetInterruptMask>
 8008896:	e7fe      	b.n	8008896 <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008898:	f001 fd04 	bl	800a2a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d302      	bcc.n	80088ae <xQueueGenericSend+0x94>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d11d      	bne.n	80088ea <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	6a38      	ldr	r0, [r7, #32]
 80088b4:	f000 f9a4 	bl	8008c00 <prvCopyDataToQueue>
 80088b8:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	3324      	adds	r3, #36	; 0x24
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 ff10 	bl	80096ec <xTaskRemoveFromEventList>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d007      	beq.n	80088e2 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088d2:	f001 fcd5 	bl	800a280 <vPortYield>
 80088d6:	e004      	b.n	80088e2 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088de:	f001 fccf 	bl	800a280 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088e2:	f001 fcf1 	bl	800a2c8 <vPortExitCritical>
				return pdPASS;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e05c      	b.n	80089a4 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d103      	bne.n	80088f8 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088f0:	f001 fcea 	bl	800a2c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088f4:	2300      	movs	r3, #0
 80088f6:	e055      	b.n	80089a4 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088fe:	f107 0314 	add.w	r3, r7, #20
 8008902:	4618      	mov	r0, r3
 8008904:	f000 ff4e 	bl	80097a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008908:	2301      	movs	r3, #1
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800890c:	f001 fcdc 	bl	800a2c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008910:	f000 fcde 	bl	80092d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008914:	f001 fcc6 	bl	800a2a4 <vPortEnterCritical>
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800891e:	b25b      	sxtb	r3, r3
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d103      	bne.n	800892e <xQueueGenericSend+0x114>
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008934:	b25b      	sxtb	r3, r3
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d103      	bne.n	8008944 <xQueueGenericSend+0x12a>
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008944:	f001 fcc0 	bl	800a2c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008948:	1d3a      	adds	r2, r7, #4
 800894a:	f107 0314 	add.w	r3, r7, #20
 800894e:	4611      	mov	r1, r2
 8008950:	4618      	mov	r0, r3
 8008952:	f000 ff3d 	bl	80097d0 <xTaskCheckForTimeOut>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d11d      	bne.n	8008998 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800895c:	6a38      	ldr	r0, [r7, #32]
 800895e:	f000 fa47 	bl	8008df0 <prvIsQueueFull>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d011      	beq.n	800898c <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	3310      	adds	r3, #16
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f000 fe7b 	bl	800966c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008976:	6a38      	ldr	r0, [r7, #32]
 8008978:	f000 f9d2 	bl	8008d20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800897c:	f000 fcb6 	bl	80092ec <xTaskResumeAll>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d188      	bne.n	8008898 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8008986:	f001 fc7b 	bl	800a280 <vPortYield>
 800898a:	e785      	b.n	8008898 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800898c:	6a38      	ldr	r0, [r7, #32]
 800898e:	f000 f9c7 	bl	8008d20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008992:	f000 fcab 	bl	80092ec <xTaskResumeAll>
 8008996:	e77f      	b.n	8008898 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008998:	6a38      	ldr	r0, [r7, #32]
 800899a:	f000 f9c1 	bl	8008d20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800899e:	f000 fca5 	bl	80092ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3728      	adds	r7, #40	; 0x28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08a      	sub	sp, #40	; 0x28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <xQueueGenericSendFromISR+0x1e>
 80089c4:	f001 fda8 	bl	800a518 <ulSetInterruptMask>
 80089c8:	e7fe      	b.n	80089c8 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <xQueueGenericSendFromISR+0x2c>
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <xQueueGenericSendFromISR+0x30>
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <xQueueGenericSendFromISR+0x32>
 80089dc:	2300      	movs	r3, #0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d102      	bne.n	80089e8 <xQueueGenericSendFromISR+0x3c>
 80089e2:	f001 fd99 	bl	800a518 <ulSetInterruptMask>
 80089e6:	e7fe      	b.n	80089e6 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d103      	bne.n	80089f6 <xQueueGenericSendFromISR+0x4a>
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <xQueueGenericSendFromISR+0x4e>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e000      	b.n	80089fc <xQueueGenericSendFromISR+0x50>
 80089fa:	2300      	movs	r3, #0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <xQueueGenericSendFromISR+0x5a>
 8008a00:	f001 fd8a 	bl	800a518 <ulSetInterruptMask>
 8008a04:	e7fe      	b.n	8008a04 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a06:	f001 fd87 	bl	800a518 <ulSetInterruptMask>
 8008a0a:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d302      	bcc.n	8008a1e <xQueueGenericSendFromISR+0x72>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d12d      	bne.n	8008a7a <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a24:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2a:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	6a38      	ldr	r0, [r7, #32]
 8008a32:	f000 f8e5 	bl	8008c00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3e:	d112      	bne.n	8008a66 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d015      	beq.n	8008a74 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	3324      	adds	r3, #36	; 0x24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fe4d 	bl	80096ec <xTaskRemoveFromEventList>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00d      	beq.n	8008a74 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	e006      	b.n	8008a74 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a66:	7efb      	ldrb	r3, [r7, #27]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	b25a      	sxtb	r2, r3
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a74:	2301      	movs	r3, #1
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8008a78:	e001      	b.n	8008a7e <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008a7e:	69f8      	ldr	r0, [r7, #28]
 8008a80:	f001 fd57 	bl	800a532 <vClearInterruptMask>

	return xReturn;
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3728      	adds	r7, #40	; 0x28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b08a      	sub	sp, #40	; 0x28
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d102      	bne.n	8008aae <xQueueReceive+0x20>
 8008aa8:	f001 fd36 	bl	800a518 <ulSetInterruptMask>
 8008aac:	e7fe      	b.n	8008aac <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d103      	bne.n	8008abc <xQueueReceive+0x2e>
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <xQueueReceive+0x32>
 8008abc:	2301      	movs	r3, #1
 8008abe:	e000      	b.n	8008ac2 <xQueueReceive+0x34>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d102      	bne.n	8008acc <xQueueReceive+0x3e>
 8008ac6:	f001 fd27 	bl	800a518 <ulSetInterruptMask>
 8008aca:	e7fe      	b.n	8008aca <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008acc:	f000 ffa4 	bl	8009a18 <xTaskGetSchedulerState>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d102      	bne.n	8008adc <xQueueReceive+0x4e>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <xQueueReceive+0x52>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e000      	b.n	8008ae2 <xQueueReceive+0x54>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <xQueueReceive+0x5e>
 8008ae6:	f001 fd17 	bl	800a518 <ulSetInterruptMask>
 8008aea:	e7fe      	b.n	8008aea <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aec:	f001 fbda 	bl	800a2a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d019      	beq.n	8008b30 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	6a38      	ldr	r0, [r7, #32]
 8008b00:	f000 f8e8 	bl	8008cd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	1e5a      	subs	r2, r3, #1
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d009      	beq.n	8008b28 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	3310      	adds	r3, #16
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fde7 	bl	80096ec <xTaskRemoveFromEventList>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b24:	f001 fbac 	bl	800a280 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b28:	f001 fbce 	bl	800a2c8 <vPortExitCritical>
				return pdPASS;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e063      	b.n	8008bf8 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d103      	bne.n	8008b3e <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b36:	f001 fbc7 	bl	800a2c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e05c      	b.n	8008bf8 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d106      	bne.n	8008b52 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b44:	f107 0314 	add.w	r3, r7, #20
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 fe2b 	bl	80097a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b52:	f001 fbb9 	bl	800a2c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b56:	f000 fbbb 	bl	80092d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b5a:	f001 fba3 	bl	800a2a4 <vPortEnterCritical>
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b64:	b25b      	sxtb	r3, r3
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	d103      	bne.n	8008b74 <xQueueReceive+0xe6>
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b7a:	b25b      	sxtb	r3, r3
 8008b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b80:	d103      	bne.n	8008b8a <xQueueReceive+0xfc>
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b8a:	f001 fb9d 	bl	800a2c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b8e:	1d3a      	adds	r2, r7, #4
 8008b90:	f107 0314 	add.w	r3, r7, #20
 8008b94:	4611      	mov	r1, r2
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fe1a 	bl	80097d0 <xTaskCheckForTimeOut>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d11d      	bne.n	8008bde <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ba2:	6a38      	ldr	r0, [r7, #32]
 8008ba4:	f000 f90e 	bl	8008dc4 <prvIsQueueEmpty>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d011      	beq.n	8008bd2 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	3324      	adds	r3, #36	; 0x24
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fd58 	bl	800966c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bbc:	6a38      	ldr	r0, [r7, #32]
 8008bbe:	f000 f8af 	bl	8008d20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bc2:	f000 fb93 	bl	80092ec <xTaskResumeAll>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d18f      	bne.n	8008aec <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8008bcc:	f001 fb58 	bl	800a280 <vPortYield>
 8008bd0:	e78c      	b.n	8008aec <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bd2:	6a38      	ldr	r0, [r7, #32]
 8008bd4:	f000 f8a4 	bl	8008d20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bd8:	f000 fb88 	bl	80092ec <xTaskResumeAll>
 8008bdc:	e786      	b.n	8008aec <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bde:	6a38      	ldr	r0, [r7, #32]
 8008be0:	f000 f89e 	bl	8008d20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008be4:	f000 fb82 	bl	80092ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008be8:	6a38      	ldr	r0, [r7, #32]
 8008bea:	f000 f8eb 	bl	8008dc4 <prvIsQueueEmpty>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f43f af7b 	beq.w	8008aec <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bf6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3728      	adds	r7, #40	; 0x28
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10d      	bne.n	8008c3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d14d      	bne.n	8008cc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 ff12 	bl	8009a54 <xTaskPriorityDisinherit>
 8008c30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	609a      	str	r2, [r3, #8]
 8008c38:	e043      	b.n	8008cc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d119      	bne.n	8008c74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6858      	ldr	r0, [r3, #4]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	461a      	mov	r2, r3
 8008c4a:	68b9      	ldr	r1, [r7, #8]
 8008c4c:	f001 feb2 	bl	800a9b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c58:	441a      	add	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d32b      	bcc.n	8008cc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	e026      	b.n	8008cc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	68d8      	ldr	r0, [r3, #12]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	f001 fe98 	bl	800a9b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	425b      	negs	r3, r3
 8008c8e:	441a      	add	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	68da      	ldr	r2, [r3, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d207      	bcs.n	8008cb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	689a      	ldr	r2, [r3, #8]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca8:	425b      	negs	r3, r3
 8008caa:	441a      	add	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d105      	bne.n	8008cc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008cca:	697b      	ldr	r3, [r7, #20]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d018      	beq.n	8008d18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	441a      	add	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68da      	ldr	r2, [r3, #12]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d303      	bcc.n	8008d08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68d9      	ldr	r1, [r3, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	461a      	mov	r2, r3
 8008d12:	6838      	ldr	r0, [r7, #0]
 8008d14:	f001 fe4e 	bl	800a9b4 <memcpy>
	}
}
 8008d18:	bf00      	nop
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d28:	f001 fabc 	bl	800a2a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d34:	e011      	b.n	8008d5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d012      	beq.n	8008d64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3324      	adds	r3, #36	; 0x24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fcd2 	bl	80096ec <xTaskRemoveFromEventList>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d4e:	f000 fd91 	bl	8009874 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	dce9      	bgt.n	8008d36 <prvUnlockQueue+0x16>
 8008d62:	e000      	b.n	8008d66 <prvUnlockQueue+0x46>
					break;
 8008d64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	22ff      	movs	r2, #255	; 0xff
 8008d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d6e:	f001 faab 	bl	800a2c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d72:	f001 fa97 	bl	800a2a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d7e:	e011      	b.n	8008da4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d012      	beq.n	8008dae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3310      	adds	r3, #16
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fcad 	bl	80096ec <xTaskRemoveFromEventList>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d98:	f000 fd6c 	bl	8009874 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dce9      	bgt.n	8008d80 <prvUnlockQueue+0x60>
 8008dac:	e000      	b.n	8008db0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	22ff      	movs	r2, #255	; 0xff
 8008db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008db8:	f001 fa86 	bl	800a2c8 <vPortExitCritical>
}
 8008dbc:	bf00      	nop
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dcc:	f001 fa6a 	bl	800a2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	e001      	b.n	8008de2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008de2:	f001 fa71 	bl	800a2c8 <vPortExitCritical>

	return xReturn;
 8008de6:	68fb      	ldr	r3, [r7, #12]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008df8:	f001 fa54 	bl	800a2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d102      	bne.n	8008e0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	e001      	b.n	8008e12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e12:	f001 fa59 	bl	800a2c8 <vPortExitCritical>

	return xReturn;
 8008e16:	68fb      	ldr	r3, [r7, #12]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	e014      	b.n	8008e5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e30:	4a0f      	ldr	r2, [pc, #60]	; (8008e70 <vQueueAddToRegistry+0x50>)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10b      	bne.n	8008e54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e3c:	490c      	ldr	r1, [pc, #48]	; (8008e70 <vQueueAddToRegistry+0x50>)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e46:	4a0a      	ldr	r2, [pc, #40]	; (8008e70 <vQueueAddToRegistry+0x50>)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	4413      	add	r3, r2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e52:	e006      	b.n	8008e62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	3301      	adds	r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b07      	cmp	r3, #7
 8008e5e:	d9e7      	bls.n	8008e30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	20003960 	.word	0x20003960

08008e74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e84:	f001 fa0e 	bl	800a2a4 <vPortEnterCritical>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e8e:	b25b      	sxtb	r3, r3
 8008e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e94:	d103      	bne.n	8008e9e <vQueueWaitForMessageRestricted+0x2a>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ea4:	b25b      	sxtb	r3, r3
 8008ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eaa:	d103      	bne.n	8008eb4 <vQueueWaitForMessageRestricted+0x40>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eb4:	f001 fa08 	bl	800a2c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d106      	bne.n	8008ece <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	3324      	adds	r3, #36	; 0x24
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fbeb 	bl	80096a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ece:	6978      	ldr	r0, [r7, #20]
 8008ed0:	f7ff ff26 	bl	8008d20 <prvUnlockQueue>
	}
 8008ed4:	bf00      	nop
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08c      	sub	sp, #48	; 0x30
 8008ee0:	af04      	add	r7, sp, #16
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <xTaskCreateStatic+0x1a>
 8008ef0:	f001 fb12 	bl	800a518 <ulSetInterruptMask>
 8008ef4:	e7fe      	b.n	8008ef4 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d102      	bne.n	8008f02 <xTaskCreateStatic+0x26>
 8008efc:	f001 fb0c 	bl	800a518 <ulSetInterruptMask>
 8008f00:	e7fe      	b.n	8008f00 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f02:	2360      	movs	r3, #96	; 0x60
 8008f04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b60      	cmp	r3, #96	; 0x60
 8008f0a:	d002      	beq.n	8008f12 <xTaskCreateStatic+0x36>
 8008f0c:	f001 fb04 	bl	800a518 <ulSetInterruptMask>
 8008f10:	e7fe      	b.n	8008f10 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f12:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d01e      	beq.n	8008f58 <xTaskCreateStatic+0x7c>
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01b      	beq.n	8008f58 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f32:	2300      	movs	r3, #0
 8008f34:	9303      	str	r3, [sp, #12]
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	9302      	str	r3, [sp, #8]
 8008f3a:	f107 0318 	add.w	r3, r7, #24
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 f850 	bl	8008ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f50:	69f8      	ldr	r0, [r7, #28]
 8008f52:	f000 f8d9 	bl	8009108 <prvAddNewTaskToReadyList>
 8008f56:	e001      	b.n	8008f5c <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
	}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b08c      	sub	sp, #48	; 0x30
 8008f6a:	af04      	add	r7, sp, #16
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f001 fb34 	bl	800a5e8 <pvPortMalloc>
 8008f80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00e      	beq.n	8008fa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f88:	2060      	movs	r0, #96	; 0x60
 8008f8a:	f001 fb2d 	bl	800a5e8 <pvPortMalloc>
 8008f8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8008f9c:	e005      	b.n	8008faa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f9e:	6978      	ldr	r0, [r7, #20]
 8008fa0:	f001 fbd6 	bl	800a750 <vPortFree>
 8008fa4:	e001      	b.n	8008faa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d017      	beq.n	8008fe0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fb8:	88fa      	ldrh	r2, [r7, #6]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9303      	str	r3, [sp, #12]
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	9302      	str	r3, [sp, #8]
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f80e 	bl	8008ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fd4:	69f8      	ldr	r0, [r7, #28]
 8008fd6:	f000 f897 	bl	8009108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	61bb      	str	r3, [r7, #24]
 8008fde:	e002      	b.n	8008fe6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
	}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	461a      	mov	r2, r3
 8009008:	21a5      	movs	r1, #165	; 0xa5
 800900a:	f001 fce0 	bl	800a9ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009018:	3b01      	subs	r3, #1
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f023 0307 	bic.w	r3, r3, #7
 8009026:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f003 0307 	and.w	r3, r3, #7
 800902e:	2b00      	cmp	r3, #0
 8009030:	d002      	beq.n	8009038 <prvInitialiseNewTask+0x48>
 8009032:	f001 fa71 	bl	800a518 <ulSetInterruptMask>
 8009036:	e7fe      	b.n	8009036 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01f      	beq.n	800907e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	e012      	b.n	800906a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	4413      	add	r3, r2
 800904a:	7819      	ldrb	r1, [r3, #0]
 800904c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	4413      	add	r3, r2
 8009052:	3334      	adds	r3, #52	; 0x34
 8009054:	460a      	mov	r2, r1
 8009056:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	4413      	add	r3, r2
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d006      	beq.n	8009072 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3301      	adds	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b0f      	cmp	r3, #15
 800906e:	d9e9      	bls.n	8009044 <prvInitialiseNewTask+0x54>
 8009070:	e000      	b.n	8009074 <prvInitialiseNewTask+0x84>
			{
				break;
 8009072:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800907c:	e003      	b.n	8009086 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	2b37      	cmp	r3, #55	; 0x37
 800908a:	d901      	bls.n	8009090 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800908c:	2337      	movs	r3, #55	; 0x37
 800908e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	6a3a      	ldr	r2, [r7, #32]
 8009094:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	6a3a      	ldr	r2, [r7, #32]
 800909a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	2200      	movs	r2, #0
 80090a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fa58 	bl	800855c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	3318      	adds	r3, #24
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7ff fa53 	bl	800855c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	2200      	movs	r2, #0
 80090d0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	2200      	movs	r2, #0
 80090d6:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	6938      	ldr	r0, [r7, #16]
 80090ea:	f001 f939 	bl	800a360 <pxPortInitialiseStack>
 80090ee:	4602      	mov	r2, r0
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009100:	bf00      	nop
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009110:	f001 f8c8 	bl	800a2a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009114:	4b2a      	ldr	r3, [pc, #168]	; (80091c0 <prvAddNewTaskToReadyList+0xb8>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3301      	adds	r3, #1
 800911a:	4a29      	ldr	r2, [pc, #164]	; (80091c0 <prvAddNewTaskToReadyList+0xb8>)
 800911c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800911e:	4b29      	ldr	r3, [pc, #164]	; (80091c4 <prvAddNewTaskToReadyList+0xbc>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009126:	4a27      	ldr	r2, [pc, #156]	; (80091c4 <prvAddNewTaskToReadyList+0xbc>)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800912c:	4b24      	ldr	r3, [pc, #144]	; (80091c0 <prvAddNewTaskToReadyList+0xb8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d110      	bne.n	8009156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009134:	f000 fbba 	bl	80098ac <prvInitialiseTaskLists>
 8009138:	e00d      	b.n	8009156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800913a:	4b23      	ldr	r3, [pc, #140]	; (80091c8 <prvAddNewTaskToReadyList+0xc0>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d109      	bne.n	8009156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009142:	4b20      	ldr	r3, [pc, #128]	; (80091c4 <prvAddNewTaskToReadyList+0xbc>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	429a      	cmp	r2, r3
 800914e:	d802      	bhi.n	8009156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009150:	4a1c      	ldr	r2, [pc, #112]	; (80091c4 <prvAddNewTaskToReadyList+0xbc>)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009156:	4b1d      	ldr	r3, [pc, #116]	; (80091cc <prvAddNewTaskToReadyList+0xc4>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3301      	adds	r3, #1
 800915c:	4a1b      	ldr	r2, [pc, #108]	; (80091cc <prvAddNewTaskToReadyList+0xc4>)
 800915e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009160:	4b1a      	ldr	r3, [pc, #104]	; (80091cc <prvAddNewTaskToReadyList+0xc4>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916c:	4b18      	ldr	r3, [pc, #96]	; (80091d0 <prvAddNewTaskToReadyList+0xc8>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d903      	bls.n	800917c <prvAddNewTaskToReadyList+0x74>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	4a15      	ldr	r2, [pc, #84]	; (80091d0 <prvAddNewTaskToReadyList+0xc8>)
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4a12      	ldr	r2, [pc, #72]	; (80091d4 <prvAddNewTaskToReadyList+0xcc>)
 800918a:	441a      	add	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	f7ff f9ef 	bl	8008576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009198:	f001 f896 	bl	800a2c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800919c:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <prvAddNewTaskToReadyList+0xc0>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d008      	beq.n	80091b6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091a4:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <prvAddNewTaskToReadyList+0xbc>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d201      	bcs.n	80091b6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091b2:	f001 f865 	bl	800a280 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b6:	bf00      	nop
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20000bcc 	.word	0x20000bcc
 80091c4:	200006f8 	.word	0x200006f8
 80091c8:	20000bd8 	.word	0x20000bd8
 80091cc:	20000be8 	.word	0x20000be8
 80091d0:	20000bd4 	.word	0x20000bd4
 80091d4:	200006fc 	.word	0x200006fc

080091d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00f      	beq.n	800920a <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091ea:	4b0c      	ldr	r3, [pc, #48]	; (800921c <vTaskDelay+0x44>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <vTaskDelay+0x20>
 80091f2:	f001 f991 	bl	800a518 <ulSetInterruptMask>
 80091f6:	e7fe      	b.n	80091f6 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 80091f8:	f000 f86a 	bl	80092d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091fc:	2100      	movs	r1, #0
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fc86 	bl	8009b10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009204:	f000 f872 	bl	80092ec <xTaskResumeAll>
 8009208:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8009210:	f001 f836 	bl	800a280 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009214:	bf00      	nop
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000bf4 	.word	0x20000bf4

08009220 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009226:	2300      	movs	r3, #0
 8009228:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800922a:	2300      	movs	r3, #0
 800922c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800922e:	463a      	mov	r2, r7
 8009230:	1d39      	adds	r1, r7, #4
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff f93c 	bl	80084b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	9202      	str	r2, [sp, #8]
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	2300      	movs	r3, #0
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	460a      	mov	r2, r1
 800924e:	491a      	ldr	r1, [pc, #104]	; (80092b8 <vTaskStartScheduler+0x98>)
 8009250:	481a      	ldr	r0, [pc, #104]	; (80092bc <vTaskStartScheduler+0x9c>)
 8009252:	f7ff fe43 	bl	8008edc <xTaskCreateStatic>
 8009256:	4603      	mov	r3, r0
 8009258:	4a19      	ldr	r2, [pc, #100]	; (80092c0 <vTaskStartScheduler+0xa0>)
 800925a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800925c:	4b18      	ldr	r3, [pc, #96]	; (80092c0 <vTaskStartScheduler+0xa0>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009264:	2301      	movs	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	e001      	b.n	800926e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d102      	bne.n	800927a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009274:	f000 fca0 	bl	8009bb8 <xTimerCreateTimerTask>
 8009278:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d110      	bne.n	80092a2 <vTaskStartScheduler+0x82>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8009280:	f001 f94a 	bl	800a518 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009284:	4b0f      	ldr	r3, [pc, #60]	; (80092c4 <vTaskStartScheduler+0xa4>)
 8009286:	f04f 32ff 	mov.w	r2, #4294967295
 800928a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800928c:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <vTaskStartScheduler+0xa8>)
 800928e:	2201      	movs	r2, #1
 8009290:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009292:	4b0e      	ldr	r3, [pc, #56]	; (80092cc <vTaskStartScheduler+0xac>)
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009298:	f7f7 fa40 	bl	800071c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800929c:	f001 f8ea 	bl	800a474 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092a0:	e006      	b.n	80092b0 <vTaskStartScheduler+0x90>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a8:	d102      	bne.n	80092b0 <vTaskStartScheduler+0x90>
 80092aa:	f001 f935 	bl	800a518 <ulSetInterruptMask>
 80092ae:	e7fe      	b.n	80092ae <vTaskStartScheduler+0x8e>
}
 80092b0:	bf00      	nop
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	0800aa1c 	.word	0x0800aa1c
 80092bc:	0800988d 	.word	0x0800988d
 80092c0:	20000bf0 	.word	0x20000bf0
 80092c4:	20000bec 	.word	0x20000bec
 80092c8:	20000bd8 	.word	0x20000bd8
 80092cc:	20000bd0 	.word	0x20000bd0

080092d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092d4:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <vTaskSuspendAll+0x18>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3301      	adds	r3, #1
 80092da:	4a03      	ldr	r2, [pc, #12]	; (80092e8 <vTaskSuspendAll+0x18>)
 80092dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092de:	bf00      	nop
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	20000bf4 	.word	0x20000bf4

080092ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092f6:	2300      	movs	r3, #0
 80092f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092fa:	4b3b      	ldr	r3, [pc, #236]	; (80093e8 <xTaskResumeAll+0xfc>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d102      	bne.n	8009308 <xTaskResumeAll+0x1c>
 8009302:	f001 f909 	bl	800a518 <ulSetInterruptMask>
 8009306:	e7fe      	b.n	8009306 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009308:	f000 ffcc 	bl	800a2a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800930c:	4b36      	ldr	r3, [pc, #216]	; (80093e8 <xTaskResumeAll+0xfc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3b01      	subs	r3, #1
 8009312:	4a35      	ldr	r2, [pc, #212]	; (80093e8 <xTaskResumeAll+0xfc>)
 8009314:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009316:	4b34      	ldr	r3, [pc, #208]	; (80093e8 <xTaskResumeAll+0xfc>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d15c      	bne.n	80093d8 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800931e:	4b33      	ldr	r3, [pc, #204]	; (80093ec <xTaskResumeAll+0x100>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d058      	beq.n	80093d8 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009326:	e02f      	b.n	8009388 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009328:	4b31      	ldr	r3, [pc, #196]	; (80093f0 <xTaskResumeAll+0x104>)
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3318      	adds	r3, #24
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff f97b 	bl	8008630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3304      	adds	r3, #4
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff f976 	bl	8008630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009348:	4b2a      	ldr	r3, [pc, #168]	; (80093f4 <xTaskResumeAll+0x108>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d903      	bls.n	8009358 <xTaskResumeAll+0x6c>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4a27      	ldr	r2, [pc, #156]	; (80093f4 <xTaskResumeAll+0x108>)
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4a24      	ldr	r2, [pc, #144]	; (80093f8 <xTaskResumeAll+0x10c>)
 8009366:	441a      	add	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3304      	adds	r3, #4
 800936c:	4619      	mov	r1, r3
 800936e:	4610      	mov	r0, r2
 8009370:	f7ff f901 	bl	8008576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009378:	4b20      	ldr	r3, [pc, #128]	; (80093fc <xTaskResumeAll+0x110>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937e:	429a      	cmp	r2, r3
 8009380:	d302      	bcc.n	8009388 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8009382:	4b1f      	ldr	r3, [pc, #124]	; (8009400 <xTaskResumeAll+0x114>)
 8009384:	2201      	movs	r2, #1
 8009386:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009388:	4b19      	ldr	r3, [pc, #100]	; (80093f0 <xTaskResumeAll+0x104>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1cb      	bne.n	8009328 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009396:	f000 fb1f 	bl	80099d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800939a:	4b1a      	ldr	r3, [pc, #104]	; (8009404 <xTaskResumeAll+0x118>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d010      	beq.n	80093c8 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093a6:	f000 f83f 	bl	8009428 <xTaskIncrementTick>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 80093b0:	4b13      	ldr	r3, [pc, #76]	; (8009400 <xTaskResumeAll+0x114>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f1      	bne.n	80093a6 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 80093c2:	4b10      	ldr	r3, [pc, #64]	; (8009404 <xTaskResumeAll+0x118>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <xTaskResumeAll+0x114>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093d0:	2301      	movs	r3, #1
 80093d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093d4:	f000 ff54 	bl	800a280 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093d8:	f000 ff76 	bl	800a2c8 <vPortExitCritical>

	return xAlreadyYielded;
 80093dc:	68bb      	ldr	r3, [r7, #8]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000bf4 	.word	0x20000bf4
 80093ec:	20000bcc 	.word	0x20000bcc
 80093f0:	20000b8c 	.word	0x20000b8c
 80093f4:	20000bd4 	.word	0x20000bd4
 80093f8:	200006fc 	.word	0x200006fc
 80093fc:	200006f8 	.word	0x200006f8
 8009400:	20000be0 	.word	0x20000be0
 8009404:	20000bdc 	.word	0x20000bdc

08009408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800940e:	4b05      	ldr	r3, [pc, #20]	; (8009424 <xTaskGetTickCount+0x1c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009414:	687b      	ldr	r3, [r7, #4]
}
 8009416:	4618      	mov	r0, r3
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20000bd0 	.word	0x20000bd0

08009428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009432:	4b4b      	ldr	r3, [pc, #300]	; (8009560 <xTaskIncrementTick+0x138>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f040 8087 	bne.w	800954a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800943c:	4b49      	ldr	r3, [pc, #292]	; (8009564 <xTaskIncrementTick+0x13c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3301      	adds	r3, #1
 8009442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009444:	4a47      	ldr	r2, [pc, #284]	; (8009564 <xTaskIncrementTick+0x13c>)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d118      	bne.n	8009482 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009450:	4b45      	ldr	r3, [pc, #276]	; (8009568 <xTaskIncrementTick+0x140>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <xTaskIncrementTick+0x38>
 800945a:	f001 f85d 	bl	800a518 <ulSetInterruptMask>
 800945e:	e7fe      	b.n	800945e <xTaskIncrementTick+0x36>
 8009460:	4b41      	ldr	r3, [pc, #260]	; (8009568 <xTaskIncrementTick+0x140>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	4b41      	ldr	r3, [pc, #260]	; (800956c <xTaskIncrementTick+0x144>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a3f      	ldr	r2, [pc, #252]	; (8009568 <xTaskIncrementTick+0x140>)
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	4a3f      	ldr	r2, [pc, #252]	; (800956c <xTaskIncrementTick+0x144>)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	4b3e      	ldr	r3, [pc, #248]	; (8009570 <xTaskIncrementTick+0x148>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3301      	adds	r3, #1
 800947a:	4a3d      	ldr	r2, [pc, #244]	; (8009570 <xTaskIncrementTick+0x148>)
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	f000 faab 	bl	80099d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009482:	4b3c      	ldr	r3, [pc, #240]	; (8009574 <xTaskIncrementTick+0x14c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	429a      	cmp	r2, r3
 800948a:	d349      	bcc.n	8009520 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800948c:	4b36      	ldr	r3, [pc, #216]	; (8009568 <xTaskIncrementTick+0x140>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d104      	bne.n	80094a0 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009496:	4b37      	ldr	r3, [pc, #220]	; (8009574 <xTaskIncrementTick+0x14c>)
 8009498:	f04f 32ff 	mov.w	r2, #4294967295
 800949c:	601a      	str	r2, [r3, #0]
					break;
 800949e:	e03f      	b.n	8009520 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a0:	4b31      	ldr	r3, [pc, #196]	; (8009568 <xTaskIncrementTick+0x140>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d203      	bcs.n	80094c0 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094b8:	4a2e      	ldr	r2, [pc, #184]	; (8009574 <xTaskIncrementTick+0x14c>)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094be:	e02f      	b.n	8009520 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff f8b3 	bl	8008630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d004      	beq.n	80094dc <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	3318      	adds	r3, #24
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff f8aa 	bl	8008630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e0:	4b25      	ldr	r3, [pc, #148]	; (8009578 <xTaskIncrementTick+0x150>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d903      	bls.n	80094f0 <xTaskIncrementTick+0xc8>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ec:	4a22      	ldr	r2, [pc, #136]	; (8009578 <xTaskIncrementTick+0x150>)
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4a1f      	ldr	r2, [pc, #124]	; (800957c <xTaskIncrementTick+0x154>)
 80094fe:	441a      	add	r2, r3
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	3304      	adds	r3, #4
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	f7ff f835 	bl	8008576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009510:	4b1b      	ldr	r3, [pc, #108]	; (8009580 <xTaskIncrementTick+0x158>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009516:	429a      	cmp	r2, r3
 8009518:	d3b8      	bcc.n	800948c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800951a:	2301      	movs	r3, #1
 800951c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800951e:	e7b5      	b.n	800948c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009520:	4b17      	ldr	r3, [pc, #92]	; (8009580 <xTaskIncrementTick+0x158>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009526:	4915      	ldr	r1, [pc, #84]	; (800957c <xTaskIncrementTick+0x154>)
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d901      	bls.n	800953c <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8009538:	2301      	movs	r3, #1
 800953a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800953c:	4b11      	ldr	r3, [pc, #68]	; (8009584 <xTaskIncrementTick+0x15c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009544:	2301      	movs	r3, #1
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e004      	b.n	8009554 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800954a:	4b0f      	ldr	r3, [pc, #60]	; (8009588 <xTaskIncrementTick+0x160>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3301      	adds	r3, #1
 8009550:	4a0d      	ldr	r2, [pc, #52]	; (8009588 <xTaskIncrementTick+0x160>)
 8009552:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009554:	697b      	ldr	r3, [r7, #20]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20000bf4 	.word	0x20000bf4
 8009564:	20000bd0 	.word	0x20000bd0
 8009568:	20000b84 	.word	0x20000b84
 800956c:	20000b88 	.word	0x20000b88
 8009570:	20000be4 	.word	0x20000be4
 8009574:	20000bec 	.word	0x20000bec
 8009578:	20000bd4 	.word	0x20000bd4
 800957c:	200006fc 	.word	0x200006fc
 8009580:	200006f8 	.word	0x200006f8
 8009584:	20000be0 	.word	0x20000be0
 8009588:	20000bdc 	.word	0x20000bdc

0800958c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009592:	4b2f      	ldr	r3, [pc, #188]	; (8009650 <vTaskSwitchContext+0xc4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800959a:	4b2e      	ldr	r3, [pc, #184]	; (8009654 <vTaskSwitchContext+0xc8>)
 800959c:	2201      	movs	r2, #1
 800959e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095a0:	e052      	b.n	8009648 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80095a2:	4b2c      	ldr	r3, [pc, #176]	; (8009654 <vTaskSwitchContext+0xc8>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80095a8:	f7f7 f8bf 	bl	800072a <getRunTimeCounterValue>
 80095ac:	4603      	mov	r3, r0
 80095ae:	4a2a      	ldr	r2, [pc, #168]	; (8009658 <vTaskSwitchContext+0xcc>)
 80095b0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80095b2:	4b29      	ldr	r3, [pc, #164]	; (8009658 <vTaskSwitchContext+0xcc>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	4b29      	ldr	r3, [pc, #164]	; (800965c <vTaskSwitchContext+0xd0>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d909      	bls.n	80095d2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80095be:	4b28      	ldr	r3, [pc, #160]	; (8009660 <vTaskSwitchContext+0xd4>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80095c4:	4a24      	ldr	r2, [pc, #144]	; (8009658 <vTaskSwitchContext+0xcc>)
 80095c6:	6810      	ldr	r0, [r2, #0]
 80095c8:	4a24      	ldr	r2, [pc, #144]	; (800965c <vTaskSwitchContext+0xd0>)
 80095ca:	6812      	ldr	r2, [r2, #0]
 80095cc:	1a82      	subs	r2, r0, r2
 80095ce:	440a      	add	r2, r1
 80095d0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80095d2:	4b21      	ldr	r3, [pc, #132]	; (8009658 <vTaskSwitchContext+0xcc>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a21      	ldr	r2, [pc, #132]	; (800965c <vTaskSwitchContext+0xd0>)
 80095d8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095da:	4b22      	ldr	r3, [pc, #136]	; (8009664 <vTaskSwitchContext+0xd8>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	607b      	str	r3, [r7, #4]
 80095e0:	e008      	b.n	80095f4 <vTaskSwitchContext+0x68>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <vTaskSwitchContext+0x62>
 80095e8:	f000 ff96 	bl	800a518 <ulSetInterruptMask>
 80095ec:	e7fe      	b.n	80095ec <vTaskSwitchContext+0x60>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	607b      	str	r3, [r7, #4]
 80095f4:	491c      	ldr	r1, [pc, #112]	; (8009668 <vTaskSwitchContext+0xdc>)
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	4613      	mov	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	440b      	add	r3, r1
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d0ec      	beq.n	80095e2 <vTaskSwitchContext+0x56>
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4a15      	ldr	r2, [pc, #84]	; (8009668 <vTaskSwitchContext+0xdc>)
 8009614:	4413      	add	r3, r2
 8009616:	603b      	str	r3, [r7, #0]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	3308      	adds	r3, #8
 800962a:	429a      	cmp	r2, r3
 800962c:	d104      	bne.n	8009638 <vTaskSwitchContext+0xac>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	605a      	str	r2, [r3, #4]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	4a08      	ldr	r2, [pc, #32]	; (8009660 <vTaskSwitchContext+0xd4>)
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	4a08      	ldr	r2, [pc, #32]	; (8009664 <vTaskSwitchContext+0xd8>)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6013      	str	r3, [r2, #0]
}
 8009648:	bf00      	nop
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20000bf4 	.word	0x20000bf4
 8009654:	20000be0 	.word	0x20000be0
 8009658:	20000bfc 	.word	0x20000bfc
 800965c:	20000bf8 	.word	0x20000bf8
 8009660:	200006f8 	.word	0x200006f8
 8009664:	20000bd4 	.word	0x20000bd4
 8009668:	200006fc 	.word	0x200006fc

0800966c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <vTaskPlaceOnEventList+0x16>
 800967c:	f000 ff4c 	bl	800a518 <ulSetInterruptMask>
 8009680:	e7fe      	b.n	8009680 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009682:	4b07      	ldr	r3, [pc, #28]	; (80096a0 <vTaskPlaceOnEventList+0x34>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3318      	adds	r3, #24
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7fe ff97 	bl	80085be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009690:	2101      	movs	r1, #1
 8009692:	6838      	ldr	r0, [r7, #0]
 8009694:	f000 fa3c 	bl	8009b10 <prvAddCurrentTaskToDelayedList>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	200006f8 	.word	0x200006f8

080096a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <vTaskPlaceOnEventListRestricted+0x18>
 80096b6:	f000 ff2f 	bl	800a518 <ulSetInterruptMask>
 80096ba:	e7fe      	b.n	80096ba <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <vTaskPlaceOnEventListRestricted+0x44>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3318      	adds	r3, #24
 80096c2:	4619      	mov	r1, r3
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f7fe ff56 	bl	8008576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 80096d0:	f04f 33ff 	mov.w	r3, #4294967295
 80096d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096d6:	6879      	ldr	r1, [r7, #4]
 80096d8:	68b8      	ldr	r0, [r7, #8]
 80096da:	f000 fa19 	bl	8009b10 <prvAddCurrentTaskToDelayedList>
	}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	200006f8 	.word	0x200006f8

080096ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d102      	bne.n	8009708 <xTaskRemoveFromEventList+0x1c>
 8009702:	f000 ff09 	bl	800a518 <ulSetInterruptMask>
 8009706:	e7fe      	b.n	8009706 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3318      	adds	r3, #24
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe ff8f 	bl	8008630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009712:	4b1e      	ldr	r3, [pc, #120]	; (800978c <xTaskRemoveFromEventList+0xa0>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d11d      	bne.n	8009756 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	3304      	adds	r3, #4
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe ff86 	bl	8008630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009728:	4b19      	ldr	r3, [pc, #100]	; (8009790 <xTaskRemoveFromEventList+0xa4>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d903      	bls.n	8009738 <xTaskRemoveFromEventList+0x4c>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009734:	4a16      	ldr	r2, [pc, #88]	; (8009790 <xTaskRemoveFromEventList+0xa4>)
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4a13      	ldr	r2, [pc, #76]	; (8009794 <xTaskRemoveFromEventList+0xa8>)
 8009746:	441a      	add	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	3304      	adds	r3, #4
 800974c:	4619      	mov	r1, r3
 800974e:	4610      	mov	r0, r2
 8009750:	f7fe ff11 	bl	8008576 <vListInsertEnd>
 8009754:	e005      	b.n	8009762 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	3318      	adds	r3, #24
 800975a:	4619      	mov	r1, r3
 800975c:	480e      	ldr	r0, [pc, #56]	; (8009798 <xTaskRemoveFromEventList+0xac>)
 800975e:	f7fe ff0a 	bl	8008576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009766:	4b0d      	ldr	r3, [pc, #52]	; (800979c <xTaskRemoveFromEventList+0xb0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	429a      	cmp	r2, r3
 800976e:	d905      	bls.n	800977c <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009770:	2301      	movs	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009774:	4b0a      	ldr	r3, [pc, #40]	; (80097a0 <xTaskRemoveFromEventList+0xb4>)
 8009776:	2201      	movs	r2, #1
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	e001      	b.n	8009780 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800977c:	2300      	movs	r3, #0
 800977e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009780:	68fb      	ldr	r3, [r7, #12]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000bf4 	.word	0x20000bf4
 8009790:	20000bd4 	.word	0x20000bd4
 8009794:	200006fc 	.word	0x200006fc
 8009798:	20000b8c 	.word	0x20000b8c
 800979c:	200006f8 	.word	0x200006f8
 80097a0:	20000be0 	.word	0x20000be0

080097a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <vTaskInternalSetTimeOutState+0x24>)
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097b4:	4b05      	ldr	r3, [pc, #20]	; (80097cc <vTaskInternalSetTimeOutState+0x28>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	605a      	str	r2, [r3, #4]
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	20000be4 	.word	0x20000be4
 80097cc:	20000bd0 	.word	0x20000bd0

080097d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d102      	bne.n	80097e6 <xTaskCheckForTimeOut+0x16>
 80097e0:	f000 fe9a 	bl	800a518 <ulSetInterruptMask>
 80097e4:	e7fe      	b.n	80097e4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d102      	bne.n	80097f2 <xTaskCheckForTimeOut+0x22>
 80097ec:	f000 fe94 	bl	800a518 <ulSetInterruptMask>
 80097f0:	e7fe      	b.n	80097f0 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80097f2:	f000 fd57 	bl	800a2a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097f6:	4b1d      	ldr	r3, [pc, #116]	; (800986c <xTaskCheckForTimeOut+0x9c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980e:	d102      	bne.n	8009816 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	e023      	b.n	800985e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	4b15      	ldr	r3, [pc, #84]	; (8009870 <xTaskCheckForTimeOut+0xa0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d007      	beq.n	8009832 <xTaskCheckForTimeOut+0x62>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	429a      	cmp	r2, r3
 800982a:	d302      	bcc.n	8009832 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e015      	b.n	800985e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	429a      	cmp	r2, r3
 800983a:	d20b      	bcs.n	8009854 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	1ad2      	subs	r2, r2, r3
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff ffab 	bl	80097a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]
 8009852:	e004      	b.n	800985e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800985a:	2301      	movs	r3, #1
 800985c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800985e:	f000 fd33 	bl	800a2c8 <vPortExitCritical>

	return xReturn;
 8009862:	697b      	ldr	r3, [r7, #20]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000bd0 	.word	0x20000bd0
 8009870:	20000be4 	.word	0x20000be4

08009874 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009878:	4b03      	ldr	r3, [pc, #12]	; (8009888 <vTaskMissedYield+0x14>)
 800987a:	2201      	movs	r2, #1
 800987c:	601a      	str	r2, [r3, #0]
}
 800987e:	bf00      	nop
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	20000be0 	.word	0x20000be0

0800988c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009894:	f000 f84a 	bl	800992c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009898:	4b03      	ldr	r3, [pc, #12]	; (80098a8 <prvIdleTask+0x1c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d9f9      	bls.n	8009894 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098a0:	f000 fcee 	bl	800a280 <vPortYield>
		prvCheckTasksWaitingTermination();
 80098a4:	e7f6      	b.n	8009894 <prvIdleTask+0x8>
 80098a6:	bf00      	nop
 80098a8:	200006fc 	.word	0x200006fc

080098ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098b2:	2300      	movs	r3, #0
 80098b4:	607b      	str	r3, [r7, #4]
 80098b6:	e00c      	b.n	80098d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4a12      	ldr	r2, [pc, #72]	; (800990c <prvInitialiseTaskLists+0x60>)
 80098c4:	4413      	add	r3, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe fe28 	bl	800851c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3301      	adds	r3, #1
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b37      	cmp	r3, #55	; 0x37
 80098d6:	d9ef      	bls.n	80098b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098d8:	480d      	ldr	r0, [pc, #52]	; (8009910 <prvInitialiseTaskLists+0x64>)
 80098da:	f7fe fe1f 	bl	800851c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098de:	480d      	ldr	r0, [pc, #52]	; (8009914 <prvInitialiseTaskLists+0x68>)
 80098e0:	f7fe fe1c 	bl	800851c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098e4:	480c      	ldr	r0, [pc, #48]	; (8009918 <prvInitialiseTaskLists+0x6c>)
 80098e6:	f7fe fe19 	bl	800851c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098ea:	480c      	ldr	r0, [pc, #48]	; (800991c <prvInitialiseTaskLists+0x70>)
 80098ec:	f7fe fe16 	bl	800851c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098f0:	480b      	ldr	r0, [pc, #44]	; (8009920 <prvInitialiseTaskLists+0x74>)
 80098f2:	f7fe fe13 	bl	800851c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098f6:	4b0b      	ldr	r3, [pc, #44]	; (8009924 <prvInitialiseTaskLists+0x78>)
 80098f8:	4a05      	ldr	r2, [pc, #20]	; (8009910 <prvInitialiseTaskLists+0x64>)
 80098fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098fc:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <prvInitialiseTaskLists+0x7c>)
 80098fe:	4a05      	ldr	r2, [pc, #20]	; (8009914 <prvInitialiseTaskLists+0x68>)
 8009900:	601a      	str	r2, [r3, #0]
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	200006fc 	.word	0x200006fc
 8009910:	20000b5c 	.word	0x20000b5c
 8009914:	20000b70 	.word	0x20000b70
 8009918:	20000b8c 	.word	0x20000b8c
 800991c:	20000ba0 	.word	0x20000ba0
 8009920:	20000bb8 	.word	0x20000bb8
 8009924:	20000b84 	.word	0x20000b84
 8009928:	20000b88 	.word	0x20000b88

0800992c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009932:	e019      	b.n	8009968 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009934:	f000 fcb6 	bl	800a2a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009938:	4b10      	ldr	r3, [pc, #64]	; (800997c <prvCheckTasksWaitingTermination+0x50>)
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	3304      	adds	r3, #4
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fe73 	bl	8008630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800994a:	4b0d      	ldr	r3, [pc, #52]	; (8009980 <prvCheckTasksWaitingTermination+0x54>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3b01      	subs	r3, #1
 8009950:	4a0b      	ldr	r2, [pc, #44]	; (8009980 <prvCheckTasksWaitingTermination+0x54>)
 8009952:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009954:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <prvCheckTasksWaitingTermination+0x58>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3b01      	subs	r3, #1
 800995a:	4a0a      	ldr	r2, [pc, #40]	; (8009984 <prvCheckTasksWaitingTermination+0x58>)
 800995c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800995e:	f000 fcb3 	bl	800a2c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f810 	bl	8009988 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009968:	4b06      	ldr	r3, [pc, #24]	; (8009984 <prvCheckTasksWaitingTermination+0x58>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1e1      	bne.n	8009934 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009970:	bf00      	nop
 8009972:	bf00      	nop
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20000ba0 	.word	0x20000ba0
 8009980:	20000bcc 	.word	0x20000bcc
 8009984:	20000bb4 	.word	0x20000bb4

08009988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009996:	2b00      	cmp	r3, #0
 8009998:	d108      	bne.n	80099ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fed6 	bl	800a750 <vPortFree>
				vPortFree( pxTCB );
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fed3 	bl	800a750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099aa:	e010      	b.n	80099ce <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d103      	bne.n	80099be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 feca 	bl	800a750 <vPortFree>
	}
 80099bc:	e007      	b.n	80099ce <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d002      	beq.n	80099ce <prvDeleteTCB+0x46>
 80099c8:	f000 fda6 	bl	800a518 <ulSetInterruptMask>
 80099cc:	e7fe      	b.n	80099cc <prvDeleteTCB+0x44>
	}
 80099ce:	bf00      	nop
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099de:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <prvResetNextTaskUnblockTime+0x38>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d104      	bne.n	80099f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099e8:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <prvResetNextTaskUnblockTime+0x3c>)
 80099ea:	f04f 32ff 	mov.w	r2, #4294967295
 80099ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099f0:	e008      	b.n	8009a04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f2:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <prvResetNextTaskUnblockTime+0x38>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a04      	ldr	r2, [pc, #16]	; (8009a14 <prvResetNextTaskUnblockTime+0x3c>)
 8009a02:	6013      	str	r3, [r2, #0]
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20000b84 	.word	0x20000b84
 8009a14:	20000bec 	.word	0x20000bec

08009a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a1e:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <xTaskGetSchedulerState+0x34>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a26:	2301      	movs	r3, #1
 8009a28:	607b      	str	r3, [r7, #4]
 8009a2a:	e008      	b.n	8009a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a2c:	4b08      	ldr	r3, [pc, #32]	; (8009a50 <xTaskGetSchedulerState+0x38>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d102      	bne.n	8009a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a34:	2302      	movs	r3, #2
 8009a36:	607b      	str	r3, [r7, #4]
 8009a38:	e001      	b.n	8009a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a3e:	687b      	ldr	r3, [r7, #4]
	}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	20000bd8 	.word	0x20000bd8
 8009a50:	20000bf4 	.word	0x20000bf4

08009a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d046      	beq.n	8009af8 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a6a:	4b26      	ldr	r3, [pc, #152]	; (8009b04 <xTaskPriorityDisinherit+0xb0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d002      	beq.n	8009a7a <xTaskPriorityDisinherit+0x26>
 8009a74:	f000 fd50 	bl	800a518 <ulSetInterruptMask>
 8009a78:	e7fe      	b.n	8009a78 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <xTaskPriorityDisinherit+0x34>
 8009a82:	f000 fd49 	bl	800a518 <ulSetInterruptMask>
 8009a86:	e7fe      	b.n	8009a86 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8c:	1e5a      	subs	r2, r3, #1
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d02c      	beq.n	8009af8 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d128      	bne.n	8009af8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fdc0 	bl	8008630 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <xTaskPriorityDisinherit+0xb4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d903      	bls.n	8009ad8 <xTaskPriorityDisinherit+0x84>
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	4a0c      	ldr	r2, [pc, #48]	; (8009b08 <xTaskPriorityDisinherit+0xb4>)
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4a09      	ldr	r2, [pc, #36]	; (8009b0c <xTaskPriorityDisinherit+0xb8>)
 8009ae6:	441a      	add	r2, r3
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	3304      	adds	r3, #4
 8009aec:	4619      	mov	r1, r3
 8009aee:	4610      	mov	r0, r2
 8009af0:	f7fe fd41 	bl	8008576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009af4:	2301      	movs	r3, #1
 8009af6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009af8:	68fb      	ldr	r3, [r7, #12]
	}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	200006f8 	.word	0x200006f8
 8009b08:	20000bd4 	.word	0x20000bd4
 8009b0c:	200006fc 	.word	0x200006fc

08009b10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b1a:	4b21      	ldr	r3, [pc, #132]	; (8009ba0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b20:	4b20      	ldr	r3, [pc, #128]	; (8009ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3304      	adds	r3, #4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fd82 	bl	8008630 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b32:	d10a      	bne.n	8009b4a <prvAddCurrentTaskToDelayedList+0x3a>
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d007      	beq.n	8009b4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b3a:	4b1a      	ldr	r3, [pc, #104]	; (8009ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4619      	mov	r1, r3
 8009b42:	4819      	ldr	r0, [pc, #100]	; (8009ba8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b44:	f7fe fd17 	bl	8008576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b48:	e026      	b.n	8009b98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4413      	add	r3, r2
 8009b50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b52:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d209      	bcs.n	8009b76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b62:	4b12      	ldr	r3, [pc, #72]	; (8009bac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f7fe fd25 	bl	80085be <vListInsert>
}
 8009b74:	e010      	b.n	8009b98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b76:	4b0e      	ldr	r3, [pc, #56]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	4619      	mov	r1, r3
 8009b82:	4610      	mov	r0, r2
 8009b84:	f7fe fd1b 	bl	80085be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b88:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d202      	bcs.n	8009b98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b92:	4a08      	ldr	r2, [pc, #32]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	6013      	str	r3, [r2, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000bd0 	.word	0x20000bd0
 8009ba4:	200006f8 	.word	0x200006f8
 8009ba8:	20000bb8 	.word	0x20000bb8
 8009bac:	20000b88 	.word	0x20000b88
 8009bb0:	20000b84 	.word	0x20000b84
 8009bb4:	20000bec 	.word	0x20000bec

08009bb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bc2:	f000 fac7 	bl	800a154 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bc6:	4b18      	ldr	r3, [pc, #96]	; (8009c28 <xTimerCreateTimerTask+0x70>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d020      	beq.n	8009c10 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009bd6:	463a      	mov	r2, r7
 8009bd8:	1d39      	adds	r1, r7, #4
 8009bda:	f107 0308 	add.w	r3, r7, #8
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fc82 	bl	80084e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	9202      	str	r2, [sp, #8]
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	2303      	movs	r3, #3
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	460a      	mov	r2, r1
 8009bf6:	490d      	ldr	r1, [pc, #52]	; (8009c2c <xTimerCreateTimerTask+0x74>)
 8009bf8:	480d      	ldr	r0, [pc, #52]	; (8009c30 <xTimerCreateTimerTask+0x78>)
 8009bfa:	f7ff f96f 	bl	8008edc <xTaskCreateStatic>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4a0c      	ldr	r2, [pc, #48]	; (8009c34 <xTimerCreateTimerTask+0x7c>)
 8009c02:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c04:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <xTimerCreateTimerTask+0x7c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <xTimerCreateTimerTask+0x64>
 8009c16:	f000 fc7f 	bl	800a518 <ulSetInterruptMask>
 8009c1a:	e7fe      	b.n	8009c1a <xTimerCreateTimerTask+0x62>
	return xReturn;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000c30 	.word	0x20000c30
 8009c2c:	0800aa24 	.word	0x0800aa24
 8009c30:	08009d4d 	.word	0x08009d4d
 8009c34:	20000c34 	.word	0x20000c34

08009c38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08a      	sub	sp, #40	; 0x28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <xTimerGenericCommand+0x1e>
 8009c50:	f000 fc62 	bl	800a518 <ulSetInterruptMask>
 8009c54:	e7fe      	b.n	8009c54 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c56:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <xTimerGenericCommand+0x88>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d02a      	beq.n	8009cb4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b05      	cmp	r3, #5
 8009c6e:	dc18      	bgt.n	8009ca2 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c70:	f7ff fed2 	bl	8009a18 <xTaskGetSchedulerState>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d109      	bne.n	8009c8e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c7a:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <xTimerGenericCommand+0x88>)
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	f107 0114 	add.w	r1, r7, #20
 8009c82:	2300      	movs	r3, #0
 8009c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c86:	f7fe fdc8 	bl	800881a <xQueueGenericSend>
 8009c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8009c8c:	e012      	b.n	8009cb4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <xTimerGenericCommand+0x88>)
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	f107 0114 	add.w	r1, r7, #20
 8009c96:	2300      	movs	r3, #0
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f7fe fdbe 	bl	800881a <xQueueGenericSend>
 8009c9e:	6278      	str	r0, [r7, #36]	; 0x24
 8009ca0:	e008      	b.n	8009cb4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <xTimerGenericCommand+0x88>)
 8009ca4:	6818      	ldr	r0, [r3, #0]
 8009ca6:	f107 0114 	add.w	r1, r7, #20
 8009caa:	2300      	movs	r3, #0
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	f7fe fe7d 	bl	80089ac <xQueueGenericSendFromISR>
 8009cb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3728      	adds	r7, #40	; 0x28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000c30 	.word	0x20000c30

08009cc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cce:	4b1e      	ldr	r3, [pc, #120]	; (8009d48 <prvProcessExpiredTimer+0x84>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fe fca7 	bl	8008630 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01a      	beq.n	8009d26 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	699a      	ldr	r2, [r3, #24]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	18d1      	adds	r1, r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f000 f8c1 	bl	8009e84 <prvInsertTimerInActiveList>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d017      	beq.n	8009d38 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	2100      	movs	r1, #0
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f7ff ff90 	bl	8009c38 <xTimerGenericCommand>
 8009d18:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10b      	bne.n	8009d38 <prvProcessExpiredTimer+0x74>
 8009d20:	f000 fbfa 	bl	800a518 <ulSetInterruptMask>
 8009d24:	e7fe      	b.n	8009d24 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d2c:	f023 0301 	bic.w	r3, r3, #1
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	4798      	blx	r3
}
 8009d40:	bf00      	nop
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	20000c28 	.word	0x20000c28

08009d4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d54:	f107 0308 	add.w	r3, r7, #8
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 f84f 	bl	8009dfc <prvGetNextExpireTime>
 8009d5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4619      	mov	r1, r3
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 f803 	bl	8009d70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d6a:	f000 f8cd 	bl	8009f08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d6e:	e7f1      	b.n	8009d54 <prvTimerTask+0x8>

08009d70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d7a:	f7ff faa9 	bl	80092d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d7e:	f107 0308 	add.w	r3, r7, #8
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 f85e 	bl	8009e44 <prvSampleTimeNow>
 8009d88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d12a      	bne.n	8009de6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <prvProcessTimerOrBlockTask+0x3c>
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d806      	bhi.n	8009dac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d9e:	f7ff faa5 	bl	80092ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009da2:	68f9      	ldr	r1, [r7, #12]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff ff8d 	bl	8009cc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009daa:	e01e      	b.n	8009dea <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d008      	beq.n	8009dc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009db2:	4b10      	ldr	r3, [pc, #64]	; (8009df4 <prvProcessTimerOrBlockTask+0x84>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <prvProcessTimerOrBlockTask+0x50>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e000      	b.n	8009dc2 <prvProcessTimerOrBlockTask+0x52>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <prvProcessTimerOrBlockTask+0x88>)
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	f7ff f84f 	bl	8008e74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009dd6:	f7ff fa89 	bl	80092ec <xTaskResumeAll>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d104      	bne.n	8009dea <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8009de0:	f000 fa4e 	bl	800a280 <vPortYield>
}
 8009de4:	e001      	b.n	8009dea <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8009de6:	f7ff fa81 	bl	80092ec <xTaskResumeAll>
}
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000c2c 	.word	0x20000c2c
 8009df8:	20000c30 	.word	0x20000c30

08009dfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e04:	4b0e      	ldr	r3, [pc, #56]	; (8009e40 <prvGetNextExpireTime+0x44>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <prvGetNextExpireTime+0x16>
 8009e0e:	2201      	movs	r2, #1
 8009e10:	e000      	b.n	8009e14 <prvGetNextExpireTime+0x18>
 8009e12:	2200      	movs	r2, #0
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d105      	bne.n	8009e2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e20:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <prvGetNextExpireTime+0x44>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	e001      	b.n	8009e30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e30:	68fb      	ldr	r3, [r7, #12]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20000c28 	.word	0x20000c28

08009e44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e4c:	f7ff fadc 	bl	8009408 <xTaskGetTickCount>
 8009e50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e52:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <prvSampleTimeNow+0x3c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d205      	bcs.n	8009e68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e5c:	f000 f91e 	bl	800a09c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	e002      	b.n	8009e6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e6e:	4a04      	ldr	r2, [pc, #16]	; (8009e80 <prvSampleTimeNow+0x3c>)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e74:	68fb      	ldr	r3, [r7, #12]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000c38 	.word	0x20000c38

08009e84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d812      	bhi.n	8009ed0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d302      	bcc.n	8009ebe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	617b      	str	r3, [r7, #20]
 8009ebc:	e01b      	b.n	8009ef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ebe:	4b10      	ldr	r3, [pc, #64]	; (8009f00 <prvInsertTimerInActiveList+0x7c>)
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	4610      	mov	r0, r2
 8009eca:	f7fe fb78 	bl	80085be <vListInsert>
 8009ece:	e012      	b.n	8009ef6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d206      	bcs.n	8009ee6 <prvInsertTimerInActiveList+0x62>
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d302      	bcc.n	8009ee6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	e007      	b.n	8009ef6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ee6:	4b07      	ldr	r3, [pc, #28]	; (8009f04 <prvInsertTimerInActiveList+0x80>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3304      	adds	r3, #4
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	f7fe fb64 	bl	80085be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ef6:	697b      	ldr	r3, [r7, #20]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20000c2c 	.word	0x20000c2c
 8009f04:	20000c28 	.word	0x20000c28

08009f08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08c      	sub	sp, #48	; 0x30
 8009f0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f0e:	e0b2      	b.n	800a076 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	da11      	bge.n	8009f3a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f16:	f107 0308 	add.w	r3, r7, #8
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <prvProcessReceivedCommands+0x22>
 8009f24:	f000 faf8 	bl	800a518 <ulSetInterruptMask>
 8009f28:	e7fe      	b.n	8009f28 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f30:	6850      	ldr	r0, [r2, #4]
 8009f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f34:	6892      	ldr	r2, [r2, #8]
 8009f36:	4611      	mov	r1, r2
 8009f38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f2c0 8099 	blt.w	800a074 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d004      	beq.n	8009f58 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	3304      	adds	r3, #4
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe fb6c 	bl	8008630 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f58:	1d3b      	adds	r3, r7, #4
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff ff72 	bl	8009e44 <prvSampleTimeNow>
 8009f60:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2b09      	cmp	r3, #9
 8009f66:	f200 8086 	bhi.w	800a076 <prvProcessReceivedCommands+0x16e>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <prvProcessReceivedCommands+0x68>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009f99 	.word	0x08009f99
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	08009ffd 	.word	0x08009ffd
 8009f80:	0800a011 	.word	0x0800a011
 8009f84:	0800a04b 	.word	0x0800a04b
 8009f88:	08009f99 	.word	0x08009f99
 8009f8c:	08009f99 	.word	0x08009f99
 8009f90:	08009ffd 	.word	0x08009ffd
 8009f94:	0800a011 	.word	0x0800a011
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f9e:	f043 0301 	orr.w	r3, r3, #1
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	18d1      	adds	r1, r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	69fa      	ldr	r2, [r7, #28]
 8009fb6:	6a38      	ldr	r0, [r7, #32]
 8009fb8:	f7ff ff64 	bl	8009e84 <prvInsertTimerInActiveList>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d059      	beq.n	800a076 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	6a38      	ldr	r0, [r7, #32]
 8009fc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d04e      	beq.n	800a076 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	441a      	add	r2, r3
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	6a38      	ldr	r0, [r7, #32]
 8009fea:	f7ff fe25 	bl	8009c38 <xTimerGenericCommand>
 8009fee:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d13f      	bne.n	800a076 <prvProcessReceivedCommands+0x16e>
 8009ff6:	f000 fa8f 	bl	800a518 <ulSetInterruptMask>
 8009ffa:	e7fe      	b.n	8009ffa <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a002:	f023 0301 	bic.w	r3, r3, #1
 800a006:	b2da      	uxtb	r2, r3
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a00e:	e032      	b.n	800a076 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a016:	f043 0301 	orr.w	r3, r3, #1
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a028:	6a3b      	ldr	r3, [r7, #32]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <prvProcessReceivedCommands+0x12e>
 800a030:	f000 fa72 	bl	800a518 <ulSetInterruptMask>
 800a034:	e7fe      	b.n	800a034 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	18d1      	adds	r1, r2, r3
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	69fa      	ldr	r2, [r7, #28]
 800a042:	6a38      	ldr	r0, [r7, #32]
 800a044:	f7ff ff1e 	bl	8009e84 <prvInsertTimerInActiveList>
					break;
 800a048:	e015      	b.n	800a076 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a050:	f003 0302 	and.w	r3, r3, #2
 800a054:	2b00      	cmp	r3, #0
 800a056:	d103      	bne.n	800a060 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800a058:	6a38      	ldr	r0, [r7, #32]
 800a05a:	f000 fb79 	bl	800a750 <vPortFree>
 800a05e:	e00a      	b.n	800a076 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a066:	f023 0301 	bic.w	r3, r3, #1
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a072:	e000      	b.n	800a076 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a074:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a076:	4b08      	ldr	r3, [pc, #32]	; (800a098 <prvProcessReceivedCommands+0x190>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f107 0108 	add.w	r1, r7, #8
 800a07e:	2200      	movs	r2, #0
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe fd04 	bl	8008a8e <xQueueReceive>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f47f af41 	bne.w	8009f10 <prvProcessReceivedCommands+0x8>
	}
}
 800a08e:	bf00      	nop
 800a090:	bf00      	nop
 800a092:	3728      	adds	r7, #40	; 0x28
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	20000c30 	.word	0x20000c30

0800a09c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0a2:	e040      	b.n	800a126 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0a4:	4b29      	ldr	r3, [pc, #164]	; (800a14c <prvSwitchTimerLists+0xb0>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ae:	4b27      	ldr	r3, [pc, #156]	; (800a14c <prvSwitchTimerLists+0xb0>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe fab7 	bl	8008630 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d026      	beq.n	800a126 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4413      	add	r3, r2
 800a0e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d90e      	bls.n	800a108 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0f6:	4b15      	ldr	r3, [pc, #84]	; (800a14c <prvSwitchTimerLists+0xb0>)
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f7fe fa5c 	bl	80085be <vListInsert>
 800a106:	e00e      	b.n	800a126 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a108:	2300      	movs	r3, #0
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	2300      	movs	r3, #0
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	2100      	movs	r1, #0
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f7ff fd90 	bl	8009c38 <xTimerGenericCommand>
 800a118:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d102      	bne.n	800a126 <prvSwitchTimerLists+0x8a>
 800a120:	f000 f9fa 	bl	800a518 <ulSetInterruptMask>
 800a124:	e7fe      	b.n	800a124 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a126:	4b09      	ldr	r3, [pc, #36]	; (800a14c <prvSwitchTimerLists+0xb0>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1b9      	bne.n	800a0a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a130:	4b06      	ldr	r3, [pc, #24]	; (800a14c <prvSwitchTimerLists+0xb0>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a136:	4b06      	ldr	r3, [pc, #24]	; (800a150 <prvSwitchTimerLists+0xb4>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a04      	ldr	r2, [pc, #16]	; (800a14c <prvSwitchTimerLists+0xb0>)
 800a13c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a13e:	4a04      	ldr	r2, [pc, #16]	; (800a150 <prvSwitchTimerLists+0xb4>)
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	6013      	str	r3, [r2, #0]
}
 800a144:	bf00      	nop
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20000c28 	.word	0x20000c28
 800a150:	20000c2c 	.word	0x20000c2c

0800a154 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a15a:	f000 f8a3 	bl	800a2a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a15e:	4b15      	ldr	r3, [pc, #84]	; (800a1b4 <prvCheckForValidListAndQueue+0x60>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d120      	bne.n	800a1a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a166:	4814      	ldr	r0, [pc, #80]	; (800a1b8 <prvCheckForValidListAndQueue+0x64>)
 800a168:	f7fe f9d8 	bl	800851c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a16c:	4813      	ldr	r0, [pc, #76]	; (800a1bc <prvCheckForValidListAndQueue+0x68>)
 800a16e:	f7fe f9d5 	bl	800851c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a172:	4b13      	ldr	r3, [pc, #76]	; (800a1c0 <prvCheckForValidListAndQueue+0x6c>)
 800a174:	4a10      	ldr	r2, [pc, #64]	; (800a1b8 <prvCheckForValidListAndQueue+0x64>)
 800a176:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a178:	4b12      	ldr	r3, [pc, #72]	; (800a1c4 <prvCheckForValidListAndQueue+0x70>)
 800a17a:	4a10      	ldr	r2, [pc, #64]	; (800a1bc <prvCheckForValidListAndQueue+0x68>)
 800a17c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a17e:	2300      	movs	r3, #0
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	4b11      	ldr	r3, [pc, #68]	; (800a1c8 <prvCheckForValidListAndQueue+0x74>)
 800a184:	4a11      	ldr	r2, [pc, #68]	; (800a1cc <prvCheckForValidListAndQueue+0x78>)
 800a186:	2110      	movs	r1, #16
 800a188:	200a      	movs	r0, #10
 800a18a:	f7fe fad3 	bl	8008734 <xQueueGenericCreateStatic>
 800a18e:	4603      	mov	r3, r0
 800a190:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <prvCheckForValidListAndQueue+0x60>)
 800a192:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a194:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <prvCheckForValidListAndQueue+0x60>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a19c:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <prvCheckForValidListAndQueue+0x60>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	490b      	ldr	r1, [pc, #44]	; (800a1d0 <prvCheckForValidListAndQueue+0x7c>)
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe fe3c 	bl	8008e20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1a8:	f000 f88e 	bl	800a2c8 <vPortExitCritical>
}
 800a1ac:	bf00      	nop
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20000c30 	.word	0x20000c30
 800a1b8:	20000c00 	.word	0x20000c00
 800a1bc:	20000c14 	.word	0x20000c14
 800a1c0:	20000c28 	.word	0x20000c28
 800a1c4:	20000c2c 	.word	0x20000c2c
 800a1c8:	20000cdc 	.word	0x20000cdc
 800a1cc:	20000c3c 	.word	0x20000c3c
 800a1d0:	0800aa2c 	.word	0x0800aa2c

0800a1d4 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1d8:	4b0b      	ldr	r3, [pc, #44]	; (800a208 <vPortSetupTimerInterrupt+0x34>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1de:	4b0b      	ldr	r3, [pc, #44]	; (800a20c <vPortSetupTimerInterrupt+0x38>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1e4:	4b0a      	ldr	r3, [pc, #40]	; (800a210 <vPortSetupTimerInterrupt+0x3c>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a0a      	ldr	r2, [pc, #40]	; (800a214 <vPortSetupTimerInterrupt+0x40>)
 800a1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ee:	099b      	lsrs	r3, r3, #6
 800a1f0:	4a09      	ldr	r2, [pc, #36]	; (800a218 <vPortSetupTimerInterrupt+0x44>)
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a1f6:	4b04      	ldr	r3, [pc, #16]	; (800a208 <vPortSetupTimerInterrupt+0x34>)
 800a1f8:	2207      	movs	r2, #7
 800a1fa:	601a      	str	r2, [r3, #0]
}
 800a1fc:	bf00      	nop
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	e000e010 	.word	0xe000e010
 800a20c:	e000e018 	.word	0xe000e018
 800a210:	20000000 	.word	0x20000000
 800a214:	10624dd3 	.word	0x10624dd3
 800a218:	e000e014 	.word	0xe000e014

0800a21c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a222:	2300      	movs	r3, #0
 800a224:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800a226:	4b09      	ldr	r3, [pc, #36]	; (800a24c <prvTaskExitError+0x30>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22e:	d002      	beq.n	800a236 <prvTaskExitError+0x1a>
 800a230:	f000 f972 	bl	800a518 <ulSetInterruptMask>
 800a234:	e7fe      	b.n	800a234 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800a236:	f000 f96f 	bl	800a518 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800a23a:	bf00      	nop
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0fc      	beq.n	800a23c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800a242:	bf00      	nop
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	2000000c 	.word	0x2000000c

0800a250 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800a254:	4b08      	ldr	r3, [pc, #32]	; (800a278 <prvSetupFPU+0x28>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a07      	ldr	r2, [pc, #28]	; (800a278 <prvSetupFPU+0x28>)
 800a25a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a25e:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800a260:	4b06      	ldr	r3, [pc, #24]	; (800a27c <prvSetupFPU+0x2c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a05      	ldr	r2, [pc, #20]	; (800a27c <prvSetupFPU+0x2c>)
 800a266:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a26a:	6013      	str	r3, [r2, #0]
	}
 800a26c:	bf00      	nop
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	e000ed88 	.word	0xe000ed88
 800a27c:	e000ef34 	.word	0xe000ef34

0800a280 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800a280:	b480      	push	{r7}
 800a282:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a284:	4b06      	ldr	r3, [pc, #24]	; (800a2a0 <vPortYield+0x20>)
 800a286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a28c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a290:	f3bf 8f6f 	isb	sy
}
 800a294:	bf00      	nop
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800a2a8:	f000 f936 	bl	800a518 <ulSetInterruptMask>
	ulCriticalNesting++;
 800a2ac:	4b05      	ldr	r3, [pc, #20]	; (800a2c4 <vPortEnterCritical+0x20>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	4a04      	ldr	r2, [pc, #16]	; (800a2c4 <vPortEnterCritical+0x20>)
 800a2b4:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a2b6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a2ba:	f3bf 8f6f 	isb	sy
}
 800a2be:	bf00      	nop
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	2000000c 	.word	0x2000000c

0800a2c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <vPortExitCritical+0x30>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d102      	bne.n	800a2da <vPortExitCritical+0x12>
 800a2d4:	f000 f920 	bl	800a518 <ulSetInterruptMask>
 800a2d8:	e7fe      	b.n	800a2d8 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800a2da:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <vPortExitCritical+0x30>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	4a05      	ldr	r2, [pc, #20]	; (800a2f8 <vPortExitCritical+0x30>)
 800a2e2:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800a2e4:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <vPortExitCritical+0x30>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d102      	bne.n	800a2f2 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	f000 f920 	bl	800a532 <vClearInterruptMask>
	}
}
 800a2f2:	bf00      	nop
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	2000000c 	.word	0x2000000c

0800a2fc <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a302:	f000 f909 	bl	800a518 <ulSetInterruptMask>
 800a306:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a308:	f7ff f88e 	bl	8009428 <xTaskIncrementTick>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a312:	4b05      	ldr	r3, [pc, #20]	; (800a328 <xPortSysTickHandler+0x2c>)
 800a314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a318:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f909 	bl	800a532 <vClearInterruptMask>
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3b02      	subs	r3, #2
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800a342:	7afb      	ldrb	r3, [r7, #11]
 800a344:	2b02      	cmp	r3, #2
 800a346:	d104      	bne.n	800a352 <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 800a348:	f7ff ff82 	bl	800a250 <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800a34c:	f000 f8b8 	bl	800a4c0 <vRestoreContextOfFirstTask>
		}
		break;
 800a350:	e002      	b.n	800a358 <vPortSVCHandler_C+0x2c>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800a352:	f000 f8e1 	bl	800a518 <ulSetInterruptMask>
 800a356:	e7fe      	b.n	800a356 <vPortSVCHandler_C+0x2a>
		}
	}
}
 800a358:	bf00      	nop
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3b04      	subs	r3, #4
 800a372:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a37a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3b04      	subs	r3, #4
 800a380:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3b04      	subs	r3, #4
 800a38c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a38e:	4a38      	ldr	r2, [pc, #224]	; (800a470 <pxPortInitialiseStack+0x110>)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3b04      	subs	r3, #4
 800a398:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800a3a0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3b04      	subs	r3, #4
 800a3a6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800a3ae:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3b04      	subs	r3, #4
 800a3b4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800a3bc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3b04      	subs	r3, #4
 800a3c2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800a3ca:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3b04      	subs	r3, #4
 800a3d0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3b04      	subs	r3, #4
 800a3dc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800a3e4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3b04      	subs	r3, #4
 800a3ea:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800a3f2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	3b04      	subs	r3, #4
 800a3f8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800a400:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3b04      	subs	r3, #4
 800a406:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800a40e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3b04      	subs	r3, #4
 800a414:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800a41c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3b04      	subs	r3, #4
 800a422:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800a42a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3b04      	subs	r3, #4
 800a430:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800a438:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	3b04      	subs	r3, #4
 800a43e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800a446:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3b04      	subs	r3, #4
 800a44c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800a454:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	3b04      	subs	r3, #4
 800a45a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800a462:	68fb      	ldr	r3, [r7, #12]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	0800a21d 	.word	0x0800a21d

0800a474 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a478:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <xPortStartScheduler+0x38>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a0b      	ldr	r2, [pc, #44]	; (800a4ac <xPortStartScheduler+0x38>)
 800a47e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a482:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a484:	4b09      	ldr	r3, [pc, #36]	; (800a4ac <xPortStartScheduler+0x38>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a08      	ldr	r2, [pc, #32]	; (800a4ac <xPortStartScheduler+0x38>)
 800a48a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a48e:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800a490:	f7ff fea0 	bl	800a1d4 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800a494:	4b06      	ldr	r3, [pc, #24]	; (800a4b0 <xPortStartScheduler+0x3c>)
 800a496:	2200      	movs	r2, #0
 800a498:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800a49a:	f000 f829 	bl	800a4f0 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800a49e:	f7ff f875 	bl	800958c <vTaskSwitchContext>
	prvTaskExitError();
 800a4a2:	f7ff febb 	bl	800a21c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	e000ed20 	.word	0xe000ed20
 800a4b0:	2000000c 	.word	0x2000000c
	...

0800a4c0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a4c0:	4a07      	ldr	r2, [pc, #28]	; (800a4e0 <pxCurrentTCBConst2>)
 800a4c2:	6811      	ldr	r1, [r2, #0]
 800a4c4:	6808      	ldr	r0, [r1, #0]
 800a4c6:	c806      	ldmia	r0!, {r1, r2}
 800a4c8:	f381 880b 	msr	PSPLIM, r1
 800a4cc:	2102      	movs	r1, #2
 800a4ce:	f381 8814 	msr	CONTROL, r1
 800a4d2:	3020      	adds	r0, #32
 800a4d4:	f380 8809 	msr	PSP, r0
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	4710      	bx	r2
 800a4de:	bf00      	nop

0800a4e0 <pxCurrentTCBConst2>:
 800a4e0:	200006f8 	.word	0x200006f8
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop
	...

0800a4f0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a4f0:	4807      	ldr	r0, [pc, #28]	; (800a510 <xVTORConst>)
 800a4f2:	6800      	ldr	r0, [r0, #0]
 800a4f4:	6800      	ldr	r0, [r0, #0]
 800a4f6:	f380 8808 	msr	MSP, r0
 800a4fa:	b662      	cpsie	i
 800a4fc:	b661      	cpsie	f
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	df02      	svc	2
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	f3af 8000 	nop.w

0800a510 <xVTORConst>:
 800a510:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop

0800a518 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a518:	f3ef 8011 	mrs	r0, BASEPRI
 800a51c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800a520:	f381 8811 	msr	BASEPRI, r1
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a52e:	bf00      	nop
 800a530:	4618      	mov	r0, r3

0800a532 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a532:	f380 8811 	msr	BASEPRI, r0
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800a540:	bf00      	nop
	...

0800a550 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a550:	f3ef 8009 	mrs	r0, PSP
 800a554:	f01e 0f10 	tst.w	lr, #16
 800a558:	bf08      	it	eq
 800a55a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a55e:	f3ef 820b 	mrs	r2, PSPLIM
 800a562:	4673      	mov	r3, lr
 800a564:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a568:	4a11      	ldr	r2, [pc, #68]	; (800a5b0 <pxCurrentTCBConst>)
 800a56a:	6811      	ldr	r1, [r2, #0]
 800a56c:	6008      	str	r0, [r1, #0]
 800a56e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800a572:	f380 8811 	msr	BASEPRI, r0
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f7ff f805 	bl	800958c <vTaskSwitchContext>
 800a582:	f04f 0000 	mov.w	r0, #0
 800a586:	f380 8811 	msr	BASEPRI, r0
 800a58a:	4a09      	ldr	r2, [pc, #36]	; (800a5b0 <pxCurrentTCBConst>)
 800a58c:	6811      	ldr	r1, [r2, #0]
 800a58e:	6808      	ldr	r0, [r1, #0]
 800a590:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a594:	f013 0f10 	tst.w	r3, #16
 800a598:	bf08      	it	eq
 800a59a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a59e:	f382 880b 	msr	PSPLIM, r2
 800a5a2:	f380 8809 	msr	PSP, r0
 800a5a6:	4718      	bx	r3
 800a5a8:	f3af 8000 	nop.w
 800a5ac:	f3af 8000 	nop.w

0800a5b0 <pxCurrentTCBConst>:
 800a5b0:	200006f8 	.word	0x200006f8
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
	...

0800a5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a5c0:	f01e 0f04 	tst.w	lr, #4
 800a5c4:	bf0c      	ite	eq
 800a5c6:	f3ef 8008 	mrseq	r0, MSP
 800a5ca:	f3ef 8009 	mrsne	r0, PSP
 800a5ce:	4904      	ldr	r1, [pc, #16]	; (800a5e0 <svchandler_address_const>)
 800a5d0:	4708      	bx	r1
 800a5d2:	bf00      	nop
 800a5d4:	f3af 8000 	nop.w
 800a5d8:	f3af 8000 	nop.w
 800a5dc:	f3af 8000 	nop.w

0800a5e0 <svchandler_address_const>:
 800a5e0:	0800a32d 	.word	0x0800a32d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop

0800a5e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a5f4:	f7fe fe6c 	bl	80092d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5f8:	4b4f      	ldr	r3, [pc, #316]	; (800a738 <pvPortMalloc+0x150>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a600:	f000 f8f8 	bl	800a7f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a604:	4b4d      	ldr	r3, [pc, #308]	; (800a73c <pvPortMalloc+0x154>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4013      	ands	r3, r2
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f040 8083 	bne.w	800a718 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d015      	beq.n	800a644 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800a618:	2208      	movs	r2, #8
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4413      	add	r3, r2
 800a61e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f003 0307 	and.w	r3, r3, #7
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00c      	beq.n	800a644 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f023 0307 	bic.w	r3, r3, #7
 800a630:	3308      	adds	r3, #8
 800a632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f003 0307 	and.w	r3, r3, #7
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d002      	beq.n	800a644 <pvPortMalloc+0x5c>
 800a63e:	f7ff ff6b 	bl	800a518 <ulSetInterruptMask>
 800a642:	e7fe      	b.n	800a642 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d066      	beq.n	800a718 <pvPortMalloc+0x130>
 800a64a:	4b3d      	ldr	r3, [pc, #244]	; (800a740 <pvPortMalloc+0x158>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	429a      	cmp	r2, r3
 800a652:	d861      	bhi.n	800a718 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a654:	4b3b      	ldr	r3, [pc, #236]	; (800a744 <pvPortMalloc+0x15c>)
 800a656:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a658:	4b3a      	ldr	r3, [pc, #232]	; (800a744 <pvPortMalloc+0x15c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a65e:	e004      	b.n	800a66a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	429a      	cmp	r2, r3
 800a672:	d903      	bls.n	800a67c <pvPortMalloc+0x94>
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1f1      	bne.n	800a660 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a67c:	4b2e      	ldr	r3, [pc, #184]	; (800a738 <pvPortMalloc+0x150>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	429a      	cmp	r2, r3
 800a684:	d048      	beq.n	800a718 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2208      	movs	r2, #8
 800a68c:	4413      	add	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	2308      	movs	r3, #8
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d917      	bls.n	800a6d8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <pvPortMalloc+0xd8>
 800a6ba:	f7ff ff2d 	bl	800a518 <ulSetInterruptMask>
 800a6be:	e7fe      	b.n	800a6be <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	1ad2      	subs	r2, r2, r3
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6d2:	68b8      	ldr	r0, [r7, #8]
 800a6d4:	f000 f8f0 	bl	800a8b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6d8:	4b19      	ldr	r3, [pc, #100]	; (800a740 <pvPortMalloc+0x158>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	4a17      	ldr	r2, [pc, #92]	; (800a740 <pvPortMalloc+0x158>)
 800a6e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6e6:	4b16      	ldr	r3, [pc, #88]	; (800a740 <pvPortMalloc+0x158>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	4b17      	ldr	r3, [pc, #92]	; (800a748 <pvPortMalloc+0x160>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d203      	bcs.n	800a6fa <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6f2:	4b13      	ldr	r3, [pc, #76]	; (800a740 <pvPortMalloc+0x158>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a14      	ldr	r2, [pc, #80]	; (800a748 <pvPortMalloc+0x160>)
 800a6f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <pvPortMalloc+0x154>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	431a      	orrs	r2, r3
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2200      	movs	r2, #0
 800a70c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a70e:	4b0f      	ldr	r3, [pc, #60]	; (800a74c <pvPortMalloc+0x164>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3301      	adds	r3, #1
 800a714:	4a0d      	ldr	r2, [pc, #52]	; (800a74c <pvPortMalloc+0x164>)
 800a716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a718:	f7fe fde8 	bl	80092ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f003 0307 	and.w	r3, r3, #7
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <pvPortMalloc+0x144>
 800a726:	f7ff fef7 	bl	800a518 <ulSetInterruptMask>
 800a72a:	e7fe      	b.n	800a72a <pvPortMalloc+0x142>
	return pvReturn;
 800a72c:	68fb      	ldr	r3, [r7, #12]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	200035c4 	.word	0x200035c4
 800a73c:	200035d8 	.word	0x200035d8
 800a740:	200035c8 	.word	0x200035c8
 800a744:	200035bc 	.word	0x200035bc
 800a748:	200035cc 	.word	0x200035cc
 800a74c:	200035d0 	.word	0x200035d0

0800a750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d03d      	beq.n	800a7de <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a762:	2308      	movs	r3, #8
 800a764:	425b      	negs	r3, r3
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4413      	add	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	4b1c      	ldr	r3, [pc, #112]	; (800a7e8 <vPortFree+0x98>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4013      	ands	r3, r2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <vPortFree+0x34>
 800a77e:	f7ff fecb 	bl	800a518 <ulSetInterruptMask>
 800a782:	e7fe      	b.n	800a782 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <vPortFree+0x42>
 800a78c:	f7ff fec4 	bl	800a518 <ulSetInterruptMask>
 800a790:	e7fe      	b.n	800a790 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <vPortFree+0x98>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4013      	ands	r3, r2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d01e      	beq.n	800a7de <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d11a      	bne.n	800a7de <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <vPortFree+0x98>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	43db      	mvns	r3, r3
 800a7b2:	401a      	ands	r2, r3
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7b8:	f7fe fd8a 	bl	80092d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	685a      	ldr	r2, [r3, #4]
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <vPortFree+0x9c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	4a09      	ldr	r2, [pc, #36]	; (800a7ec <vPortFree+0x9c>)
 800a7c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7ca:	68b8      	ldr	r0, [r7, #8]
 800a7cc:	f000 f874 	bl	800a8b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <vPortFree+0xa0>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	4a06      	ldr	r2, [pc, #24]	; (800a7f0 <vPortFree+0xa0>)
 800a7d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7da:	f7fe fd87 	bl	80092ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7de:	bf00      	nop
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	200035d8 	.word	0x200035d8
 800a7ec:	200035c8 	.word	0x200035c8
 800a7f0:	200035d4 	.word	0x200035d4

0800a7f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7fa:	f642 0390 	movw	r3, #10384	; 0x2890
 800a7fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a800:	4b27      	ldr	r3, [pc, #156]	; (800a8a0 <prvHeapInit+0xac>)
 800a802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f003 0307 	and.w	r3, r3, #7
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00c      	beq.n	800a828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3307      	adds	r3, #7
 800a812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f023 0307 	bic.w	r3, r3, #7
 800a81a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	4a1f      	ldr	r2, [pc, #124]	; (800a8a0 <prvHeapInit+0xac>)
 800a824:	4413      	add	r3, r2
 800a826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a82c:	4a1d      	ldr	r2, [pc, #116]	; (800a8a4 <prvHeapInit+0xb0>)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a832:	4b1c      	ldr	r3, [pc, #112]	; (800a8a4 <prvHeapInit+0xb0>)
 800a834:	2200      	movs	r2, #0
 800a836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	4413      	add	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a840:	2208      	movs	r2, #8
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f023 0307 	bic.w	r3, r3, #7
 800a84e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4a15      	ldr	r2, [pc, #84]	; (800a8a8 <prvHeapInit+0xb4>)
 800a854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a856:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <prvHeapInit+0xb4>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2200      	movs	r2, #0
 800a85c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a85e:	4b12      	ldr	r3, [pc, #72]	; (800a8a8 <prvHeapInit+0xb4>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2200      	movs	r2, #0
 800a864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a874:	4b0c      	ldr	r3, [pc, #48]	; (800a8a8 <prvHeapInit+0xb4>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	4a0a      	ldr	r2, [pc, #40]	; (800a8ac <prvHeapInit+0xb8>)
 800a882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	4a09      	ldr	r2, [pc, #36]	; (800a8b0 <prvHeapInit+0xbc>)
 800a88a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a88c:	4b09      	ldr	r3, [pc, #36]	; (800a8b4 <prvHeapInit+0xc0>)
 800a88e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a892:	601a      	str	r2, [r3, #0]
}
 800a894:	bf00      	nop
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	20000d2c 	.word	0x20000d2c
 800a8a4:	200035bc 	.word	0x200035bc
 800a8a8:	200035c4 	.word	0x200035c4
 800a8ac:	200035cc 	.word	0x200035cc
 800a8b0:	200035c8 	.word	0x200035c8
 800a8b4:	200035d8 	.word	0x200035d8

0800a8b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8c0:	4b28      	ldr	r3, [pc, #160]	; (800a964 <prvInsertBlockIntoFreeList+0xac>)
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	e002      	b.n	800a8cc <prvInsertBlockIntoFreeList+0x14>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d8f7      	bhi.n	800a8c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d108      	bne.n	800a8fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	441a      	add	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	441a      	add	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d118      	bne.n	800a940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	4b15      	ldr	r3, [pc, #84]	; (800a968 <prvInsertBlockIntoFreeList+0xb0>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	429a      	cmp	r2, r3
 800a918:	d00d      	beq.n	800a936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	441a      	add	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	e008      	b.n	800a948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a936:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <prvInsertBlockIntoFreeList+0xb0>)
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	e003      	b.n	800a948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d002      	beq.n	800a956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a956:	bf00      	nop
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	200035bc 	.word	0x200035bc
 800a968:	200035c4 	.word	0x200035c4

0800a96c <__libc_init_array>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	4d0d      	ldr	r5, [pc, #52]	; (800a9a4 <__libc_init_array+0x38>)
 800a970:	2600      	movs	r6, #0
 800a972:	4c0d      	ldr	r4, [pc, #52]	; (800a9a8 <__libc_init_array+0x3c>)
 800a974:	1b64      	subs	r4, r4, r5
 800a976:	10a4      	asrs	r4, r4, #2
 800a978:	42a6      	cmp	r6, r4
 800a97a:	d109      	bne.n	800a990 <__libc_init_array+0x24>
 800a97c:	4d0b      	ldr	r5, [pc, #44]	; (800a9ac <__libc_init_array+0x40>)
 800a97e:	2600      	movs	r6, #0
 800a980:	4c0b      	ldr	r4, [pc, #44]	; (800a9b0 <__libc_init_array+0x44>)
 800a982:	f000 f82d 	bl	800a9e0 <_init>
 800a986:	1b64      	subs	r4, r4, r5
 800a988:	10a4      	asrs	r4, r4, #2
 800a98a:	42a6      	cmp	r6, r4
 800a98c:	d105      	bne.n	800a99a <__libc_init_array+0x2e>
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	f855 3b04 	ldr.w	r3, [r5], #4
 800a994:	3601      	adds	r6, #1
 800a996:	4798      	blx	r3
 800a998:	e7ee      	b.n	800a978 <__libc_init_array+0xc>
 800a99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a99e:	3601      	adds	r6, #1
 800a9a0:	4798      	blx	r3
 800a9a2:	e7f2      	b.n	800a98a <__libc_init_array+0x1e>
 800a9a4:	0800ab04 	.word	0x0800ab04
 800a9a8:	0800ab04 	.word	0x0800ab04
 800a9ac:	0800ab04 	.word	0x0800ab04
 800a9b0:	0800ab08 	.word	0x0800ab08

0800a9b4 <memcpy>:
 800a9b4:	440a      	add	r2, r1
 800a9b6:	1e43      	subs	r3, r0, #1
 800a9b8:	4291      	cmp	r1, r2
 800a9ba:	d100      	bne.n	800a9be <memcpy+0xa>
 800a9bc:	4770      	bx	lr
 800a9be:	b510      	push	{r4, lr}
 800a9c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c4:	4291      	cmp	r1, r2
 800a9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ca:	d1f9      	bne.n	800a9c0 <memcpy+0xc>
 800a9cc:	bd10      	pop	{r4, pc}

0800a9ce <memset>:
 800a9ce:	4402      	add	r2, r0
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d100      	bne.n	800a9d8 <memset+0xa>
 800a9d6:	4770      	bx	lr
 800a9d8:	f803 1b01 	strb.w	r1, [r3], #1
 800a9dc:	e7f9      	b.n	800a9d2 <memset+0x4>
	...

0800a9e0 <_init>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	bf00      	nop
 800a9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e6:	bc08      	pop	{r3}
 800a9e8:	469e      	mov	lr, r3
 800a9ea:	4770      	bx	lr

0800a9ec <_fini>:
 800a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ee:	bf00      	nop
 800a9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f2:	bc08      	pop	{r3}
 800a9f4:	469e      	mov	lr, r3
 800a9f6:	4770      	bx	lr
