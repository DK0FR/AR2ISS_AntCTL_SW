
AR2ISS_AntCTL_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800c2fc  0800c2fc  0001c2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4b4  0800c4b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4b4  0800c4b4  0001c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4bc  0800c4bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c4bc  0800c4bc  0001c4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c4c4  0800c4c4  0001c4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c4cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007868  20000074  0800c540  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200078dc  0800c540  000278dc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003380b  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005db3  00000000  00000000  000538b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f0  00000000  00000000  00059668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002278  00000000  00000000  0005bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032cea  00000000  00000000  0005ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bb37  00000000  00000000  00090aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012ec0f  00000000  00000000  000bc5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001eb200  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f00  00000000  00000000  001eb254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c2e4 	.word	0x0800c2e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	0800c2e4 	.word	0x0800c2e4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b980 	b.w	8000568 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000284:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000286:	4604      	mov	r4, r0
 8000288:	4688      	mov	r8, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	f040 8084 	bne.w	8000398 <__udivmoddi4+0x118>
 8000290:	428a      	cmp	r2, r1
 8000292:	4617      	mov	r7, r2
 8000294:	d943      	bls.n	800031e <__udivmoddi4+0x9e>
 8000296:	fab2 f282 	clz	r2, r2
 800029a:	b142      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029c:	f1c2 0020 	rsb	r0, r2, #32
 80002a0:	4091      	lsls	r1, r2
 80002a2:	4097      	lsls	r7, r2
 80002a4:	fa24 f000 	lsr.w	r0, r4, r0
 80002a8:	4094      	lsls	r4, r2
 80002aa:	ea40 0801 	orr.w	r8, r0, r1
 80002ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fa1f fe87 	uxth.w	lr, r7
 80002b8:	fbb8 f6fc 	udiv	r6, r8, ip
 80002bc:	fb0c 8116 	mls	r1, ip, r6, r8
 80002c0:	fb06 f00e 	mul.w	r0, r6, lr
 80002c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c8:	4298      	cmp	r0, r3
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0x5c>
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	f106 31ff 	add.w	r1, r6, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x5a>
 80002d4:	4298      	cmp	r0, r3
 80002d6:	f200 8131 	bhi.w	800053c <__udivmoddi4+0x2bc>
 80002da:	460e      	mov	r6, r1
 80002dc:	1a19      	subs	r1, r3, r0
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fc 	udiv	r0, r1, ip
 80002e4:	fb0c 1110 	mls	r1, ip, r0, r1
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x84>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x82>
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	f200 811a 	bhi.w	8000536 <__udivmoddi4+0x2b6>
 8000302:	4618      	mov	r0, r3
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0x98>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xa2>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d152      	bne.n	80003d0 <__udivmoddi4+0x150>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	0c21      	lsrs	r1, r4, #16
 8000338:	fbb3 fcfe 	udiv	ip, r3, lr
 800033c:	fb0e 301c 	mls	r0, lr, ip, r3
 8000340:	fb08 f90c 	mul.w	r9, r8, ip
 8000344:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000348:	4589      	cmp	r9, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000352:	bf2c      	ite	cs
 8000354:	2001      	movcs	r0, #1
 8000356:	2000      	movcc	r0, #0
 8000358:	4589      	cmp	r9, r1
 800035a:	d902      	bls.n	8000362 <__udivmoddi4+0xe2>
 800035c:	2800      	cmp	r0, #0
 800035e:	f000 80f0 	beq.w	8000542 <__udivmoddi4+0x2c2>
 8000362:	469c      	mov	ip, r3
 8000364:	eba1 0109 	sub.w	r1, r1, r9
 8000368:	b2a3      	uxth	r3, r4
 800036a:	fbb1 f0fe 	udiv	r0, r1, lr
 800036e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000372:	fb08 f800 	mul.w	r8, r8, r0
 8000376:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800037a:	45a0      	cmp	r8, r4
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x10e>
 800037e:	193c      	adds	r4, r7, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x10c>
 8000386:	45a0      	cmp	r8, r4
 8000388:	f200 80d2 	bhi.w	8000530 <__udivmoddi4+0x2b0>
 800038c:	4618      	mov	r0, r3
 800038e:	eba4 0408 	sub.w	r4, r4, r8
 8000392:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000396:	e7ba      	b.n	800030e <__udivmoddi4+0x8e>
 8000398:	428b      	cmp	r3, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x130>
 800039c:	2d00      	cmp	r5, #0
 800039e:	f000 80be 	beq.w	800051e <__udivmoddi4+0x29e>
 80003a2:	2600      	movs	r6, #0
 80003a4:	e9c5 0100 	strd	r0, r1, [r5]
 80003a8:	4630      	mov	r0, r6
 80003aa:	4631      	mov	r1, r6
 80003ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003b0:	fab3 f683 	clz	r6, r3
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d14d      	bne.n	8000454 <__udivmoddi4+0x1d4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	f0c0 80b3 	bcc.w	8000524 <__udivmoddi4+0x2a4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f240 80b0 	bls.w	8000524 <__udivmoddi4+0x2a4>
 80003c4:	4630      	mov	r0, r6
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	d0a6      	beq.n	8000318 <__udivmoddi4+0x98>
 80003ca:	e9c5 4800 	strd	r4, r8, [r5]
 80003ce:	e7a3      	b.n	8000318 <__udivmoddi4+0x98>
 80003d0:	4097      	lsls	r7, r2
 80003d2:	f1c2 0320 	rsb	r3, r2, #32
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	fa24 f303 	lsr.w	r3, r4, r3
 80003e4:	fa1f f887 	uxth.w	r8, r7
 80003e8:	4094      	lsls	r4, r2
 80003ea:	4303      	orrs	r3, r0
 80003ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f0:	0c1e      	lsrs	r6, r3, #16
 80003f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f6:	fb00 fc08 	mul.w	ip, r0, r8
 80003fa:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80003fe:	458c      	cmp	ip, r1
 8000400:	d90e      	bls.n	8000420 <__udivmoddi4+0x1a0>
 8000402:	1879      	adds	r1, r7, r1
 8000404:	f100 36ff 	add.w	r6, r0, #4294967295
 8000408:	bf2c      	ite	cs
 800040a:	f04f 0901 	movcs.w	r9, #1
 800040e:	f04f 0900 	movcc.w	r9, #0
 8000412:	458c      	cmp	ip, r1
 8000414:	d903      	bls.n	800041e <__udivmoddi4+0x19e>
 8000416:	f1b9 0f00 	cmp.w	r9, #0
 800041a:	f000 8096 	beq.w	800054a <__udivmoddi4+0x2ca>
 800041e:	4630      	mov	r0, r6
 8000420:	eba1 010c 	sub.w	r1, r1, ip
 8000424:	b29b      	uxth	r3, r3
 8000426:	fbb1 f6fe 	udiv	r6, r1, lr
 800042a:	fb0e 1116 	mls	r1, lr, r6, r1
 800042e:	fb06 fc08 	mul.w	ip, r6, r8
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	458c      	cmp	ip, r1
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1ca>
 800043a:	1879      	adds	r1, r7, r1
 800043c:	f106 33ff 	add.w	r3, r6, #4294967295
 8000440:	d202      	bcs.n	8000448 <__udivmoddi4+0x1c8>
 8000442:	458c      	cmp	ip, r1
 8000444:	f200 8088 	bhi.w	8000558 <__udivmoddi4+0x2d8>
 8000448:	461e      	mov	r6, r3
 800044a:	eba1 030c 	sub.w	r3, r1, ip
 800044e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000452:	e770      	b.n	8000336 <__udivmoddi4+0xb6>
 8000454:	f1c6 0720 	rsb	r7, r6, #32
 8000458:	fa03 f406 	lsl.w	r4, r3, r6
 800045c:	fa02 fc06 	lsl.w	ip, r2, r6
 8000460:	fa01 fe06 	lsl.w	lr, r1, r6
 8000464:	40fa      	lsrs	r2, r7
 8000466:	fa20 f807 	lsr.w	r8, r0, r7
 800046a:	40f9      	lsrs	r1, r7
 800046c:	fa00 f306 	lsl.w	r3, r0, r6
 8000470:	4322      	orrs	r2, r4
 8000472:	ea48 040e 	orr.w	r4, r8, lr
 8000476:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800047a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047e:	fa1f f982 	uxth.w	r9, r2
 8000482:	fbb1 faf8 	udiv	sl, r1, r8
 8000486:	fb08 111a 	mls	r1, r8, sl, r1
 800048a:	fb0a f009 	mul.w	r0, sl, r9
 800048e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000492:	4570      	cmp	r0, lr
 8000494:	d90e      	bls.n	80004b4 <__udivmoddi4+0x234>
 8000496:	eb12 0e0e 	adds.w	lr, r2, lr
 800049a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800049e:	bf2c      	ite	cs
 80004a0:	f04f 0b01 	movcs.w	fp, #1
 80004a4:	f04f 0b00 	movcc.w	fp, #0
 80004a8:	4570      	cmp	r0, lr
 80004aa:	d902      	bls.n	80004b2 <__udivmoddi4+0x232>
 80004ac:	f1bb 0f00 	cmp.w	fp, #0
 80004b0:	d04e      	beq.n	8000550 <__udivmoddi4+0x2d0>
 80004b2:	468a      	mov	sl, r1
 80004b4:	ebae 0e00 	sub.w	lr, lr, r0
 80004b8:	b2a4      	uxth	r4, r4
 80004ba:	fbbe f0f8 	udiv	r0, lr, r8
 80004be:	fb08 ee10 	mls	lr, r8, r0, lr
 80004c2:	fb00 f909 	mul.w	r9, r0, r9
 80004c6:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004ca:	45f1      	cmp	r9, lr
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x25e>
 80004ce:	eb12 0e0e 	adds.w	lr, r2, lr
 80004d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d6:	d201      	bcs.n	80004dc <__udivmoddi4+0x25c>
 80004d8:	45f1      	cmp	r9, lr
 80004da:	d840      	bhi.n	800055e <__udivmoddi4+0x2de>
 80004dc:	4608      	mov	r0, r1
 80004de:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80004e2:	ebae 0e09 	sub.w	lr, lr, r9
 80004e6:	fba0 890c 	umull	r8, r9, r0, ip
 80004ea:	45ce      	cmp	lr, r9
 80004ec:	4641      	mov	r1, r8
 80004ee:	464c      	mov	r4, r9
 80004f0:	d302      	bcc.n	80004f8 <__udivmoddi4+0x278>
 80004f2:	d106      	bne.n	8000502 <__udivmoddi4+0x282>
 80004f4:	4543      	cmp	r3, r8
 80004f6:	d204      	bcs.n	8000502 <__udivmoddi4+0x282>
 80004f8:	3801      	subs	r0, #1
 80004fa:	ebb8 010c 	subs.w	r1, r8, ip
 80004fe:	eb69 0402 	sbc.w	r4, r9, r2
 8000502:	b37d      	cbz	r5, 8000564 <__udivmoddi4+0x2e4>
 8000504:	1a5a      	subs	r2, r3, r1
 8000506:	eb6e 0e04 	sbc.w	lr, lr, r4
 800050a:	40f2      	lsrs	r2, r6
 800050c:	fa0e f707 	lsl.w	r7, lr, r7
 8000510:	fa2e f306 	lsr.w	r3, lr, r6
 8000514:	2600      	movs	r6, #0
 8000516:	4317      	orrs	r7, r2
 8000518:	e9c5 7300 	strd	r7, r3, [r5]
 800051c:	e6fc      	b.n	8000318 <__udivmoddi4+0x98>
 800051e:	462e      	mov	r6, r5
 8000520:	4628      	mov	r0, r5
 8000522:	e6f9      	b.n	8000318 <__udivmoddi4+0x98>
 8000524:	1a84      	subs	r4, r0, r2
 8000526:	eb61 0103 	sbc.w	r1, r1, r3
 800052a:	2001      	movs	r0, #1
 800052c:	4688      	mov	r8, r1
 800052e:	e74a      	b.n	80003c6 <__udivmoddi4+0x146>
 8000530:	3802      	subs	r0, #2
 8000532:	443c      	add	r4, r7
 8000534:	e72b      	b.n	800038e <__udivmoddi4+0x10e>
 8000536:	3802      	subs	r0, #2
 8000538:	443c      	add	r4, r7
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x84>
 800053c:	3e02      	subs	r6, #2
 800053e:	443b      	add	r3, r7
 8000540:	e6cc      	b.n	80002dc <__udivmoddi4+0x5c>
 8000542:	f1ac 0c02 	sub.w	ip, ip, #2
 8000546:	4439      	add	r1, r7
 8000548:	e70c      	b.n	8000364 <__udivmoddi4+0xe4>
 800054a:	3802      	subs	r0, #2
 800054c:	4439      	add	r1, r7
 800054e:	e767      	b.n	8000420 <__udivmoddi4+0x1a0>
 8000550:	f1aa 0a02 	sub.w	sl, sl, #2
 8000554:	4496      	add	lr, r2
 8000556:	e7ad      	b.n	80004b4 <__udivmoddi4+0x234>
 8000558:	3e02      	subs	r6, #2
 800055a:	4439      	add	r1, r7
 800055c:	e775      	b.n	800044a <__udivmoddi4+0x1ca>
 800055e:	3802      	subs	r0, #2
 8000560:	4496      	add	lr, r2
 8000562:	e7bc      	b.n	80004de <__udivmoddi4+0x25e>
 8000564:	462e      	mov	r6, r5
 8000566:	e6d7      	b.n	8000318 <__udivmoddi4+0x98>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
 800058c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <MX_ADC1_Init+0xe0>)
 8000590:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <MX_ADC1_Init+0xe4>)
 8000592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000594:	4b2d      	ldr	r3, [pc, #180]	; (800064c <MX_ADC1_Init+0xe0>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <MX_ADC1_Init+0xe0>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a0:	4b2a      	ldr	r3, [pc, #168]	; (800064c <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <MX_ADC1_Init+0xe0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <MX_ADC1_Init+0xe0>)
 80005ae:	2204      	movs	r2, #4
 80005b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <MX_ADC1_Init+0xe0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <MX_ADC1_Init+0xe0>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0xe0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0xe0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_ADC1_Init+0xe0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0xe0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0xe0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ee:	4817      	ldr	r0, [pc, #92]	; (800064c <MX_ADC1_Init+0xe0>)
 80005f0:	f001 ff0c 	bl	800240c <HAL_ADC_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005fa:	f000 fbe7 	bl	8000dcc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <MX_ADC1_Init+0xe0>)
 800060a:	f002 fc61 	bl	8002ed0 <HAL_ADCEx_MultiModeConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000614:	f000 fbda 	bl	8000dcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_ADC1_Init+0xe8>)
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061c:	2306      	movs	r3, #6
 800061e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000624:	237f      	movs	r3, #127	; 0x7f
 8000626:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000628:	2304      	movs	r3, #4
 800062a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0xe0>)
 8000636:	f002 f83b 	bl	80026b0 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000640:	f000 fbc4 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20007508 	.word	0x20007508
 8000650:	42028000 	.word	0x42028000
 8000654:	14f00020 	.word	0x14f00020

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b0ae      	sub	sp, #184	; 0xb8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	2294      	movs	r2, #148	; 0x94
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f00b f9e6 	bl	800ba4a <memset>
  if(adcHandle->Instance==ADC1)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d146      	bne.n	8000716 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000688:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800068c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800068e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSE;
 8000696:	2303      	movs	r3, #3
 8000698:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800069e:	2308      	movs	r3, #8
 80006a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4618      	mov	r0, r3
 80006ba:	f005 fb35 	bl	8005d28 <HAL_RCCEx_PeriphCLKConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006c4:	f000 fb82 	bl	8000dcc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <HAL_ADC_MspInit+0xcc>)
 80006ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <HAL_ADC_MspInit+0xcc>)
 80006ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_ADC_MspInit+0xcc>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_ADC_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <HAL_ADC_MspInit+0xcc>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_ADC_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80006f8:	233b      	movs	r3, #59	; 0x3b
 80006fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	2303      	movs	r3, #3
 8000700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_ADC_MspInit+0xd0>)
 8000712:	f003 fa07 	bl	8003b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000716:	bf00      	nop
 8000718:	37b8      	adds	r7, #184	; 0xb8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	42028000 	.word	0x42028000
 8000724:	40021000 	.word	0x40021000
 8000728:	42020000 	.word	0x42020000

0800072c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
return 0;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af04      	add	r7, sp, #16

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <MX_FREERTOS_Init+0x80>)
 8000754:	2100      	movs	r1, #0
 8000756:	481e      	ldr	r0, [pc, #120]	; (80007d0 <MX_FREERTOS_Init+0x84>)
 8000758:	f008 fd28 	bl	80091ac <osThreadNew>
 800075c:	4603      	mov	r3, r0
 800075e:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <MX_FREERTOS_Init+0x88>)
 8000760:	6013      	str	r3, [r2, #0]

  /* creation of pttControlTask */
  pttControlTaskHandle = osThreadNew(pttControl, NULL, &pttControlTask_attributes);
 8000762:	4a1d      	ldr	r2, [pc, #116]	; (80007d8 <MX_FREERTOS_Init+0x8c>)
 8000764:	2100      	movs	r1, #0
 8000766:	481d      	ldr	r0, [pc, #116]	; (80007dc <MX_FREERTOS_Init+0x90>)
 8000768:	f008 fd20 	bl	80091ac <osThreadNew>
 800076c:	4603      	mov	r3, r0
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <MX_FREERTOS_Init+0x94>)
 8000770:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */


  TaskParams paramRx = {
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_FREERTOS_Init+0x98>)
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077c:	6018      	str	r0, [r3, #0]
 800077e:	3304      	adds	r3, #4
 8000780:	8019      	strh	r1, [r3, #0]
	  .stackSize = 256,
	  .prio = 10,
	  .queueLength = 10,
	  .queueElementLength = 50
  };
  TaskParams paramTx = {
 8000782:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <MX_FREERTOS_Init+0x9c>)
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078c:	6018      	str	r0, [r3, #0]
 800078e:	3304      	adds	r3, #4
 8000790:	8019      	strh	r1, [r3, #0]
	  .stackSize = 256,
	  .prio = 10,
	  .queueLength = 10,
	  .queueElementLength = 0
  };
	LedsSetup leds = {
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_FREERTOS_Init+0xa0>)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	ca07      	ldmia	r2, {r0, r1, r2}
 8000798:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.RXPIN  =  RJ45_LED2_Pin,
		.TXPIN  =  Rj45_LED1_Pin,
	};


  RS485Uart.initTasks(paramRx, paramTx, &huart1,&rxCallback);
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_FREERTOS_Init+0xa4>)
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_FREERTOS_Init+0xa8>)
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	8abb      	ldrh	r3, [r7, #20]
 80007a6:	f8ad 3000 	strh.w	r3, [sp]
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	f107 0218 	add.w	r2, r7, #24
 80007b0:	ca06      	ldmia	r2, {r1, r2}
 80007b2:	4811      	ldr	r0, [pc, #68]	; (80007f8 <MX_FREERTOS_Init+0xac>)
 80007b4:	f001 f864 	bl	8001880 <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE>
  RS485Uart.setupLeds(leds);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007bc:	480e      	ldr	r0, [pc, #56]	; (80007f8 <MX_FREERTOS_Init+0xac>)
 80007be:	f001 f90b 	bl	80019d8 <_ZN10usartClass9setupLedsE9LedsSetup>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	0800c3a4 	.word	0x0800c3a4
 80007d0:	080007fd 	.word	0x080007fd
 80007d4:	200000cc 	.word	0x200000cc
 80007d8:	0800c3c8 	.word	0x0800c3c8
 80007dc:	08000829 	.word	0x08000829
 80007e0:	200000d0 	.word	0x200000d0
 80007e4:	0800c318 	.word	0x0800c318
 80007e8:	0800c320 	.word	0x0800c320
 80007ec:	0800c328 	.word	0x0800c328
 80007f0:	0800083d 	.word	0x0800083d
 80007f4:	200077f8 	.word	0x200077f8
 80007f8:	20000090 	.word	0x20000090

080007fc <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000804:	2001      	movs	r0, #1
 8000806:	f008 fd63 	bl	80092d0 <osDelay>
	  HAL_GPIO_TogglePin(AMP_GPIO_Port, AMP_Pin);
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <_Z16StartDefaultTaskPv+0x28>)
 800080e:	f003 fb21 	bl	8003e54 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000816:	f008 fd5b 	bl	80092d0 <osDelay>
//	  HAL_GPIO_TogglePin(RJ45_LED2_GPIO_Port, RJ45_LED2_Pin);
	  osDelay(500);
 800081a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081e:	f008 fd57 	bl	80092d0 <osDelay>
    osDelay(1);
 8000822:	e7ef      	b.n	8000804 <_Z16StartDefaultTaskPv+0x8>
 8000824:	42020400 	.word	0x42020400

08000828 <_Z10pttControlPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pttControl */
__weak void pttControl(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pttControl */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(500);
 8000830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000834:	f008 fd4c 	bl	80092d0 <osDelay>
 8000838:	e7fa      	b.n	8000830 <_Z10pttControlPv+0x8>
	...

0800083c <_Z10rxCallbackP20__UART_HandleTypeDefPht>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void  rxCallback( UART_HandleTypeDef * huart, uint8_t* data, uint16_t length){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(Rj45_LED1_GPIO_Port, Rj45_LED1_Pin);
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <_Z10rxCallbackP20__UART_HandleTypeDefPht+0x20>)
 8000850:	f003 fb00 	bl	8003e54 <HAL_GPIO_TogglePin>

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	42020800 	.word	0x42020800

08000860 <_Z41__static_initialization_and_destruction_0ii>:
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d107      	bne.n	8000880 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000876:	4293      	cmp	r3, r2
 8000878:	d102      	bne.n	8000880 <_Z41__static_initialization_and_destruction_0ii+0x20>
usartClass RS485Uart;
 800087a:	4809      	ldr	r0, [pc, #36]	; (80008a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800087c:	f000 ffd4 	bl	8001828 <_ZN10usartClassC1Ev>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d107      	bne.n	8000896 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088c:	4293      	cmp	r3, r2
 800088e:	d102      	bne.n	8000896 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000892:	f000 ffe5 	bl	8001860 <_ZN10usartClassD1Ev>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000090 	.word	0x20000090

080008a4 <_GLOBAL__sub_I_RS485Uart>:
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008ac:	2001      	movs	r0, #1
 80008ae:	f7ff ffd7 	bl	8000860 <_Z41__static_initialization_and_destruction_0ii>
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <_GLOBAL__sub_D_RS485Uart>:
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff ffcf 	bl	8000860 <_Z41__static_initialization_and_destruction_0ii>
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MX_CRC_Init+0x3c>)
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <MX_CRC_Init+0x40>)
 80008cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_CRC_Init+0x3c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_CRC_Init+0x3c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_CRC_Init+0x3c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_CRC_Init+0x3c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_CRC_Init+0x3c>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_CRC_Init+0x3c>)
 80008ee:	f002 fc73 	bl	80031d8 <HAL_CRC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008f8:	f000 fa68 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20007570 	.word	0x20007570
 8000904:	40023000 	.word	0x40023000

08000908 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_CRC_MspInit+0x38>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10b      	bne.n	8000932 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_CRC_MspInit+0x3c>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091e:	4a09      	ldr	r2, [pc, #36]	; (8000944 <HAL_CRC_MspInit+0x3c>)
 8000920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000924:	6493      	str	r3, [r2, #72]	; 0x48
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <HAL_CRC_MspInit+0x3c>)
 8000928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800092a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023000 	.word	0x40023000
 8000944:	40021000 	.word	0x40021000

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_DMA_Init+0x60>)
 8000950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <MX_DMA_Init+0x60>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6493      	str	r3, [r2, #72]	; 0x48
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_DMA_Init+0x60>)
 800095c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_DMA_Init+0x60>)
 8000968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_DMA_Init+0x60>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6493      	str	r3, [r2, #72]	; 0x48
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_DMA_Init+0x60>)
 8000974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2104      	movs	r1, #4
 8000982:	201d      	movs	r0, #29
 8000984:	f002 fc00 	bl	8003188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000988:	201d      	movs	r0, #29
 800098a:	f002 fc17 	bl	80031bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 4, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2104      	movs	r1, #4
 8000992:	201e      	movs	r0, #30
 8000994:	f002 fbf8 	bl	8003188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000998:	201e      	movs	r0, #30
 800099a:	f002 fc0f 	bl	80031bc <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a44      	ldr	r2, [pc, #272]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a3e      	ldr	r2, [pc, #248]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a38      	ldr	r2, [pc, #224]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a32      	ldr	r2, [pc, #200]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Rj45_LED1_Pin|RJ45_LED2_Pin|PreAmp_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a28:	482c      	ldr	r0, [pc, #176]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a2a:	f003 f9fb 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LDC_EN_Pin|LCD_SEL_Pin|ROT_UP_Pin|ROT_DOWN_Pin
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f647 0183 	movw	r1, #30851	; 0x7883
 8000a34:	482a      	ldr	r0, [pc, #168]	; (8000ae0 <MX_GPIO_Init+0x134>)
 8000a36:	f003 f9f5 	bl	8003e24 <HAL_GPIO_WritePin>
                          |ROT_LEFT_Pin|ROT_RIGHT_Pin|AMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay_SwitchB_Pin|Relay_SwitchA_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000a40:	4828      	ldr	r0, [pc, #160]	; (8000ae4 <MX_GPIO_Init+0x138>)
 8000a42:	f003 f9ef 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Rj45_LED1_Pin|RJ45_LED2_Pin|PreAmp_Pin;
 8000a46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481f      	ldr	r0, [pc, #124]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a60:	f003 f860 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PTT_Main_Pin|PTT_Sub_Pin;
 8000a64:	23c0      	movs	r3, #192	; 0xc0
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <MX_GPIO_Init+0x138>)
 8000a78:	f003 f854 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LDC_EN_Pin|LCD_SEL_Pin|ROT_UP_Pin|ROT_DOWN_Pin
 8000a7c:	f647 0383 	movw	r3, #30851	; 0x7883
 8000a80:	617b      	str	r3, [r7, #20]
                          |ROT_LEFT_Pin|ROT_RIGHT_Pin|AMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <MX_GPIO_Init+0x134>)
 8000a96:	f003 f845 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Relay_SwitchB_Pin|Relay_SwitchA_Pin;
 8000a9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_GPIO_Init+0x138>)
 8000ab4:	f003 f836 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Coax_NC_Pin|Coax_NO_Pin;
 8000ab8:	2330      	movs	r3, #48	; 0x30
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_GPIO_Init+0x134>)
 8000acc:	f003 f82a 	bl	8003b24 <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	42020800 	.word	0x42020800
 8000ae0:	42020400 	.word	0x42020400
 8000ae4:	42020000 	.word	0x42020000

08000ae8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <MX_I2C1_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <MX_I2C1_Init+0x7c>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b22:	480e      	ldr	r0, [pc, #56]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b24:	f003 f9b0 	bl	8003e88 <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b2e:	f000 f94d 	bl	8000dcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b36:	f003 ffce 	bl	8004ad6 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 f944 	bl	8000dcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b48:	f004 f810 	bl	8004b6c <HAL_I2CEx_ConfigDigitalFilter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b52:	f000 f93b 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200075fc 	.word	0x200075fc
 8000b60:	40005400 	.word	0x40005400
 8000b64:	009034b6 	.word	0x009034b6

08000b68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0ae      	sub	sp, #184	; 0xb8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2294      	movs	r2, #148	; 0x94
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f00a ff5e 	bl	800ba4a <memset>
  if(i2cHandle->Instance==I2C1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a42      	ldr	r2, [pc, #264]	; (8000c9c <HAL_I2C_MspInit+0x134>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d17d      	bne.n	8000c94 <HAL_I2C_MspInit+0x12c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b98:	2340      	movs	r3, #64	; 0x40
 8000b9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f005 f8bf 	bl	8005d28 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bb0:	f000 f90c 	bl	8000dcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <HAL_I2C_MspInit+0x138>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb8:	4a39      	ldr	r2, [pc, #228]	; (8000ca0 <HAL_I2C_MspInit+0x138>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <HAL_I2C_MspInit+0x138>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd4:	2312      	movs	r3, #18
 8000bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be6:	2304      	movs	r3, #4
 8000be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	482c      	ldr	r0, [pc, #176]	; (8000ca4 <HAL_I2C_MspInit+0x13c>)
 8000bf4:	f002 ff96 	bl	8003b24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <HAL_I2C_MspInit+0x138>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <HAL_I2C_MspInit+0x138>)
 8000bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c02:	6593      	str	r3, [r2, #88]	; 0x58
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_I2C_MspInit+0x138>)
 8000c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c12:	4a26      	ldr	r2, [pc, #152]	; (8000cac <HAL_I2C_MspInit+0x144>)
 8000c14:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c18:	2212      	movs	r2, #18
 8000c1a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c1e:	2210      	movs	r2, #16
 8000c20:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c46:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c48:	f002 fbb0 	bl	80033ac <HAL_DMA_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8000c52:	f000 f8bb 	bl	8000dcc <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_i2c1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000c56:	2110      	movs	r1, #16
 8000c58:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c5a:	f002 fe93 	bl	8003984 <HAL_DMA_ConfigChannelAttributes>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8000c64:	f000 f8b2 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c6c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_I2C_MspInit+0x140>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2104      	movs	r1, #4
 8000c78:	2037      	movs	r0, #55	; 0x37
 8000c7a:	f002 fa85 	bl	8003188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c7e:	2037      	movs	r0, #55	; 0x37
 8000c80:	f002 fa9c 	bl	80031bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 4, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2104      	movs	r1, #4
 8000c88:	2038      	movs	r0, #56	; 0x38
 8000c8a:	f002 fa7d 	bl	8003188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c8e:	2038      	movs	r0, #56	; 0x38
 8000c90:	f002 fa94 	bl	80031bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c94:	bf00      	nop
 8000c96:	37b8      	adds	r7, #184	; 0xb8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	42020400 	.word	0x42020400
 8000ca8:	20007594 	.word	0x20007594
 8000cac:	4002001c 	.word	0x4002001c

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb4:	f001 f95b 	bl	8001f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb8:	f000 f819 	bl	8000cee <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbc:	f7ff fe76 	bl	80009ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc0:	f7ff fe42 	bl	8000948 <MX_DMA_Init>
  MX_CRC_Init();
 8000cc4:	f7ff fdfe 	bl	80008c4 <MX_CRC_Init>
  MX_SPI2_Init();
 8000cc8:	f000 f886 	bl	8000dd8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000ccc:	f000 fcc6 	bl	800165c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000cd0:	f7ff fc4c 	bl	800056c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cd4:	f7ff ff08 	bl	8000ae8 <MX_I2C1_Init>
//  MX_ICACHE_Init();
  MX_TIM1_Init();
 8000cd8:	f000 fb40 	bl	800135c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cdc:	f000 fb98 	bl	8001410 <MX_TIM2_Init>
//  NVIC_PriorityGroupConfig(NVIC_PRIORITYGROUP_3);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ce0:	f008 fa1a 	bl	8009118 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ce4:	f7ff fd32 	bl	800074c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ce8:	f008 fa3a 	bl	8009160 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <main+0x3c>

08000cee <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b098      	sub	sp, #96	; 0x60
 8000cf2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf4:	f107 0318 	add.w	r3, r7, #24
 8000cf8:	2248      	movs	r2, #72	; 0x48
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00a fea4 	bl	800ba4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000d10:	2000      	movs	r0, #0
 8000d12:	f003 ff85 	bl	8004c20 <HAL_PWREx_ControlVoltageScaling>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000d26:	f000 f851 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d34:	2302      	movs	r3, #2
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000d40:	2332      	movs	r3, #50	; 0x32
 8000d42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d44:	2307      	movs	r3, #7
 8000d46:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 fff3 	bl	8004d40 <HAL_RCC_OscConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf14      	ite	ne
 8000d60:	2301      	movne	r3, #1
 8000d62:	2300      	moveq	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000d6a:	f000 f82f 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2303      	movs	r3, #3
 8000d74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2104      	movs	r1, #4
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 fcbc 	bl	8005704 <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8000d9c:	f000 f816 	bl	8000dcc <Error_Handler>
  }
}
 8000da0:	bf00      	nop
 8000da2:	3760      	adds	r7, #96	; 0x60
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dba:	f001 f8f3 	bl	8001fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40014800 	.word	0x40014800

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <Error_Handler+0x8>
	...

08000dd8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000dde:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <MX_SPI2_Init+0x78>)
 8000de0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000de4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000df2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000df6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e0e:	2210      	movs	r2, #16
 8000e10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e26:	2207      	movs	r2, #7
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e32:	2208      	movs	r2, #8
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_SPI2_Init+0x74>)
 8000e38:	f005 fc8c 	bl	8006754 <HAL_SPI_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e42:	f7ff ffc3 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20007648 	.word	0x20007648
 8000e50:	40003800 	.word	0x40003800

08000e54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a34      	ldr	r2, [pc, #208]	; (8000f44 <HAL_SPI_MspInit+0xf0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d162      	bne.n	8000f3c <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <HAL_SPI_MspInit+0xf4>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	4a33      	ldr	r2, [pc, #204]	; (8000f48 <HAL_SPI_MspInit+0xf4>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6593      	str	r3, [r2, #88]	; 0x58
 8000e82:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <HAL_SPI_MspInit+0xf4>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <HAL_SPI_MspInit+0xf4>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <HAL_SPI_MspInit+0xf4>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <HAL_SPI_MspInit+0xf4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000ea6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb8:	2305      	movs	r3, #5
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4822      	ldr	r0, [pc, #136]	; (8000f4c <HAL_SPI_MspInit+0xf8>)
 8000ec4:	f002 fe2e 	bl	8003b24 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000eca:	4a22      	ldr	r2, [pc, #136]	; (8000f54 <HAL_SPI_MspInit+0x100>)
 8000ecc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000ed0:	220e      	movs	r2, #14
 8000ed2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000ed6:	2210      	movs	r2, #16
 8000ed8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000f00:	f002 fa54 	bl	80033ac <HAL_DMA_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000f0a:	f7ff ff5f 	bl	8000dcc <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f0e:	2110      	movs	r1, #16
 8000f10:	480f      	ldr	r0, [pc, #60]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000f12:	f002 fd37 	bl	8003984 <HAL_DMA_ConfigChannelAttributes>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000f1c:	f7ff ff56 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_SPI_MspInit+0xfc>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2104      	movs	r1, #4
 8000f30:	203c      	movs	r0, #60	; 0x3c
 8000f32:	f002 f929 	bl	8003188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f36:	203c      	movs	r0, #60	; 0x3c
 8000f38:	f002 f940 	bl	80031bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	; 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40003800 	.word	0x40003800
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	42020400 	.word	0x42020400
 8000f50:	200076ac 	.word	0x200076ac
 8000f54:	40020008 	.word	0x40020008

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_MspInit+0x60>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <HAL_MspInit+0x60>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_MspInit+0x60>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_MspInit+0x60>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <HAL_MspInit+0x60>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6593      	str	r3, [r2, #88]	; 0x58
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_MspInit+0x60>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2107      	movs	r1, #7
 8000f92:	f06f 0001 	mvn.w	r0, #1
 8000f96:	f002 f8f7 	bl	8003188 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f9a:	f003 fe9d 	bl	8004cd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8000f9e:	2004      	movs	r0, #4
 8000fa0:	f001 f820 	bl	8001fe4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000fa4:	f001 f86e 	bl	8002084 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f001 f843 	bl	8002034 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2047      	movs	r0, #71	; 0x47
 8000fd2:	f002 f8d9 	bl	8003188 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000fd6:	2047      	movs	r0, #71	; 0x47
 8000fd8:	f002 f8f0 	bl	80031bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_InitTick+0x9c>)
 8000fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_InitTick+0x9c>)
 8000fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_InitTick+0x9c>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff4:	f107 0210 	add.w	r2, r7, #16
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fd82 	bl	8005b08 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001004:	f004 fd6c 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 8001008:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_InitTick+0xa0>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	3b01      	subs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_InitTick+0xa4>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_InitTick+0xa8>)
 800101c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_InitTick+0xa4>)
 8001020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001024:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_InitTick+0xa4>)
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_InitTick+0xa4>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_InitTick+0xa4>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <HAL_InitTick+0xa4>)
 800103a:	f005 fd4e 	bl	8006ada <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <HAL_InitTick+0xa4>)
 8001046:	f005 fda9 	bl	8006b9c <HAL_TIM_Base_Start_IT>
 800104a:	4603      	mov	r3, r0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3730      	adds	r7, #48	; 0x30
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000
 800105c:	431bde83 	.word	0x431bde83
 8001060:	20007714 	.word	0x20007714
 8001064:	40014800 	.word	0x40014800

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Channel1_IRQHandler+0x10>)
 800109a:	f002 fb65 	bl	8003768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200076ac 	.word	0x200076ac

080010a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA1_Channel2_IRQHandler+0x10>)
 80010ae:	f002 fb5b 	bl	8003768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20007594 	.word	0x20007594

080010bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <I2C1_EV_IRQHandler+0x10>)
 80010c2:	f002 ff70 	bl	8003fa6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200075fc 	.word	0x200075fc

080010d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <I2C1_ER_IRQHandler+0x10>)
 80010d6:	f002 ff80 	bl	8003fda <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200075fc 	.word	0x200075fc

080010e4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <SPI2_IRQHandler+0x10>)
 80010ea:	f005 fbd7 	bl	800689c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20007648 	.word	0x20007648

080010f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <USART1_IRQHandler+0x10>)
 80010fe:	f006 fe3d 	bl	8007d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200077f8 	.word	0x200077f8

0800110c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <TIM17_IRQHandler+0x10>)
 8001112:	f005 feb0 	bl	8006e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20007714 	.word	0x20007714

08001120 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
//	SEGGER_SYSVIEW_RecordEnterISR();
	 if(huart->Instance==USART3) // Is it the USB-Com port?
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_UART_RxCpltCallback+0x20>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d102      	bne.n	8001138 <HAL_UART_RxCpltCallback+0x18>
	  {
		 RS485Uart.rxCpltCallback();
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <HAL_UART_RxCpltCallback+0x24>)
 8001134:	f000 fe4a 	bl	8001dcc <_ZN10usartClass14rxCpltCallbackEv>
	  }
//	 SEGGER_SYSVIEW_RecordExitISR();
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40004800 	.word	0x40004800
 8001144:	20000090 	.word	0x20000090

08001148 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
//	SEGGER_SYSVIEW_RecordEnterISR();
	if(huart->Instance==USART3) // Is it the USB-Com port?
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_UART_TxCpltCallback+0x20>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d102      	bne.n	8001160 <HAL_UART_TxCpltCallback+0x18>
	{
		RS485Uart.txCpltCallback();
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <HAL_UART_TxCpltCallback+0x24>)
 800115c:	f000 fe66 	bl	8001e2c <_ZN10usartClass14txCpltCallbackEv>
	}
//	SEGGER_SYSVIEW_RecordExitISR();

}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40004800 	.word	0x40004800
 800116c:	20000090 	.word	0x20000090

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f00a fc14 	bl	800b9cc <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20030000 	.word	0x20030000
 80011d0:	00004000 	.word	0x00004000
 80011d4:	200000d4 	.word	0x200000d4
 80011d8:	200078e0 	.word	0x200078e0

080011dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001206:	4b4f      	ldr	r3, [pc, #316]	; (8001344 <SystemCoreClockUpdate+0x144>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d107      	bne.n	8001222 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001212:	4b4c      	ldr	r3, [pc, #304]	; (8001344 <SystemCoreClockUpdate+0x144>)
 8001214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e005      	b.n	800122e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001222:	4b48      	ldr	r3, [pc, #288]	; (8001344 <SystemCoreClockUpdate+0x144>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800122e:	4a46      	ldr	r2, [pc, #280]	; (8001348 <SystemCoreClockUpdate+0x148>)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <SystemCoreClockUpdate+0x144>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b0c      	cmp	r3, #12
 8001242:	d866      	bhi.n	8001312 <SystemCoreClockUpdate+0x112>
 8001244:	a201      	add	r2, pc, #4	; (adr r2, 800124c <SystemCoreClockUpdate+0x4c>)
 8001246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124a:	bf00      	nop
 800124c:	08001281 	.word	0x08001281
 8001250:	08001313 	.word	0x08001313
 8001254:	08001313 	.word	0x08001313
 8001258:	08001313 	.word	0x08001313
 800125c:	08001289 	.word	0x08001289
 8001260:	08001313 	.word	0x08001313
 8001264:	08001313 	.word	0x08001313
 8001268:	08001313 	.word	0x08001313
 800126c:	08001291 	.word	0x08001291
 8001270:	08001313 	.word	0x08001313
 8001274:	08001313 	.word	0x08001313
 8001278:	08001313 	.word	0x08001313
 800127c:	08001299 	.word	0x08001299
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001280:	4a32      	ldr	r2, [pc, #200]	; (800134c <SystemCoreClockUpdate+0x14c>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	6013      	str	r3, [r2, #0]
      break;
 8001286:	e048      	b.n	800131a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <SystemCoreClockUpdate+0x14c>)
 800128a:	4a31      	ldr	r2, [pc, #196]	; (8001350 <SystemCoreClockUpdate+0x150>)
 800128c:	601a      	str	r2, [r3, #0]
      break;
 800128e:	e044      	b.n	800131a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <SystemCoreClockUpdate+0x14c>)
 8001292:	4a30      	ldr	r2, [pc, #192]	; (8001354 <SystemCoreClockUpdate+0x154>)
 8001294:	601a      	str	r2, [r3, #0]
      break;
 8001296:	e040      	b.n	800131a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <SystemCoreClockUpdate+0x144>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SystemCoreClockUpdate+0x144>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	3301      	adds	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d003      	beq.n	80012be <SystemCoreClockUpdate+0xbe>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d006      	beq.n	80012ca <SystemCoreClockUpdate+0xca>
 80012bc:	e00b      	b.n	80012d6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80012be:	4a24      	ldr	r2, [pc, #144]	; (8001350 <SystemCoreClockUpdate+0x150>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	613b      	str	r3, [r7, #16]
          break;
 80012c8:	e00b      	b.n	80012e2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <SystemCoreClockUpdate+0x154>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	613b      	str	r3, [r7, #16]
          break;
 80012d4:	e005      	b.n	80012e2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	613b      	str	r3, [r7, #16]
          break;
 80012e0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <SystemCoreClockUpdate+0x144>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	fb02 f303 	mul.w	r3, r2, r3
 80012f2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <SystemCoreClockUpdate+0x144>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0e5b      	lsrs	r3, r3, #25
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	3301      	adds	r3, #1
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	fbb2 f3f3 	udiv	r3, r2, r3
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <SystemCoreClockUpdate+0x14c>)
 800130e:	6013      	str	r3, [r2, #0]
      break;
 8001310:	e003      	b.n	800131a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <SystemCoreClockUpdate+0x14c>)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	6013      	str	r3, [r2, #0]
      break;
 8001318:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <SystemCoreClockUpdate+0x144>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <SystemCoreClockUpdate+0x158>)
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <SystemCoreClockUpdate+0x14c>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemCoreClockUpdate+0x14c>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	0800c404 	.word	0x0800c404
 800134c:	20000000 	.word	0x20000000
 8001350:	00f42400 	.word	0x00f42400
 8001354:	007a1200 	.word	0x007a1200
 8001358:	0800c3ec 	.word	0x0800c3ec

0800135c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f00a fb6d 	bl	800ba4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <MX_TIM1_Init+0xac>)
 800137c:	4a23      	ldr	r2, [pc, #140]	; (800140c <MX_TIM1_Init+0xb0>)
 800137e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_TIM1_Init+0xac>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <MX_TIM1_Init+0xac>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM1_Init+0xac>)
 800138e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001392:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_TIM1_Init+0xac>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_TIM1_Init+0xac>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_TIM1_Init+0xac>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ae:	2301      	movs	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013be:	2301      	movs	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_TIM1_Init+0xac>)
 80013d2:	f005 fcaa 	bl	8006d2a <HAL_TIM_Encoder_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80013dc:	f7ff fcf6 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM1_Init+0xac>)
 80013f2:	f006 fb07 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013fc:	f7ff fce6 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20007760 	.word	0x20007760
 800140c:	40012c00 	.word	0x40012c00

08001410 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001422:	463b      	mov	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	615a      	str	r2, [r3, #20]
 8001432:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <MX_TIM2_Init+0xb0>)
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <MX_TIM2_Init+0xb0>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_TIM2_Init+0xb0>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_TIM2_Init+0xb0>)
 800144a:	f04f 32ff 	mov.w	r2, #4294967295
 800144e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_TIM2_Init+0xb0>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_TIM2_Init+0xb0>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800145c:	4818      	ldr	r0, [pc, #96]	; (80014c0 <MX_TIM2_Init+0xb0>)
 800145e:	f005 fc0d 	bl	8006c7c <HAL_TIM_PWM_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001468:	f7ff fcb0 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4811      	ldr	r0, [pc, #68]	; (80014c0 <MX_TIM2_Init+0xb0>)
 800147c:	f006 fac2 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001486:	f7ff fca1 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148a:	2360      	movs	r3, #96	; 0x60
 800148c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	4619      	mov	r1, r3
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <MX_TIM2_Init+0xb0>)
 80014a2:	f005 fe07 	bl	80070b4 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014ac:	f7ff fc8e 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <MX_TIM2_Init+0xb0>)
 80014b2:	f000 f869 	bl	8001588 <HAL_TIM_MspPostInit>

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200077ac 	.word	0x200077ac

080014c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_TIM_Encoder_MspInit+0x7c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d128      	bne.n	8001538 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_TIM_Encoder_MspInit+0x80>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <HAL_TIM_Encoder_MspInit+0x80>)
 80014ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f0:	6613      	str	r3, [r2, #96]	; 0x60
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_TIM_Encoder_MspInit+0x80>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_TIM_Encoder_MspInit+0x80>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_TIM_Encoder_MspInit+0x80>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_TIM_Encoder_MspInit+0x80>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001528:	2301      	movs	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_TIM_Encoder_MspInit+0x84>)
 8001534:	f002 faf6 	bl	8003b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40012c00 	.word	0x40012c00
 8001544:	40021000 	.word	0x40021000
 8001548:	42020000 	.word	0x42020000

0800154c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155c:	d10b      	bne.n	8001576 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_TIM_PWM_MspInit+0x38>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_TIM_PWM_MspInit+0x38>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6593      	str	r3, [r2, #88]	; 0x58
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_TIM_PWM_MspInit+0x38>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a8:	d11c      	bne.n	80015e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_TIM_MspPostInit+0x64>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_TIM_MspPostInit+0x64>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_TIM_MspPostInit+0x64>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	4619      	mov	r1, r3
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <HAL_TIM_MspPostInit+0x68>)
 80015e0:	f002 faa0 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	42020000 	.word	0x42020000

080015f4 <LL_USART_EnableRxTimeout>:
  * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	605a      	str	r2, [r3, #4]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_USART_SetRxTimeout>:
  * @param  USARTx USART Instance
  * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	615a      	str	r2, [r3, #20]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_USART_EnableIT_RTO>:
  * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <MX_USART1_UART_Init+0x90>)
 8001662:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <MX_USART1_UART_Init+0x94>)
 8001664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <MX_USART1_UART_Init+0x90>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_USART1_UART_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_USART1_UART_Init+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_USART1_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_USART1_UART_Init+0x90>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_USART1_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_USART1_UART_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_USART1_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_USART1_UART_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_USART1_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a4:	4811      	ldr	r0, [pc, #68]	; (80016ec <MX_USART1_UART_Init+0x90>)
 80016a6:	f006 fa53 	bl	8007b50 <HAL_UART_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016b0:	f7ff fb8c 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_USART1_UART_Init+0x90>)
 80016b8:	f007 fc20 	bl	8008efc <HAL_UARTEx_SetTxFifoThreshold>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016c2:	f7ff fb83 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4808      	ldr	r0, [pc, #32]	; (80016ec <MX_USART1_UART_Init+0x90>)
 80016ca:	f007 fc55 	bl	8008f78 <HAL_UARTEx_SetRxFifoThreshold>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016d4:	f7ff fb7a 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_USART1_UART_Init+0x90>)
 80016da:	f007 fbd6 	bl	8008e8a <HAL_UARTEx_DisableFifoMode>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f7ff fb72 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200077f8 	.word	0x200077f8
 80016f0:	40013800 	.word	0x40013800

080016f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b0b0      	sub	sp, #192	; 0xc0
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	2294      	movs	r2, #148	; 0x94
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f00a f998 	bl	800ba4a <memset>
  if(uartHandle->Instance==USART1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a3e      	ldr	r2, [pc, #248]	; (8001818 <HAL_UART_MspInit+0x124>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d174      	bne.n	800180e <HAL_UART_MspInit+0x11a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001728:	2300      	movs	r3, #0
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	4618      	mov	r0, r3
 8001732:	f004 faf9 	bl	8005d28 <HAL_RCCEx_PeriphCLKConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800173c:	f7ff fb46 	bl	8000dcc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001740:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_UART_MspInit+0x128>)
 8001742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001744:	4a35      	ldr	r2, [pc, #212]	; (800181c <HAL_UART_MspInit+0x128>)
 8001746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174a:	6613      	str	r3, [r2, #96]	; 0x60
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_UART_MspInit+0x128>)
 800174e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_UART_MspInit+0x128>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	4a2f      	ldr	r2, [pc, #188]	; (800181c <HAL_UART_MspInit+0x128>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_UART_MspInit+0x128>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_UART_MspInit+0x128>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	4a29      	ldr	r2, [pc, #164]	; (800181c <HAL_UART_MspInit+0x128>)
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_UART_MspInit+0x128>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a2:	2307      	movs	r3, #7
 80017a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017ac:	4619      	mov	r1, r3
 80017ae:	481c      	ldr	r0, [pc, #112]	; (8001820 <HAL_UART_MspInit+0x12c>)
 80017b0:	f002 f9b8 	bl	8003b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017b4:	2340      	movs	r3, #64	; 0x40
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017cc:	2307      	movs	r3, #7
 80017ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017d6:	4619      	mov	r1, r3
 80017d8:	4812      	ldr	r0, [pc, #72]	; (8001824 <HAL_UART_MspInit+0x130>)
 80017da:	f002 f9a3 	bl	8003b24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2104      	movs	r1, #4
 80017e2:	203d      	movs	r0, #61	; 0x3d
 80017e4:	f001 fcd0 	bl	8003188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017e8:	203d      	movs	r0, #61	; 0x3d
 80017ea:	f001 fce7 	bl	80031bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    LL_USART_EnableRxTimeout(uartHandle->Instance);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fefe 	bl	80015f4 <LL_USART_EnableRxTimeout>
    LL_USART_SetRxTimeout(uartHandle->Instance, 0xFF);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	21ff      	movs	r1, #255	; 0xff
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff08 	bl	8001614 <LL_USART_SetRxTimeout>
    LL_USART_EnableIT_RTO(uartHandle->Instance);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff16 	bl	800163a <LL_USART_EnableIT_RTO>

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	37c0      	adds	r7, #192	; 0xc0
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40013800 	.word	0x40013800
 800181c:	40021000 	.word	0x40021000
 8001820:	42020000 	.word	0x42020000
 8001824:	42020400 	.word	0x42020400

08001828 <_ZN10usartClassC1Ev>:


void uartName(UART_HandleTypeDef *handle, uint8_t* string, uint8_t size);


usartClass::usartClass():m_huart(NULL),m_hRxQueue(NULL),m_hRxTask(NULL),m_hTxTask(NULL){
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <_ZN10usartClassC1Ev+0x34>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	639a      	str	r2, [r3, #56]	; 0x38
//	m_hTxQueue = NULL;
//	m_hRxTask = NULL;
//	m_hRxTask = NULL;


}
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	0800c44c 	.word	0x0800c44c

08001860 <_ZN10usartClassD1Ev>:


usartClass::~usartClass(){
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <_ZN10usartClassD1Ev+0x1c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	601a      	str	r2, [r3, #0]

}
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	0800c44c 	.word	0x0800c44c

08001880 <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE>:

void usartClass::initTasks(TaskParams rxTask, TaskParams txTask, UART_HandleTypeDef *huart, void (*rxCallback)(UART_HandleTypeDef*, uint8_t*, uint16_t)){
 8001880:	b082      	sub	sp, #8
 8001882:	b580      	push	{r7, lr}
 8001884:	b08e      	sub	sp, #56	; 0x38
 8001886:	af02      	add	r7, sp, #8
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	1d38      	adds	r0, r7, #4
 800188c:	e880 0006 	stmia.w	r0, {r1, r2}
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c


	m_huart = huart;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001896:	639a      	str	r2, [r3, #56]	; 0x38
	uint8_t nameBuffer[20];
	uint8_t tempBuffer[8];
	uartName(m_huart,tempBuffer,20);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189c:	f107 0114 	add.w	r1, r7, #20
 80018a0:	2214      	movs	r2, #20
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fae0 	bl	8001e68 <_Z8uartNameP20__UART_HandleTypeDefPhh>
	m_LedsOn = false;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	m_TxTaskCallback = rxCallback;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34

	m_txTaskParam = txTask;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3326      	adds	r3, #38	; 0x26
 80018ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018be:	6810      	ldr	r0, [r2, #0]
 80018c0:	6018      	str	r0, [r3, #0]
 80018c2:	8892      	ldrh	r2, [r2, #4]
 80018c4:	809a      	strh	r2, [r3, #4]
	m_rxTaskParam = rxTask;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	332c      	adds	r3, #44	; 0x2c
 80018ca:	1d3a      	adds	r2, r7, #4
 80018cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d0:	6018      	str	r0, [r3, #0]
 80018d2:	3304      	adds	r3, #4
 80018d4:	8019      	strh	r1, [r3, #0]

	/* create queues. either with dynamic memory or static memory*/

	if(m_txTaskParam.queueElementLength == 0){
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE+0x74>
		m_hTxQueue = xQueueCreate(txTask.queueLength,sizeof(UartHeapStruct));
 80018de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018e2:	2200      	movs	r2, #0
 80018e4:	2108      	movs	r1, #8
 80018e6:	4618      	mov	r0, r3
 80018e8:	f007 fe9e 	bl	8009628 <xQueueGenericCreate>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	e00b      	b.n	800190c <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE+0x8c>
	} else {
		m_hTxQueue = xQueueCreate(txTask.queueLength,txTask.queueElementLength*sizeof(uint8_t));
 80018f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018f8:	4618      	mov	r0, r3
 80018fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018fe:	2200      	movs	r2, #0
 8001900:	4619      	mov	r1, r3
 8001902:	f007 fe91 	bl	8009628 <xQueueGenericCreate>
 8001906:	4602      	mov	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	611a      	str	r2, [r3, #16]
	}
	m_hRxQueue = xQueueCreate(rxTask.queueLength,rxTask.queueElementLength*sizeof(uint8_t));
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4618      	mov	r0, r3
 8001910:	893b      	ldrh	r3, [r7, #8]
 8001912:	2200      	movs	r2, #0
 8001914:	4619      	mov	r1, r3
 8001916:	f007 fe87 	bl	8009628 <xQueueGenericCreate>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	615a      	str	r2, [r3, #20]



	snprintf((char*)nameBuffer,20,"%sTxQueue",(char*)tempBuffer);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	f107 001c 	add.w	r0, r7, #28
 8001928:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE+0x140>)
 800192a:	2114      	movs	r1, #20
 800192c:	f00a f950 	bl	800bbd0 <sniprintf>
	vQueueAddToRegistry(m_hTxQueue, (const char*) nameBuffer);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f107 021c 	add.w	r2, r7, #28
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f008 f9cc 	bl	8009cd8 <vQueueAddToRegistry>
	snprintf((char*)nameBuffer,20,"%sRxQueue",(char*)tempBuffer);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	f107 001c 	add.w	r0, r7, #28
 8001948:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE+0x144>)
 800194a:	2114      	movs	r1, #20
 800194c:	f00a f940 	bl	800bbd0 <sniprintf>
	vQueueAddToRegistry(m_hRxQueue, (const char*) nameBuffer);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f107 021c 	add.w	r2, r7, #28
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f008 f9bc 	bl	8009cd8 <vQueueAddToRegistry>

	snprintf((char*)nameBuffer,20,"%sTxTask",(char*)tempBuffer);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	f107 001c 	add.w	r0, r7, #28
 8001968:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE+0x148>)
 800196a:	2114      	movs	r1, #20
 800196c:	f00a f930 	bl	800bbd0 <sniprintf>
	xTaskCreate(this->TxTask, (const char*)nameBuffer, 2048, this, 5, NULL);
 8001970:	f107 011c 	add.w	r1, r7, #28
 8001974:	2300      	movs	r3, #0
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2305      	movs	r3, #5
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001982:	4812      	ldr	r0, [pc, #72]	; (80019cc <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE+0x14c>)
 8001984:	f008 fa4b 	bl	8009e1e <xTaskCreate>
	snprintf((char*)nameBuffer,20,"%sRxTask",(char*)tempBuffer);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	f107 001c 	add.w	r0, r7, #28
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE+0x150>)
 8001992:	2114      	movs	r1, #20
 8001994:	f00a f91c 	bl	800bbd0 <sniprintf>
	xTaskCreate(this->RxTask, (const char*)nameBuffer, 2048, this, 5, NULL);
 8001998:	f107 011c 	add.w	r1, r7, #28
 800199c:	2300      	movs	r3, #0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2305      	movs	r3, #5
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019aa:	480a      	ldr	r0, [pc, #40]	; (80019d4 <_ZN10usartClass9initTasksE10TaskParamsS0_P20__UART_HandleTypeDefPFvS2_PhtE+0x154>)
 80019ac:	f008 fa37 	bl	8009e1e <xTaskCreate>

}
 80019b0:	bf00      	nop
 80019b2:	3730      	adds	r7, #48	; 0x30
 80019b4:	46bd      	mov	sp, r7
 80019b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019ba:	b002      	add	sp, #8
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	0800c334 	.word	0x0800c334
 80019c4:	0800c340 	.word	0x0800c340
 80019c8:	0800c34c 	.word	0x0800c34c
 80019cc:	08001a07 	.word	0x08001a07
 80019d0:	0800c358 	.word	0x0800c358
 80019d4:	08001a1d 	.word	0x08001a1d

080019d8 <_ZN10usartClass9setupLedsE9LedsSetup>:



void usartClass::setupLeds(LedsSetup leds){
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	4638      	mov	r0, r7
 80019e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	m_LedsOn	= true;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_Leds 		= leds;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3318      	adds	r3, #24
 80019f2:	463a      	mov	r2, r7
 80019f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_ZN10usartClass6TxTaskEPv>:

void usartClass::TxTask(void *argument){
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  // start task
		static_cast<usartClass*>(argument)->TxTask();
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f812 	bl	8001a38 <_ZN10usartClass6TxTaskEv>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_ZN10usartClass6RxTaskEPv>:

void usartClass::RxTask(void *argument){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  // start task
  static_cast<usartClass*>(argument)->RxTask();
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3308      	adds	r3, #8
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_ZN10usartClass6TxTaskEv>:

void usartClass::TxTask(){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  // start task
	if(m_txTaskParam.queueElementLength == 0)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d106      	bne.n	8001a56 <_ZN10usartClass6TxTaskEv+0x1e>
		TxTaskDynamic();
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
	else
		TxTaskDynamic();
}
 8001a54:	e005      	b.n	8001a62 <_ZN10usartClass6TxTaskEv+0x2a>
		TxTaskDynamic();
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_ZN10usartClass13TxTaskDynamicEv>:

void usartClass::TxTaskDynamic(){
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
	uint8_t abc = 0xAF;
 8001a72:	23af      	movs	r3, #175	; 0xaf
 8001a74:	75fb      	strb	r3, [r7, #23]
	UartHeapStruct localTXData;
	localTXData.bufPtr = &abc;
 8001a76:	f107 0317 	add.w	r3, r7, #23
 8001a7a:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if (xQueueReceive(m_hTxQueue, (uint8_t*)&(localTXData), 750 /portTICK_PERIOD_MS)) {	 //wait for data
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	f107 010c 	add.w	r1, r7, #12
 8001a84:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f007 ff5c 	bl	8009946 <xQueueReceive>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d05d      	beq.n	8001b5a <_ZN10usartClass13TxTaskDynamicEv+0xf0>
			if(m_LedsOn)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d007      	beq.n	8001ab8 <_ZN10usartClass13TxTaskDynamicEv+0x4e>
				HAL_GPIO_WritePin(m_Leds.TXPORT, m_Leds.TXPIN, GPIO_PIN_SET);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69d8      	ldr	r0, [r3, #28]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f002 f9b6 	bl	8003e24 <HAL_GPIO_WritePin>

			if (localTXData.bufPtr[localTXData.size - 1] != '\n') {										 //add NL and CR if not already in string
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	8a7b      	ldrh	r3, [r7, #18]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b0a      	cmp	r3, #10
 8001ac4:	d00e      	beq.n	8001ae4 <_ZN10usartClass13TxTaskDynamicEv+0x7a>
				localTXData.bufPtr[localTXData.size] = '\r';
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8a7a      	ldrh	r2, [r7, #18]
 8001aca:	4413      	add	r3, r2
 8001acc:	220d      	movs	r2, #13
 8001ace:	701a      	strb	r2, [r3, #0]
				localTXData.bufPtr[localTXData.size + 1] = '\n';
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	8a7b      	ldrh	r3, [r7, #18]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	220a      	movs	r2, #10
 8001ada:	701a      	strb	r2, [r3, #0]
				localTXData.size += 2;
 8001adc:	8a7b      	ldrh	r3, [r7, #18]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	827b      	strh	r3, [r7, #18]
			}
			xTaskNotifyStateClear((TaskHandle_t)m_hTxTask);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f009 f81f 	bl	800ab2c <xTaskNotifyStateClear>
			HAL_UART_Transmit_DMA(m_huart, (uint8_t*) localTXData.bufPtr, localTXData.size);			 //send data via DMA to save CPU power
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	8a7a      	ldrh	r2, [r7, #18]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f006 f87a 	bl	8007bf0 <HAL_UART_Transmit_DMA>

			ulTaskNotifyTake( pdTRUE, 500 / portTICK_PERIOD_MS);                        //block UART till Data is send
 8001afc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b00:	2001      	movs	r0, #1
 8001b02:	f008 ff61 	bl	800a9c8 <ulTaskNotifyTake>
			//notification send from stm32f4xx_it.c  HAL_UART_TxCpltCallback(
			if (m_huart->gState != HAL_UART_STATE_READY)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <_ZN10usartClass13TxTaskDynamicEv+0xbc>
				m_huart->gState = HAL_UART_STATE_READY;							 //fix HAL bug, that blocks the UART indefinitely.
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	2220      	movs	r2, #32
 8001b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

			if(localTXData.usedInRTOS){
 8001b26:	7c3b      	ldrb	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <_ZN10usartClass13TxTaskDynamicEv+0xcc>
				vPortFree(localTXData.bufPtr); //delete[] localTXData.bufPtr when memory was allocated from task;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f009 fe3e 	bl	800b7b0 <vPortFree>
 8001b34:	e003      	b.n	8001b3e <_ZN10usartClass13TxTaskDynamicEv+0xd4>
			}else{
				free(localTXData.bufPtr); //delete[] localTXData.bufPtr when memory was allocated by interrupt;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f009 ff71 	bl	800ba20 <free>
			}
			if(m_LedsOn)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d099      	beq.n	8001a7c <_ZN10usartClass13TxTaskDynamicEv+0x12>
				HAL_GPIO_WritePin(m_Leds.TXPORT, m_Leds.TXPIN, GPIO_PIN_RESET);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69d8      	ldr	r0, [r3, #28]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001b50:	2200      	movs	r2, #0
 8001b52:	4619      	mov	r1, r3
 8001b54:	f002 f966 	bl	8003e24 <HAL_GPIO_WritePin>
 8001b58:	e790      	b.n	8001a7c <_ZN10usartClass13TxTaskDynamicEv+0x12>
		}else {
			if(m_LedsOn)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d08b      	beq.n	8001a7c <_ZN10usartClass13TxTaskDynamicEv+0x12>
				HAL_GPIO_TogglePin(m_Leds.TXPORT, m_Leds.TXPIN);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f002 f970 	bl	8003e54 <HAL_GPIO_TogglePin>
		if (xQueueReceive(m_hTxQueue, (uint8_t*)&(localTXData), 750 /portTICK_PERIOD_MS)) {	 //wait for data
 8001b74:	e782      	b.n	8001a7c <_ZN10usartClass13TxTaskDynamicEv+0x12>

08001b76 <_ZN10usartClass12TxTaskStaticEv>:
		}

	}
}

void usartClass::TxTaskStatic(){
 8001b76:	b590      	push	{r4, r7, lr}
 8001b78:	b087      	sub	sp, #28
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]

	uint8_t localTXBuff[m_txTaskParam.queueElementLength];
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	1e5c      	subs	r4, r3, #1
 8001b84:	613c      	str	r4, [r7, #16]
 8001b86:	4623      	mov	r3, r4
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f04f 0100 	mov.w	r1, #0
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	00cb      	lsls	r3, r1, #3
 8001b9a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b9e:	00c2      	lsls	r2, r0, #3
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	00cb      	lsls	r3, r1, #3
 8001bb4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001bb8:	00c2      	lsls	r2, r0, #3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	3307      	adds	r3, #7
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	ebad 0d03 	sub.w	sp, sp, r3
 8001bc8:	466b      	mov	r3, sp
 8001bca:	3300      	adds	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if (xQueueReceive(m_hTxQueue, localTXBuff, 750 /portTICK_PERIOD_MS)) {	 //wait for data
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	68f9      	ldr	r1, [r7, #12]
 8001bd4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f007 feb4 	bl	8009946 <xQueueReceive>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d05c      	beq.n	8001ca8 <_ZN10usartClass12TxTaskStaticEv+0x132>
			if(m_LedsOn)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <_ZN10usartClass12TxTaskStaticEv+0x92>
				HAL_GPIO_WritePin(m_Leds.TXPORT, m_Leds.TXPIN, GPIO_PIN_SET);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69d8      	ldr	r0, [r3, #28]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c00:	2201      	movs	r2, #1
 8001c02:	4619      	mov	r1, r3
 8001c04:	f002 f90e 	bl	8003e24 <HAL_GPIO_WritePin>
			uint16_t length = strlen((const char*)localTXBuff);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fb18 	bl	8000240 <strlen>
 8001c10:	4603      	mov	r3, r0
 8001c12:	82fb      	strh	r3, [r7, #22]
			if (localTXBuff[length - 1] != '\n') {										 //add NL and CR if not already in string
 8001c14:	8afb      	ldrh	r3, [r7, #22]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	2b0a      	cmp	r3, #10
 8001c1e:	d00d      	beq.n	8001c3c <_ZN10usartClass12TxTaskStaticEv+0xc6>
				localTXBuff[length++] = '\r';
 8001c20:	8afb      	ldrh	r3, [r7, #22]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	82fa      	strh	r2, [r7, #22]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	210d      	movs	r1, #13
 8001c2c:	5499      	strb	r1, [r3, r2]
				localTXBuff[length++] = '\n';
 8001c2e:	8afb      	ldrh	r3, [r7, #22]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	82fa      	strh	r2, [r7, #22]
 8001c34:	461a      	mov	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	210a      	movs	r1, #10
 8001c3a:	5499      	strb	r1, [r3, r2]
			}
			xTaskNotifyStateClear((TaskHandle_t)m_hTxTask);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f008 ff73 	bl	800ab2c <xTaskNotifyStateClear>
			HAL_UART_Transmit_DMA(m_huart, (uint8_t*) localTXBuff, length);		//send data via DMA to save CPU power
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	8afa      	ldrh	r2, [r7, #22]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f005 ffce 	bl	8007bf0 <HAL_UART_Transmit_DMA>

			ulTaskNotifyTake( pdTRUE, 500 / portTICK_PERIOD_MS);                // block UART till Data is send
 8001c54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f008 feb5 	bl	800a9c8 <ulTaskNotifyTake>
			//notification send from stm32f4xx_it.c  HAL_UART_TxCpltCallback(
			if (m_huart->gState != HAL_UART_STATE_READY)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	bf14      	ite	ne
 8001c6a:	2301      	movne	r3, #1
 8001c6c:	2300      	moveq	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <_ZN10usartClass12TxTaskStaticEv+0x108>
				m_huart->gState = HAL_UART_STATE_READY;							// fix HAL bug, that blocks the UART indefinitely.
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			memset(localTXBuff,0,m_txTaskParam.queueElementLength);				// reset buffer
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	461a      	mov	r2, r3
 8001c86:	2100      	movs	r1, #0
 8001c88:	f009 fedf 	bl	800ba4a <memset>
			if(m_LedsOn)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d09b      	beq.n	8001bce <_ZN10usartClass12TxTaskStaticEv+0x58>
				HAL_GPIO_WritePin(m_Leds.TXPORT, m_Leds.TXPIN, GPIO_PIN_RESET);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69d8      	ldr	r0, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f002 f8bf 	bl	8003e24 <HAL_GPIO_WritePin>
 8001ca6:	e792      	b.n	8001bce <_ZN10usartClass12TxTaskStaticEv+0x58>
		} else {
			if(m_LedsOn)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d08d      	beq.n	8001bce <_ZN10usartClass12TxTaskStaticEv+0x58>
				HAL_GPIO_TogglePin(m_Leds.TXPORT, m_Leds.TXPIN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f002 f8c9 	bl	8003e54 <HAL_GPIO_TogglePin>
		}
	}
 8001cc2:	e784      	b.n	8001bce <_ZN10usartClass12TxTaskStaticEv+0x58>

08001cc4 <_ZN10usartClass6RxTaskEv>:
}




void usartClass::RxTask(){
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	uint8_t localRXBuff[m_rxTaskParam.queueElementLength];
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001cd0:	1e5c      	subs	r4, r3, #1
 8001cd2:	60fc      	str	r4, [r7, #12]
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	00cb      	lsls	r3, r1, #3
 8001ce8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cec:	00c2      	lsls	r2, r0, #3
 8001cee:	4623      	mov	r3, r4
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	00cb      	lsls	r3, r1, #3
 8001d02:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d06:	00c2      	lsls	r2, r0, #3
 8001d08:	4623      	mov	r3, r4
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	3307      	adds	r3, #7
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	ebad 0d03 	sub.w	sp, sp, r3
 8001d16:	466b      	mov	r3, sp
 8001d18:	3300      	adds	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]

	m_rxDMABuffer = (uint8_t*)pvPortMalloc(m_rxTaskParam.queueElementLength*sizeof(uint8_t));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001d20:	4618      	mov	r0, r3
 8001d22:	f009 fc91 	bl	800b648 <pvPortMalloc>
 8001d26:	4602      	mov	r2, r0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(m_huart,(unsigned char*) m_rxDMABuffer,m_rxTaskParam.queueElementLength); // start receiving
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f005 ffd9 	bl	8007cf0 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for(;;)
	{
		if (xQueueReceive(m_hRxQueue, localRXBuff, 500 /portTICK_PERIOD_MS ) == pdTRUE) { // If no new message has arrived within 500ms, check if receive is still running
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f007 fdfc 	bl	8009946 <xQueueReceive>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d028      	beq.n	8001db0 <_ZN10usartClass6RxTaskEv+0xec>
			if(m_LedsOn)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <_ZN10usartClass6RxTaskEv+0xb4>
				HAL_GPIO_WritePin(m_Leds.RXPORT, m_Leds.RXPIN, GPIO_PIN_SET);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6998      	ldr	r0, [r3, #24]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	8c1b      	ldrh	r3, [r3, #32]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4619      	mov	r1, r3
 8001d74:	f002 f856 	bl	8003e24 <HAL_GPIO_WritePin>
			m_TxTaskCallback(m_huart, localRXBuff, m_rxTaskParam.queueElementLength);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001d86:	4798      	blx	r3
			memset(localRXBuff,0,10);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	220a      	movs	r2, #10
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f009 fe5b 	bl	800ba4a <memset>
			if(m_LedsOn)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0cf      	beq.n	8001d3e <_ZN10usartClass6RxTaskEv+0x7a>
				HAL_GPIO_WritePin(m_Leds.TXPORT, m_Leds.TXPIN, GPIO_PIN_RESET);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69d8      	ldr	r0, [r3, #28]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	f002 f83b 	bl	8003e24 <HAL_GPIO_WritePin>
 8001dae:	e7c6      	b.n	8001d3e <_ZN10usartClass6RxTaskEv+0x7a>
		} else {
			if(m_LedsOn)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0c1      	beq.n	8001d3e <_ZN10usartClass6RxTaskEv+0x7a>
				HAL_GPIO_TogglePin(m_Leds.RXPORT, m_Leds.RXPIN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	8c1b      	ldrh	r3, [r3, #32]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	f002 f845 	bl	8003e54 <HAL_GPIO_TogglePin>
		if (xQueueReceive(m_hRxQueue, localRXBuff, 500 /portTICK_PERIOD_MS ) == pdTRUE) { // If no new message has arrived within 500ms, check if receive is still running
 8001dca:	e7b8      	b.n	8001d3e <_ZN10usartClass6RxTaskEv+0x7a>

08001dcc <_ZN10usartClass14rxCpltCallbackEv>:
	}
	vPortFree(m_rxDMABuffer);
}


void usartClass::rxCpltCallback(){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]

	xQueueGenericSendFromISR(m_hRxQueue,m_rxDMABuffer,&xHigherPriorityTaskWoken,queueSEND_TO_BACK);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6958      	ldr	r0, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	f107 020c 	add.w	r2, r7, #12
 8001de4:	2300      	movs	r3, #0
 8001de6:	f007 fd3d 	bl	8009864 <xQueueGenericSendFromISR>

	memset(m_rxDMABuffer,0,m_rxTaskParam.queueElementLength);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6858      	ldr	r0, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001df2:	461a      	mov	r2, r3
 8001df4:	2100      	movs	r1, #0
 8001df6:	f009 fe28 	bl	800ba4a <memset>


	HAL_UART_Receive_DMA(m_huart,(unsigned char*) m_rxDMABuffer,m_rxTaskParam.queueElementLength); // start receiving
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001e06:	461a      	mov	r2, r3
 8001e08:	f005 ff72 	bl	8007cf0 <HAL_UART_Receive_DMA>
	if( xHigherPriorityTaskWoken ){
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <_ZN10usartClass14rxCpltCallbackEv+0x54>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <_ZN10usartClass14rxCpltCallbackEv+0x54>
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <_ZN10usartClass14rxCpltCallbackEv+0x5c>)
 8001e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e1e:	601a      	str	r2, [r3, #0]
	}
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	e000ed04 	.word	0xe000ed04

08001e2c <_ZN10usartClass14txCpltCallbackEv>:

void usartClass::txCpltCallback(){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]

	vTaskNotifyGiveFromISR(m_hTxTask, &xHigherPriorityTaskWoken);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f107 020c 	add.w	r2, r7, #12
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f008 fe00 	bl	800aa48 <vTaskNotifyGiveFromISR>

	if( xHigherPriorityTaskWoken ){
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <_ZN10usartClass14txCpltCallbackEv+0x30>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <_ZN10usartClass14txCpltCallbackEv+0x30>
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <_ZN10usartClass14txCpltCallbackEv+0x38>)
 8001e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e5a:	601a      	str	r2, [r3, #0]
	}
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	e000ed04 	.word	0xe000ed04

08001e68 <_Z8uartNameP20__UART_HandleTypeDefPhh>:





void uartName(UART_HandleTypeDef *handle, uint8_t* string, uint8_t size){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	4613      	mov	r3, r2
 8001e74:	71fb      	strb	r3, [r7, #7]

	if(handle->Instance == USART1)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <_Z8uartNameP20__UART_HandleTypeDefPhh+0x8c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d106      	bne.n	8001e8e <_Z8uartNameP20__UART_HandleTypeDefPhh+0x26>
		snprintf((char*)string,size,"USART1");
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <_Z8uartNameP20__UART_HandleTypeDefPhh+0x90>)
 8001e84:	4619      	mov	r1, r3
 8001e86:	68b8      	ldr	r0, [r7, #8]
 8001e88:	f009 fea2 	bl	800bbd0 <sniprintf>
	else if(handle->Instance == UART4)
		snprintf((char*)string,size,"UART4");
	else if(handle->Instance == UART5)
		snprintf((char*)string,size,"UART5");

}
 8001e8c:	e02e      	b.n	8001eec <_Z8uartNameP20__UART_HandleTypeDefPhh+0x84>
	else if(handle->Instance == USART2)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <_Z8uartNameP20__UART_HandleTypeDefPhh+0x94>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d106      	bne.n	8001ea6 <_Z8uartNameP20__UART_HandleTypeDefPhh+0x3e>
		snprintf((char*)string,size,"USART2");
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <_Z8uartNameP20__UART_HandleTypeDefPhh+0x98>)
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f009 fe96 	bl	800bbd0 <sniprintf>
}
 8001ea4:	e022      	b.n	8001eec <_Z8uartNameP20__UART_HandleTypeDefPhh+0x84>
	else if(handle->Instance == USART3)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <_Z8uartNameP20__UART_HandleTypeDefPhh+0x9c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d106      	bne.n	8001ebe <_Z8uartNameP20__UART_HandleTypeDefPhh+0x56>
		snprintf((char*)string,size,"USART3");
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <_Z8uartNameP20__UART_HandleTypeDefPhh+0xa0>)
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	68b8      	ldr	r0, [r7, #8]
 8001eb8:	f009 fe8a 	bl	800bbd0 <sniprintf>
}
 8001ebc:	e016      	b.n	8001eec <_Z8uartNameP20__UART_HandleTypeDefPhh+0x84>
	else if(handle->Instance == UART4)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <_Z8uartNameP20__UART_HandleTypeDefPhh+0xa4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d106      	bne.n	8001ed6 <_Z8uartNameP20__UART_HandleTypeDefPhh+0x6e>
		snprintf((char*)string,size,"UART4");
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <_Z8uartNameP20__UART_HandleTypeDefPhh+0xa8>)
 8001ecc:	4619      	mov	r1, r3
 8001ece:	68b8      	ldr	r0, [r7, #8]
 8001ed0:	f009 fe7e 	bl	800bbd0 <sniprintf>
}
 8001ed4:	e00a      	b.n	8001eec <_Z8uartNameP20__UART_HandleTypeDefPhh+0x84>
	else if(handle->Instance == UART5)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <_Z8uartNameP20__UART_HandleTypeDefPhh+0xac>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d105      	bne.n	8001eec <_Z8uartNameP20__UART_HandleTypeDefPhh+0x84>
		snprintf((char*)string,size,"UART5");
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <_Z8uartNameP20__UART_HandleTypeDefPhh+0xb0>)
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	68b8      	ldr	r0, [r7, #8]
 8001ee8:	f009 fe72 	bl	800bbd0 <sniprintf>
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	0800c364 	.word	0x0800c364
 8001efc:	40004400 	.word	0x40004400
 8001f00:	0800c36c 	.word	0x0800c36c
 8001f04:	40004800 	.word	0x40004800
 8001f08:	0800c374 	.word	0x0800c374
 8001f0c:	40004c00 	.word	0x40004c00
 8001f10:	0800c37c 	.word	0x0800c37c
 8001f14:	40005000 	.word	0x40005000
 8001f18:	0800c384 	.word	0x0800c384

08001f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f20:	f7ff f95c 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f26:	e003      	b.n	8001f30 <LoopCopyDataInit>

08001f28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f2e:	3104      	adds	r1, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f30:	480a      	ldr	r0, [pc, #40]	; (8001f5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f38:	d3f6      	bcc.n	8001f28 <CopyDataInit>
	ldr	r2, =_sbss
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f3c:	e002      	b.n	8001f44 <LoopFillZerobss>

08001f3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f40:	f842 3b04 	str.w	r3, [r2], #4

08001f44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <LoopForever+0x16>)
	cmp	r2, r3
 8001f46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f48:	d3f9      	bcc.n	8001f3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f4a:	f009 fd45 	bl	800b9d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f4e:	f7fe feaf 	bl	8000cb0 <main>

08001f52 <LoopForever>:

LoopForever:
    b LoopForever
 8001f52:	e7fe      	b.n	8001f52 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f54:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001f58:	0800c4cc 	.word	0x0800c4cc
	ldr	r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f60:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001f64:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001f68:	200078dc 	.word	0x200078dc

08001f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC1_2_IRQHandler>

08001f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001f78:	2004      	movs	r0, #4
 8001f7a:	f001 f8fa 	bl	8003172 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001f7e:	f7ff f93f 	bl	8001200 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff f81a 	bl	8000fbc <HAL_InitTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	71fb      	strb	r3, [r7, #7]
 8001f92:	e001      	b.n	8001f98 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f94:	f7fe ffe0 	bl	8000f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f98:	79fb      	ldrb	r3, [r7, #7]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20007888 	.word	0x20007888

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20007888 	.word	0x20007888

08001fe4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  * @note   Retrieve the TrimmingValue from factory located at
  *         VREFBUF_SC0_CAL_ADDR or VREFBUF_SC1_CAL_ADDR addresses.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t TrimmingValue;

  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x44>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0204 	bic.w	r2, r3, #4
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x44>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]

  /* Restrieve Calibration data and store them into trimming field */
  if (VoltageScaling == SYSCFG_VREFBUF_VOLTAGE_SCALE0)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x2a>
  {
    TrimmingValue = ((uint32_t) *VREFBUF_SC0_CAL_ADDR) & 0x3FU;
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x48>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e004      	b.n	8002018 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x34>
  }
  else
  {
    TrimmingValue = ((uint32_t) *VREFBUF_SC1_CAL_ADDR) & 0x3FU;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x4c>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002016:	60fb      	str	r3, [r7, #12]
  }
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  HAL_SYSCFG_VREFBUF_TrimmingConfig(TrimmingValue);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f81f 	bl	800205c <HAL_SYSCFG_VREFBUF_TrimmingConfig>
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40010100 	.word	0x40010100
 800202c:	0bfa0579 	.word	0x0bfa0579
 8002030:	0bfa0530 	.word	0x0bfa0530

08002034 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 0202 	bic.w	r2, r3, #2
 8002044:	4904      	ldr	r1, [pc, #16]	; (8002058 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40010100 	.word	0x40010100

0800205c <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800206c:	4904      	ldr	r1, [pc, #16]	; (8002080 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40010100 	.word	0x40010100

08002084 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002096:	f7ff ff99 	bl	8001fcc <HAL_GetTick>
 800209a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800209e:	f7ff ff95 	bl	8001fcc <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b0a      	cmp	r3, #10
 80020aa:	d901      	bls.n	80020b0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e006      	b.n	80020be <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40010100 	.word	0x40010100

080020cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3360      	adds	r3, #96	; 0x60
 8002146:	461a      	mov	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <LL_ADC_SetOffset+0x44>)
 8002156:	4013      	ands	r3, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	4313      	orrs	r3, r2
 8002164:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800216c:	bf00      	nop
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	03fff000 	.word	0x03fff000

0800217c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3360      	adds	r3, #96	; 0x60
 800218a:	461a      	mov	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3360      	adds	r3, #96	; 0x60
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	615a      	str	r2, [r3, #20]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3330      	adds	r3, #48	; 0x30
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	4413      	add	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	211f      	movs	r1, #31
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	401a      	ands	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 011f 	and.w	r1, r3, #31
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	431a      	orrs	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002250:	bf00      	nop
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3314      	adds	r3, #20
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	0e5b      	lsrs	r3, r3, #25
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	4413      	add	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	0d1b      	lsrs	r3, r3, #20
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2107      	movs	r1, #7
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	401a      	ands	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	0d1b      	lsrs	r3, r3, #20
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	431a      	orrs	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	43db      	mvns	r3, r3
 80022ce:	401a      	ands	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0318 	and.w	r3, r3, #24
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022d8:	40d9      	lsrs	r1, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	400b      	ands	r3, r1
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	0007ffff 	.word	0x0007ffff

080022fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800230c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6093      	str	r3, [r2, #8]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002334:	d101      	bne.n	800233a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800235c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002384:	d101      	bne.n	800238a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <LL_ADC_IsEnabled+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_ADC_IsEnabled+0x1a>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d101      	bne.n	80023d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d101      	bne.n	80023fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e134      	b.n	8002690 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7fe f90f 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff67 	bl	8002320 <LL_ADC_IsDeepPowerDownEnabled>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff4d 	bl	80022fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff82 	bl	8002370 <LL_ADC_IsInternalRegulatorEnabled>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d115      	bne.n	800249e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff66 	bl	8002348 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800247c:	4b86      	ldr	r3, [pc, #536]	; (8002698 <HAL_ADC_Init+0x28c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	4a86      	ldr	r2, [pc, #536]	; (800269c <HAL_ADC_Init+0x290>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	099b      	lsrs	r3, r3, #6
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002490:	e002      	b.n	8002498 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3b01      	subs	r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f9      	bne.n	8002492 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff64 	bl	8002370 <LL_ADC_IsInternalRegulatorEnabled>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10d      	bne.n	80024ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	f043 0210 	orr.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff75 	bl	80023be <LL_ADC_REG_IsConversionOngoing>
 80024d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80cd 	bne.w	800267e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 80c9 	bne.w	800267e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024f4:	f043 0202 	orr.w	r2, r3, #2
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff49 	bl	8002398 <LL_ADC_IsEnabled>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d110      	bne.n	800252e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800250c:	4864      	ldr	r0, [pc, #400]	; (80026a0 <HAL_ADC_Init+0x294>)
 800250e:	f7ff ff43 	bl	8002398 <LL_ADC_IsEnabled>
 8002512:	4604      	mov	r4, r0
 8002514:	4863      	ldr	r0, [pc, #396]	; (80026a4 <HAL_ADC_Init+0x298>)
 8002516:	f7ff ff3f 	bl	8002398 <LL_ADC_IsEnabled>
 800251a:	4603      	mov	r3, r0
 800251c:	4323      	orrs	r3, r4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4619      	mov	r1, r3
 8002528:	485f      	ldr	r0, [pc, #380]	; (80026a8 <HAL_ADC_Init+0x29c>)
 800252a:	f7ff fdcf 	bl	80020cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7e5b      	ldrb	r3, [r3, #25]
 8002532:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002538:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800253e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002544:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	3b01      	subs	r3, #1
 8002562:	045b      	lsls	r3, r3, #17
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_ADC_Init+0x2a0>)
 800258e:	4013      	ands	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	69b9      	ldr	r1, [r7, #24]
 8002596:	430b      	orrs	r3, r1
 8002598:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff0d 	bl	80023be <LL_ADC_REG_IsConversionOngoing>
 80025a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff1a 	bl	80023e4 <LL_ADC_INJ_IsConversionOngoing>
 80025b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d140      	bne.n	800263a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d13d      	bne.n	800263a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7e1b      	ldrb	r3, [r3, #24]
 80025c6:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025c8:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025e0:	f023 0306 	bic.w	r3, r3, #6
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	69b9      	ldr	r1, [r7, #24]
 80025ea:	430b      	orrs	r3, r1
 80025ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d118      	bne.n	800262a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002602:	f023 0304 	bic.w	r3, r3, #4
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800260e:	4311      	orrs	r1, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800261a:	430a      	orrs	r2, r1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	611a      	str	r2, [r3, #16]
 8002628:	e007      	b.n	800263a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d10c      	bne.n	800265c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f023 010f 	bic.w	r1, r3, #15
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	1e5a      	subs	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
 800265a:	e007      	b.n	800266c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 020f 	bic.w	r2, r2, #15
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	f023 0303 	bic.w	r3, r3, #3
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	659a      	str	r2, [r3, #88]	; 0x58
 800267c:	e007      	b.n	800268e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	f043 0210 	orr.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800268e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3724      	adds	r7, #36	; 0x24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}
 8002698:	20000000 	.word	0x20000000
 800269c:	053e2d63 	.word	0x053e2d63
 80026a0:	42028000 	.word	0x42028000
 80026a4:	42028100 	.word	0x42028100
 80026a8:	42028300 	.word	0x42028300
 80026ac:	fff0c007 	.word	0xfff0c007

080026b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b0b7      	sub	sp, #220	; 0xdc
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x22>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e3c1      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x7a6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fe6d 	bl	80023be <LL_ADC_REG_IsConversionOngoing>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 83a6 	bne.w	8002e38 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	f7ff fd83 	bl	8002204 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fe5b 	bl	80023be <LL_ADC_REG_IsConversionOngoing>
 8002708:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fe67 	bl	80023e4 <LL_ADC_INJ_IsConversionOngoing>
 8002716:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800271a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 81c1 	bne.w	8002aa6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002728:	2b00      	cmp	r3, #0
 800272a:	f040 81bc 	bne.w	8002aa6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002736:	d10f      	bne.n	8002758 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	4619      	mov	r1, r3
 8002744:	f7ff fd8a 	bl	800225c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fd44 	bl	80021de <LL_ADC_SetSamplingTimeCommonConfig>
 8002756:	e00e      	b.n	8002776 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	461a      	mov	r2, r3
 8002766:	f7ff fd79 	bl	800225c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fd34 	bl	80021de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d00a      	beq.n	80027ae <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6919      	ldr	r1, [r3, #16]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027a8:	f7ff fcc4 	bl	8002134 <LL_ADC_SetOffset>
 80027ac:	e17b      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fce1 	bl	800217c <LL_ADC_GetOffsetChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <HAL_ADC_ConfigChannel+0x12a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fcd6 	bl	800217c <LL_ADC_GetOffsetChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	e01e      	b.n	8002818 <HAL_ADC_ConfigChannel+0x168>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fccb 	bl	800217c <LL_ADC_GetOffsetChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e004      	b.n	8002816 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800280c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x180>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	e018      	b.n	8002862 <HAL_ADC_ConfigChannel+0x1b2>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800284c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e004      	b.n	8002862 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002862:	429a      	cmp	r2, r3
 8002864:	d106      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fc9a 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fc7e 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1f0>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2101      	movs	r1, #1
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fc73 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	f003 021f 	and.w	r2, r3, #31
 800289e:	e01e      	b.n	80028de <HAL_ADC_ConfigChannel+0x22e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fc68 	bl	800217c <LL_ADC_GetOffsetChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e004      	b.n	80028dc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80028d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x246>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0e9b      	lsrs	r3, r3, #26
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	e018      	b.n	8002928 <HAL_ADC_ConfigChannel+0x278>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800290a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800290e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800291a:	2320      	movs	r3, #32
 800291c:	e004      	b.n	8002928 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800291e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002928:	429a      	cmp	r2, r3
 800292a:	d106      	bne.n	800293a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2200      	movs	r2, #0
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fc37 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2102      	movs	r1, #2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fc1b 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x2b6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2102      	movs	r1, #2
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fc10 	bl	800217c <LL_ADC_GetOffsetChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	0e9b      	lsrs	r3, r3, #26
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	e01e      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x2f4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2102      	movs	r1, #2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fc05 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800298c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e004      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x30c>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0e9b      	lsrs	r3, r3, #26
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	e016      	b.n	80029ea <HAL_ADC_ConfigChannel+0x33a>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e004      	b.n	80029ea <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80029e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d106      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	2102      	movs	r1, #2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fbd6 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2103      	movs	r1, #3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fbba 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x378>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2103      	movs	r1, #3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fbaf 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	f003 021f 	and.w	r2, r3, #31
 8002a26:	e017      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x3a8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2103      	movs	r1, #3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fba4 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a42:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e003      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x3c0>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	e011      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x3e4>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d106      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fb81 	bl	80021a8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fc74 	bl	8002398 <LL_ADC_IsEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 81c9 	bne.w	8002e4a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f7ff fbf5 	bl	80022b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4a8f      	ldr	r2, [pc, #572]	; (8002d0c <HAL_ADC_ConfigChannel+0x65c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	f040 8131 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x44e>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0e9b      	lsrs	r3, r3, #26
 8002aec:	3301      	adds	r3, #1
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2b09      	cmp	r3, #9
 8002af4:	bf94      	ite	ls
 8002af6:	2301      	movls	r3, #1
 8002af8:	2300      	movhi	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	e019      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x482>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b0e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002b16:	2320      	movs	r3, #32
 8002b18:	e003      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	bf94      	ite	ls
 8002b2c:	2301      	movls	r3, #1
 8002b2e:	2300      	movhi	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d079      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x4a2>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0e9b      	lsrs	r3, r3, #26
 8002b48:	3301      	adds	r3, #1
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b50:	e015      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x4ce>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b62:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	069b      	lsls	r3, r3, #26
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x4ee>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	e017      	b.n	8002bce <HAL_ADC_ConfigChannel+0x51e>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e003      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	ea42 0103 	orr.w	r1, r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10a      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x544>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	3301      	adds	r3, #1
 8002be6:	f003 021f 	and.w	r2, r3, #31
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	051b      	lsls	r3, r3, #20
 8002bf2:	e018      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x576>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	e003      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c26:	430b      	orrs	r3, r1
 8002c28:	e081      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x596>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	069b      	lsls	r3, r3, #26
 8002c40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c44:	e015      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x5c2>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e003      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	069b      	lsls	r3, r3, #26
 8002c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x5e2>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0e9b      	lsrs	r3, r3, #26
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	e017      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x612>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002caa:	2320      	movs	r3, #32
 8002cac:	e003      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	ea42 0103 	orr.w	r1, r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10d      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x63e>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 021f 	and.w	r2, r3, #31
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3b1e      	subs	r3, #30
 8002ce6:	051b      	lsls	r3, r3, #20
 8002ce8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cec:	e01e      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x67c>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	613b      	str	r3, [r7, #16]
  return result;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e006      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x668>
 8002d0a:	bf00      	nop
 8002d0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 021f 	and.w	r2, r3, #31
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	3b1e      	subs	r3, #30
 8002d26:	051b      	lsls	r3, r3, #20
 8002d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	6892      	ldr	r2, [r2, #8]
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7ff fa92 	bl	800225c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <HAL_ADC_ConfigChannel+0x7b0>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8082 	beq.w	8002e4a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d46:	4847      	ldr	r0, [pc, #284]	; (8002e64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d48:	f7ff f9e6 	bl	8002118 <LL_ADC_GetCommonPathInternalCh>
 8002d4c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d50:	4845      	ldr	r0, [pc, #276]	; (8002e68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d52:	f7ff fb21 	bl	8002398 <LL_ADC_IsEnabled>
 8002d56:	4604      	mov	r4, r0
 8002d58:	4844      	ldr	r0, [pc, #272]	; (8002e6c <HAL_ADC_ConfigChannel+0x7bc>)
 8002d5a:	f7ff fb1d 	bl	8002398 <LL_ADC_IsEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4323      	orrs	r3, r4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d15e      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a41      	ldr	r2, [pc, #260]	; (8002e70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d127      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d121      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a39      	ldr	r2, [pc, #228]	; (8002e68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d161      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4834      	ldr	r0, [pc, #208]	; (8002e64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d92:	f7ff f9ae 	bl	80020f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	4a36      	ldr	r2, [pc, #216]	; (8002e78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002db0:	e002      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f9      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dbe:	e044      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2d      	ldr	r2, [pc, #180]	; (8002e7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d113      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x742>
 8002dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10d      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d134      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de8:	4619      	mov	r1, r3
 8002dea:	481e      	ldr	r0, [pc, #120]	; (8002e64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002dec:	f7ff f981 	bl	80020f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df0:	e02b      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_ADC_ConfigChannel+0x7d0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d126      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x79a>
 8002dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d120      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d11b      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4811      	ldr	r0, [pc, #68]	; (8002e64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e1e:	f7ff f968 	bl	80020f2 <LL_ADC_SetCommonPathInternalCh>
 8002e22:	e012      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e36:	e008      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	37dc      	adds	r7, #220	; 0xdc
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	80080000 	.word	0x80080000
 8002e64:	42028300 	.word	0x42028300
 8002e68:	42028000 	.word	0x42028000
 8002e6c:	42028100 	.word	0x42028100
 8002e70:	c7520000 	.word	0xc7520000
 8002e74:	20000000 	.word	0x20000000
 8002e78:	053e2d63 	.word	0x053e2d63
 8002e7c:	cb840000 	.word	0xcb840000
 8002e80:	80000001 	.word	0x80000001

08002e84 <LL_ADC_IsEnabled>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <LL_ADC_IsEnabled+0x18>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <LL_ADC_IsEnabled+0x1a>
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_ADC_REG_IsConversionOngoing>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d101      	bne.n	8002ec2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b0a1      	sub	sp, #132	; 0x84
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e089      	b.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002efa:	2300      	movs	r3, #0
 8002efc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a42      	ldr	r2, [pc, #264]	; (800300c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d102      	bne.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f08:	4b41      	ldr	r3, [pc, #260]	; (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e001      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e068      	b.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ffb9 	bl	8002eaa <LL_ADC_REG_IsConversionOngoing>
 8002f38:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ffb3 	bl	8002eaa <LL_ADC_REG_IsConversionOngoing>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14a      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d147      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f50:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f52:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d027      	beq.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f6e:	035b      	lsls	r3, r3, #13
 8002f70:	430b      	orrs	r3, r1
 8002f72:	431a      	orrs	r2, r3
 8002f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f78:	4824      	ldr	r0, [pc, #144]	; (800300c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002f7a:	f7ff ff83 	bl	8002e84 <LL_ADC_IsEnabled>
 8002f7e:	4604      	mov	r4, r0
 8002f80:	4823      	ldr	r0, [pc, #140]	; (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f82:	f7ff ff7f 	bl	8002e84 <LL_ADC_IsEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4323      	orrs	r3, r4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d132      	bne.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f96:	f023 030f 	bic.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	6811      	ldr	r1, [r2, #0]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	6892      	ldr	r2, [r2, #8]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002faa:	e023      	b.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb8:	4814      	ldr	r0, [pc, #80]	; (800300c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002fba:	f7ff ff63 	bl	8002e84 <LL_ADC_IsEnabled>
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4813      	ldr	r0, [pc, #76]	; (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002fc2:	f7ff ff5f 	bl	8002e84 <LL_ADC_IsEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4323      	orrs	r3, r4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d112      	bne.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fd6:	f023 030f 	bic.w	r3, r3, #15
 8002fda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fdc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fde:	e009      	b.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ff2:	e000      	b.n	8002ff6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ffe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003002:	4618      	mov	r0, r3
 8003004:	3784      	adds	r7, #132	; 0x84
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	bf00      	nop
 800300c:	42028000 	.word	0x42028000
 8003010:	42028100 	.word	0x42028100
 8003014:	42028300 	.word	0x42028300

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4907      	ldr	r1, [pc, #28]	; (80030b4 <__NVIC_EnableIRQ+0x38>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000e100 	.word	0xe000e100

080030b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	6039      	str	r1, [r7, #0]
 80030c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	db0a      	blt.n	80030e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	490c      	ldr	r1, [pc, #48]	; (8003104 <__NVIC_SetPriority+0x4c>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	0152      	lsls	r2, r2, #5
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	440b      	add	r3, r1
 80030dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e0:	e00a      	b.n	80030f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4908      	ldr	r1, [pc, #32]	; (8003108 <__NVIC_SetPriority+0x50>)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3b04      	subs	r3, #4
 80030f0:	0152      	lsls	r2, r2, #5
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	440b      	add	r3, r1
 80030f6:	761a      	strb	r2, [r3, #24]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000e100 	.word	0xe000e100
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f1c3 0307 	rsb	r3, r3, #7
 8003126:	2b03      	cmp	r3, #3
 8003128:	bf28      	it	cs
 800312a:	2303      	movcs	r3, #3
 800312c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3303      	adds	r3, #3
 8003132:	2b06      	cmp	r3, #6
 8003134:	d902      	bls.n	800313c <NVIC_EncodePriority+0x30>
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3b04      	subs	r3, #4
 800313a:	e000      	b.n	800313e <NVIC_EncodePriority+0x32>
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	401a      	ands	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003154:	f04f 31ff 	mov.w	r1, #4294967295
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43d9      	mvns	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	4313      	orrs	r3, r2
         );
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff4c 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003196:	f7ff ff63 	bl	8003060 <__NVIC_GetPriorityGrouping>
 800319a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	6978      	ldr	r0, [r7, #20]
 80031a2:	f7ff ffb3 	bl	800310c <NVIC_EncodePriority>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff82 	bl	80030b8 <__NVIC_SetPriority>
}
 80031b4:	bf00      	nop
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff56 	bl	800307c <__NVIC_EnableIRQ>
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e054      	b.n	8003294 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7f5b      	ldrb	r3, [r3, #29]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fd fb84 	bl	8000908 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	791b      	ldrb	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_CRC_Init+0xc4>)
 8003214:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0218 	bic.w	r2, r2, #24
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	e00c      	b.n	8003242 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6899      	ldr	r1, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	461a      	mov	r2, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f834 	bl	80032a0 <HAL_CRCEx_Polynomial_Set>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e028      	b.n	8003294 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	795b      	ldrb	r3, [r3, #5]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	611a      	str	r2, [r3, #16]
 8003254:	e004      	b.n	8003260 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6912      	ldr	r2, [r2, #16]
 800325e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	04c11db7 	.word	0x04c11db7

080032a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032b0:	231f      	movs	r3, #31
 80032b2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80032b4:	bf00      	nop
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	613a      	str	r2, [r7, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_CRCEx_Polynomial_Set+0x34>
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_CRCEx_Polynomial_Set+0x16>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b18      	cmp	r3, #24
 80032d8:	d846      	bhi.n	8003368 <HAL_CRCEx_Polynomial_Set+0xc8>
 80032da:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	0800336f 	.word	0x0800336f
 80032e4:	08003369 	.word	0x08003369
 80032e8:	08003369 	.word	0x08003369
 80032ec:	08003369 	.word	0x08003369
 80032f0:	08003369 	.word	0x08003369
 80032f4:	08003369 	.word	0x08003369
 80032f8:	08003369 	.word	0x08003369
 80032fc:	08003369 	.word	0x08003369
 8003300:	0800335d 	.word	0x0800335d
 8003304:	08003369 	.word	0x08003369
 8003308:	08003369 	.word	0x08003369
 800330c:	08003369 	.word	0x08003369
 8003310:	08003369 	.word	0x08003369
 8003314:	08003369 	.word	0x08003369
 8003318:	08003369 	.word	0x08003369
 800331c:	08003369 	.word	0x08003369
 8003320:	08003351 	.word	0x08003351
 8003324:	08003369 	.word	0x08003369
 8003328:	08003369 	.word	0x08003369
 800332c:	08003369 	.word	0x08003369
 8003330:	08003369 	.word	0x08003369
 8003334:	08003369 	.word	0x08003369
 8003338:	08003369 	.word	0x08003369
 800333c:	08003369 	.word	0x08003369
 8003340:	08003345 	.word	0x08003345
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b06      	cmp	r3, #6
 8003348:	d913      	bls.n	8003372 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800334e:	e010      	b.n	8003372 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b07      	cmp	r3, #7
 8003354:	d90f      	bls.n	8003376 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800335a:	e00c      	b.n	8003376 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b0f      	cmp	r3, #15
 8003360:	d90b      	bls.n	800337a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003366:	e008      	b.n	800337a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	75fb      	strb	r3, [r7, #23]
      break;
 800336c:	e006      	b.n	800337c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800336e:	bf00      	nop
 8003370:	e004      	b.n	800337c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003372:	bf00      	nop
 8003374:	e002      	b.n	800337c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800337a:	bf00      	nop
  }
  if (status == HAL_OK)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 0118 	bic.w	r1, r3, #24
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800339e:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e08d      	b.n	80034da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_DMA_Init+0x138>)
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d80f      	bhi.n	80033ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <HAL_DMA_Init+0x13c>)
 80033d2:	4413      	add	r3, r2
 80033d4:	4a45      	ldr	r2, [pc, #276]	; (80034ec <HAL_DMA_Init+0x140>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	009a      	lsls	r2, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a42      	ldr	r2, [pc, #264]	; (80034f0 <HAL_DMA_Init+0x144>)
 80033e6:	649a      	str	r2, [r3, #72]	; 0x48
 80033e8:	e00e      	b.n	8003408 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b40      	ldr	r3, [pc, #256]	; (80034f4 <HAL_DMA_Init+0x148>)
 80033f2:	4413      	add	r3, r2
 80033f4:	4a3d      	ldr	r2, [pc, #244]	; (80034ec <HAL_DMA_Init+0x140>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	009a      	lsls	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a3c      	ldr	r2, [pc, #240]	; (80034f8 <HAL_DMA_Init+0x14c>)
 8003406:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 800341e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003422:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800342c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fb00 	bl	8003a60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003468:	d102      	bne.n	8003470 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003484:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d010      	beq.n	80034b0 <HAL_DMA_Init+0x104>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d80c      	bhi.n	80034b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fb20 	bl	8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	e008      	b.n	80034c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40020407 	.word	0x40020407
 80034e8:	bffdfff8 	.word	0xbffdfff8
 80034ec:	cccccccd 	.word	0xcccccccd
 80034f0:	40020000 	.word	0x40020000
 80034f4:	bffdfbf8 	.word	0xbffdfbf8
 80034f8:	40020400 	.word	0x40020400

080034fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_DMA_Start_IT+0x20>
 8003518:	2302      	movs	r3, #2
 800351a:	e066      	b.n	80035ea <HAL_DMA_Start_IT+0xee>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d155      	bne.n	80035dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fa45 	bl	80039e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 020e 	orr.w	r2, r2, #14
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e00f      	b.n	8003594 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0204 	bic.w	r2, r2, #4
 8003582:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 020a 	orr.w	r2, r2, #10
 8003592:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e005      	b.n	80035e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
 80035e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d008      	beq.n	800361c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2204      	movs	r2, #4
 800360e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e040      	b.n	800369e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 020e 	bic.w	r2, r2, #14
 800362a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800363a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003650:	f003 021c 	and.w	r2, r3, #28
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	2101      	movs	r1, #1
 800365a:	fa01 f202 	lsl.w	r2, r1, r2
 800365e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003668:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003680:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800368a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d005      	beq.n	80036ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2204      	movs	r2, #4
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	e047      	b.n	800375e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 020e 	bic.w	r2, r2, #14
 80036dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	f003 021c 	and.w	r2, r3, #28
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f202 	lsl.w	r2, r1, r2
 8003710:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800371a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00c      	beq.n	800373e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003732:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800373c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
    }
  }
  return status;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003784:	f003 031c 	and.w	r3, r3, #28
 8003788:	2204      	movs	r2, #4
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d053      	beq.n	800383c <HAL_DMA_IRQHandler+0xd4>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d04e      	beq.n	800383c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d024      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b0:	f003 021c 	and.w	r2, r3, #28
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b8:	2104      	movs	r1, #4
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80c0 	beq.w	8003958 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80037e0:	e0ba      	b.n	8003958 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80b6 	beq.w	8003958 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80037f4:	e0b0      	b.n	8003958 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d107      	bne.n	8003814 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0204 	bic.w	r2, r2, #4
 8003812:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003818:	f003 021c 	and.w	r2, r3, #28
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	2104      	movs	r1, #4
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8093 	beq.w	8003958 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800383a:	e08d      	b.n	8003958 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003840:	f003 031c 	and.w	r3, r3, #28
 8003844:	2202      	movs	r2, #2
 8003846:	409a      	lsls	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d04e      	beq.n	80038ee <HAL_DMA_IRQHandler+0x186>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d049      	beq.n	80038ee <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d018      	beq.n	800389a <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387a:	2b00      	cmp	r3, #0
 800387c:	d06e      	beq.n	800395c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003886:	e069      	b.n	800395c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d065      	beq.n	800395c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003898:	e060      	b.n	800395c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 020a 	bic.w	r2, r2, #10
 80038b6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c4:	f003 021c 	and.w	r2, r3, #28
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	2102      	movs	r1, #2
 80038ce:	fa01 f202 	lsl.w	r2, r1, r2
 80038d2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03b      	beq.n	800395c <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80038ec:	e036      	b.n	800395c <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	f003 031c 	and.w	r3, r3, #28
 80038f6:	2208      	movs	r2, #8
 80038f8:	409a      	lsls	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02e      	beq.n	8003960 <HAL_DMA_IRQHandler+0x1f8>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d029      	beq.n	8003960 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 020e 	bic.w	r2, r2, #14
 800391a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003920:	f003 021c 	and.w	r2, r3, #28
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003956:	e002      	b.n	800395e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003958:	bf00      	nop
 800395a:	e000      	b.n	800395e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800395c:	bf00      	nop
  return;
 800395e:	bf00      	nop
 8003960:	bf00      	nop
}
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003976:	b2db      	uxtb	r3, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	72fb      	strb	r3, [r7, #11]
    return status;
 800399c:	7afb      	ldrb	r3, [r7, #11]
 800399e:	e01b      	b.n	80039d8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	e003      	b.n	80039ce <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039cc:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	601a      	str	r2, [r3, #0]

  return status;
 80039d6:	7afb      	ldrb	r3, [r7, #11]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80039fa:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003a0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	f003 021c 	and.w	r2, r3, #28
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d108      	bne.n	8003a44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8003a42:	e007      	b.n	8003a54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b17      	ldr	r3, [pc, #92]	; (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d80a      	bhi.n	8003a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a80:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6513      	str	r3, [r2, #80]	; 0x50
 8003a88:	e007      	b.n	8003a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	009a      	lsls	r2, r3, #2
 8003a92:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a94:	4413      	add	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	3b08      	subs	r3, #8
 8003aa2:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40020407 	.word	0x40020407
 8003ad0:	40020820 	.word	0x40020820
 8003ad4:	cccccccd 	.word	0xcccccccd
 8003ad8:	40020880 	.word	0x40020880

08003adc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	461a      	mov	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003afe:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2201      	movs	r2, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	1000823f 	.word	0x1000823f
 8003b20:	40020940 	.word	0x40020940

08003b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b32:	e158      	b.n	8003de6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2101      	movs	r1, #1
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 814a 	beq.w	8003de0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d00b      	beq.n	8003b6c <HAL_GPIO_Init+0x48>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d007      	beq.n	8003b6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b60:	2b11      	cmp	r3, #17
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b12      	cmp	r3, #18
 8003b6a:	d130      	bne.n	8003bce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	2203      	movs	r2, #3
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f003 0201 	and.w	r2, r3, #1
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0xea>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b12      	cmp	r3, #18
 8003c0c:	d123      	bne.n	8003c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	08da      	lsrs	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3208      	adds	r2, #8
 8003c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	220f      	movs	r2, #15
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	08da      	lsrs	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	6939      	ldr	r1, [r7, #16]
 8003c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0203 	and.w	r2, r3, #3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80a4 	beq.w	8003de0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003c98:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	220f      	movs	r2, #15
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a52      	ldr	r2, [pc, #328]	; (8003e08 <HAL_GPIO_Init+0x2e4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d025      	beq.n	8003d10 <HAL_GPIO_Init+0x1ec>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a51      	ldr	r2, [pc, #324]	; (8003e0c <HAL_GPIO_Init+0x2e8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d01f      	beq.n	8003d0c <HAL_GPIO_Init+0x1e8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a50      	ldr	r2, [pc, #320]	; (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d019      	beq.n	8003d08 <HAL_GPIO_Init+0x1e4>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a4f      	ldr	r2, [pc, #316]	; (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <HAL_GPIO_Init+0x1e0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a4e      	ldr	r2, [pc, #312]	; (8003e18 <HAL_GPIO_Init+0x2f4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00d      	beq.n	8003d00 <HAL_GPIO_Init+0x1dc>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a4d      	ldr	r2, [pc, #308]	; (8003e1c <HAL_GPIO_Init+0x2f8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d007      	beq.n	8003cfc <HAL_GPIO_Init+0x1d8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a4c      	ldr	r2, [pc, #304]	; (8003e20 <HAL_GPIO_Init+0x2fc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d101      	bne.n	8003cf8 <HAL_GPIO_Init+0x1d4>
 8003cf4:	2306      	movs	r3, #6
 8003cf6:	e00c      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003cf8:	2307      	movs	r3, #7
 8003cfa:	e00a      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003cfc:	2305      	movs	r3, #5
 8003cfe:	e008      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d00:	2304      	movs	r3, #4
 8003d02:	e006      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d04:	2303      	movs	r3, #3
 8003d06:	e004      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e002      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003d10:	2300      	movs	r3, #0
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	f002 0203 	and.w	r2, r2, #3
 8003d18:	00d2      	lsls	r2, r2, #3
 8003d1a:	4093      	lsls	r3, r2
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003d22:	4938      	ldr	r1, [pc, #224]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3318      	adds	r3, #24
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d30:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d56:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003d5e:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003db0:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003db6:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3301      	adds	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f47f ae9f 	bne.w	8003b34 <HAL_GPIO_Init+0x10>
  }
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	4002f400 	.word	0x4002f400
 8003e08:	42020000 	.word	0x42020000
 8003e0c:	42020400 	.word	0x42020400
 8003e10:	42020800 	.word	0x42020800
 8003e14:	42020c00 	.word	0x42020c00
 8003e18:	42021000 	.word	0x42021000
 8003e1c:	42021400 	.word	0x42021400
 8003e20:	42021800 	.word	0x42021800

08003e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
 8003e30:	4613      	mov	r3, r2
 8003e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e34:	787b      	ldrb	r3, [r7, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e40:	e002      	b.n	8003e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e42:	887a      	ldrh	r2, [r7, #2]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	041a      	lsls	r2, r3, #16
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	43d9      	mvns	r1, r3
 8003e72:	887b      	ldrh	r3, [r7, #2]
 8003e74:	400b      	ands	r3, r1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	619a      	str	r2, [r3, #24]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e081      	b.n	8003f9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc fe5a 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ed8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	e006      	b.n	8003f10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d104      	bne.n	8003f22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	ea42 0103 	orr.w	r1, r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69d9      	ldr	r1, [r3, #28]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	68f9      	ldr	r1, [r7, #12]
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d010      	beq.n	8004020 <HAL_I2C_ER_IRQHandler+0x46>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	09db      	lsrs	r3, r3, #7
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800401e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	0a9b      	lsrs	r3, r3, #10
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d010      	beq.n	800404e <HAL_I2C_ER_IRQHandler+0x74>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	09db      	lsrs	r3, r3, #7
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403c:	f043 0208 	orr.w	r2, r3, #8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800404c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	0a5b      	lsrs	r3, r3, #9
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d010      	beq.n	800407c <HAL_I2C_ER_IRQHandler+0xa2>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	09db      	lsrs	r3, r3, #7
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f043 0202 	orr.w	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 030b 	and.w	r3, r3, #11
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800408c:	68f9      	ldr	r1, [r7, #12]
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fb8a 	bl	80047a8 <I2C_ITError>
  }
}
 8004094:	bf00      	nop
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
 80040d0:	4613      	mov	r3, r2
 80040d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <I2C_Slave_ISR_IT+0x24>
 800413c:	2302      	movs	r3, #2
 800413e:	e0ec      	b.n	800431a <I2C_Slave_ISR_IT+0x1fe>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d009      	beq.n	8004168 <I2C_Slave_ISR_IT+0x4c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004160:	6939      	ldr	r1, [r7, #16]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f9c0 	bl	80044e8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d04d      	beq.n	8004210 <I2C_Slave_ISR_IT+0xf4>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d047      	beq.n	8004210 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d128      	bne.n	80041dc <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b28      	cmp	r3, #40	; 0x28
 8004194:	d108      	bne.n	80041a8 <I2C_Slave_ISR_IT+0x8c>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800419c:	d104      	bne.n	80041a8 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800419e:	6939      	ldr	r1, [r7, #16]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 faab 	bl	80046fc <I2C_ITListenCplt>
 80041a6:	e032      	b.n	800420e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b29      	cmp	r3, #41	; 0x29
 80041b2:	d10e      	bne.n	80041d2 <I2C_Slave_ISR_IT+0xb6>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ba:	d00a      	beq.n	80041d2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2210      	movs	r2, #16
 80041c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fbe6 	bl	8004996 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f92d 	bl	800442a <I2C_ITSlaveSeqCplt>
 80041d0:	e01d      	b.n	800420e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2210      	movs	r2, #16
 80041d8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80041da:	e096      	b.n	800430a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2210      	movs	r2, #16
 80041e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	f043 0204 	orr.w	r2, r3, #4
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <I2C_Slave_ISR_IT+0xe4>
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041fc:	f040 8085 	bne.w	800430a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	4619      	mov	r1, r3
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 face 	bl	80047a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800420c:	e07d      	b.n	800430a <I2C_Slave_ISR_IT+0x1ee>
 800420e:	e07c      	b.n	800430a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d030      	beq.n	800427e <I2C_Slave_ISR_IT+0x162>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d02a      	beq.n	800427e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d018      	beq.n	8004264 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d14f      	bne.n	800430e <I2C_Slave_ISR_IT+0x1f2>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004274:	d04b      	beq.n	800430e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f8d7 	bl	800442a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800427c:	e047      	b.n	800430e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	08db      	lsrs	r3, r3, #3
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004296:	6939      	ldr	r1, [r7, #16]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f842 	bl	8004322 <I2C_ITAddrCplt>
 800429e:	e037      	b.n	8004310 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d031      	beq.n	8004310 <I2C_Slave_ISR_IT+0x1f4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02b      	beq.n	8004310 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d018      	beq.n	80042f4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80042f2:	e00d      	b.n	8004310 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042fa:	d002      	beq.n	8004302 <I2C_Slave_ISR_IT+0x1e6>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f891 	bl	800442a <I2C_ITSlaveSeqCplt>
 8004308:	e002      	b.n	8004310 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800430e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004338:	2b28      	cmp	r3, #40	; 0x28
 800433a:	d16a      	bne.n	8004412 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	0c1b      	lsrs	r3, r3, #16
 8004354:	b29b      	uxth	r3, r3
 8004356:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800435a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004368:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004376:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d138      	bne.n	80043f2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004380:	897b      	ldrh	r3, [r7, #10]
 8004382:	09db      	lsrs	r3, r3, #7
 8004384:	b29a      	uxth	r2, r3
 8004386:	89bb      	ldrh	r3, [r7, #12]
 8004388:	4053      	eors	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	f003 0306 	and.w	r3, r3, #6
 8004390:	2b00      	cmp	r3, #0
 8004392:	d11c      	bne.n	80043ce <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004394:	897b      	ldrh	r3, [r7, #10]
 8004396:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d13b      	bne.n	8004422 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2208      	movs	r2, #8
 80043b6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043c0:	89ba      	ldrh	r2, [r7, #12]
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fe7c 	bl	80040c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043cc:	e029      	b.n	8004422 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80043ce:	893b      	ldrh	r3, [r7, #8]
 80043d0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fb1f 	bl	8004a1a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043e4:	89ba      	ldrh	r2, [r7, #12]
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fe6a 	bl	80040c4 <HAL_I2C_AddrCallback>
}
 80043f0:	e017      	b.n	8004422 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fb0f 	bl	8004a1a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004404:	89ba      	ldrh	r2, [r7, #12]
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fe5a 	bl	80040c4 <HAL_I2C_AddrCallback>
}
 8004410:	e007      	b.n	8004422 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2208      	movs	r2, #8
 8004418:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	0b9b      	lsrs	r3, r3, #14
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e00d      	b.n	800447c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	0bdb      	lsrs	r3, r3, #15
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800447a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b29      	cmp	r3, #41	; 0x29
 8004486:	d112      	bne.n	80044ae <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2228      	movs	r2, #40	; 0x28
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2221      	movs	r2, #33	; 0x21
 8004494:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004496:	2101      	movs	r1, #1
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fabe 	bl	8004a1a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fdf8 	bl	800409c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044ac:	e017      	b.n	80044de <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b2a      	cmp	r3, #42	; 0x2a
 80044b8:	d111      	bne.n	80044de <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2228      	movs	r2, #40	; 0x28
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2222      	movs	r2, #34	; 0x22
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044c8:	2102      	movs	r1, #2
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 faa5 	bl	8004a1a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fde9 	bl	80040b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2220      	movs	r2, #32
 800450c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b21      	cmp	r3, #33	; 0x21
 8004512:	d002      	beq.n	800451a <I2C_ITSlaveCplt+0x32>
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b29      	cmp	r3, #41	; 0x29
 8004518:	d108      	bne.n	800452c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800451a:	f248 0101 	movw	r1, #32769	; 0x8001
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa7b 	bl	8004a1a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2221      	movs	r2, #33	; 0x21
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
 800452a:	e00d      	b.n	8004548 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b22      	cmp	r3, #34	; 0x22
 8004530:	d002      	beq.n	8004538 <I2C_ITSlaveCplt+0x50>
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b2a      	cmp	r3, #42	; 0x2a
 8004536:	d107      	bne.n	8004548 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004538:	f248 0102 	movw	r1, #32770	; 0x8002
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fa6c 	bl	8004a1a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2222      	movs	r2, #34	; 0x22
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004556:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6859      	ldr	r1, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b64      	ldr	r3, [pc, #400]	; (80046f4 <I2C_ITSlaveCplt+0x20c>)
 8004564:	400b      	ands	r3, r1
 8004566:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fa14 	bl	8004996 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	0b9b      	lsrs	r3, r3, #14
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d013      	beq.n	80045a2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004588:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	2b00      	cmp	r3, #0
 8004590:	d020      	beq.n	80045d4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045a0:	e018      	b.n	80045d4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	0bdb      	lsrs	r3, r3, #15
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d012      	beq.n	80045d4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045bc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d006      	beq.n	80045d4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d020      	beq.n	8004622 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0304 	bic.w	r3, r3, #4
 80045e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	f043 0204 	orr.w	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	2b00      	cmp	r3, #0
 800464c:	d010      	beq.n	8004670 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8a7 	bl	80047a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b28      	cmp	r3, #40	; 0x28
 8004664:	d141      	bne.n	80046ea <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004666:	6979      	ldr	r1, [r7, #20]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f847 	bl	80046fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800466e:	e03c      	b.n	80046ea <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004678:	d014      	beq.n	80046a4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fed5 	bl	800442a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <I2C_ITSlaveCplt+0x210>)
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff fd1f 	bl	80040e0 <HAL_I2C_ListenCpltCallback>
}
 80046a2:	e022      	b.n	80046ea <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b22      	cmp	r3, #34	; 0x22
 80046ae:	d10e      	bne.n	80046ce <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fcf2 	bl	80040b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80046cc:	e00d      	b.n	80046ea <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fcd9 	bl	800409c <HAL_I2C_SlaveTxCpltCallback>
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	fe00e800 	.word	0xfe00e800
 80046f8:	ffff0000 	.word	0xffff0000

080046fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <I2C_ITListenCplt+0xa8>)
 800470a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d022      	beq.n	800477a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	d012      	beq.n	800477a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	f043 0204 	orr.w	r2, r3, #4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800477a:	f248 0103 	movw	r1, #32771	; 0x8003
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f94b 	bl	8004a1a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2210      	movs	r2, #16
 800478a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fca3 	bl	80040e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	ffff0000 	.word	0xffff0000

080047a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a5d      	ldr	r2, [pc, #372]	; (800493c <I2C_ITError+0x194>)
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b28      	cmp	r3, #40	; 0x28
 80047de:	d005      	beq.n	80047ec <I2C_ITError+0x44>
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b29      	cmp	r3, #41	; 0x29
 80047e4:	d002      	beq.n	80047ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b2a      	cmp	r3, #42	; 0x2a
 80047ea:	d10b      	bne.n	8004804 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047ec:	2103      	movs	r1, #3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f913 	bl	8004a1a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2228      	movs	r2, #40	; 0x28
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a50      	ldr	r2, [pc, #320]	; (8004940 <I2C_ITError+0x198>)
 8004800:	635a      	str	r2, [r3, #52]	; 0x34
 8004802:	e011      	b.n	8004828 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004804:	f248 0103 	movw	r1, #32771	; 0x8003
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f906 	bl	8004a1a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b60      	cmp	r3, #96	; 0x60
 8004818:	d003      	beq.n	8004822 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	2b00      	cmp	r3, #0
 8004834:	d039      	beq.n	80048aa <I2C_ITError+0x102>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b11      	cmp	r3, #17
 800483a:	d002      	beq.n	8004842 <I2C_ITError+0x9a>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b21      	cmp	r3, #33	; 0x21
 8004840:	d133      	bne.n	80048aa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004850:	d107      	bne.n	8004862 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004860:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff f87e 	bl	8003968 <HAL_DMA_GetState>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d017      	beq.n	80048a2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	4a33      	ldr	r2, [pc, #204]	; (8004944 <I2C_ITError+0x19c>)
 8004878:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe ff0f 	bl	80036aa <HAL_DMA_Abort_IT>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d04d      	beq.n	800492e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800489c:	4610      	mov	r0, r2
 800489e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048a0:	e045      	b.n	800492e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f850 	bl	8004948 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048a8:	e041      	b.n	800492e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d039      	beq.n	8004926 <I2C_ITError+0x17e>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b12      	cmp	r3, #18
 80048b6:	d002      	beq.n	80048be <I2C_ITError+0x116>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b22      	cmp	r3, #34	; 0x22
 80048bc:	d133      	bne.n	8004926 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048cc:	d107      	bne.n	80048de <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff f840 	bl	8003968 <HAL_DMA_GetState>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d017      	beq.n	800491e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	4a14      	ldr	r2, [pc, #80]	; (8004944 <I2C_ITError+0x19c>)
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe fed1 	bl	80036aa <HAL_DMA_Abort_IT>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d011      	beq.n	8004932 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004918:	4610      	mov	r0, r2
 800491a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800491c:	e009      	b.n	8004932 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f812 	bl	8004948 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004924:	e005      	b.n	8004932 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f80e 	bl	8004948 <I2C_TreatErrorCallback>
  }
}
 800492c:	e002      	b.n	8004934 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800492e:	bf00      	nop
 8004930:	e000      	b.n	8004934 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004932:	bf00      	nop
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	ffff0000 	.word	0xffff0000
 8004940:	0800411d 	.word	0x0800411d
 8004944:	080049df 	.word	0x080049df

08004948 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b60      	cmp	r3, #96	; 0x60
 800495a:	d10e      	bne.n	800497a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fbc8 	bl	8004108 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004978:	e009      	b.n	800498e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff fbb3 	bl	80040f4 <HAL_I2C_ErrorCallback>
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d103      	bne.n	80049b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2200      	movs	r2, #0
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d007      	beq.n	80049d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699a      	ldr	r2, [r3, #24]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	619a      	str	r2, [r3, #24]
  }
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	2200      	movs	r2, #0
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	2200      	movs	r2, #0
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f7ff ff9b 	bl	8004948 <I2C_TreatErrorCallback>
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a2a:	887b      	ldrh	r3, [r7, #2]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00f      	beq.n	8004a54 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004a3a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a48:	2b28      	cmp	r3, #40	; 0x28
 8004a4a:	d003      	beq.n	8004a54 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a52:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00f      	beq.n	8004a7e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004a64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a72:	2b28      	cmp	r3, #40	; 0x28
 8004a74:	d003      	beq.n	8004a7e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da03      	bge.n	8004a8e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004a8c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a8e:	887b      	ldrh	r3, [r7, #2]
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d103      	bne.n	8004a9c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a9c:	887b      	ldrh	r3, [r7, #2]
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d103      	bne.n	8004aaa <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f043 0320 	orr.w	r3, r3, #32
 8004aa8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004aaa:	887b      	ldrh	r3, [r7, #2]
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d103      	bne.n	8004ab8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	43da      	mvns	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	400a      	ands	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]
}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d138      	bne.n	8004b5e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e032      	b.n	8004b60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2224      	movs	r2, #36	; 0x24
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b28:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e000      	b.n	8004b60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b5e:	2302      	movs	r3, #2
  }
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d139      	bne.n	8004bf6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e033      	b.n	8004bf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e000      	b.n	8004bf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
  }
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004c08:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <HAL_PWREx_GetVoltageRange+0x18>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40007000 	.word	0x40007000

08004c20 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004c28:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c30:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004c32:	f000 f861 	bl	8004cf8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c3c:	d101      	bne.n	8004c42 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e03e      	b.n	8004cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004c42:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4e:	d101      	bne.n	8004c54 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e035      	b.n	8004cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d101      	bne.n	8004c60 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e02f      	b.n	8004cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004c68:	4917      	ldr	r1, [pc, #92]	; (8004cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004c70:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	09db      	lsrs	r3, r3, #7
 8004c7e:	2232      	movs	r2, #50	; 0x32
 8004c80:	fb02 f303 	mul.w	r3, r2, r3
 8004c84:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	08db      	lsrs	r3, r3, #3
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c90:	e002      	b.n	8004c98 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca4:	d102      	bne.n	8004cac <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f2      	bne.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb8:	d101      	bne.n	8004cbe <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e000      	b.n	8004cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	20000000 	.word	0x20000000
 8004cd0:	0a7c5ac5 	.word	0x0a7c5ac5
 8004cd4:	cccccccd 	.word	0xcccccccd

08004cd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ce6:	6093      	str	r3, [r2, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40007000 	.word	0x40007000

08004cf8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e00a      	b.n	8004d2c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d103      	bne.n	8004d28 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	e001      	b.n	8004d2c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004d2c:	687b      	ldr	r3, [r7, #4]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40007000 	.word	0x40007000

08004d40 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f000 bcd0 	b.w	80056f4 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d54:	4ba3      	ldr	r3, [pc, #652]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d5e:	4ba1      	ldr	r3, [pc, #644]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80e9 	beq.w	8004f48 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d006      	beq.n	8004d8a <HAL_RCC_OscConfig+0x4a>
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	f040 8083 	bne.w	8004e8a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d17f      	bne.n	8004e8a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d8a:	4b96      	ldr	r3, [pc, #600]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d006      	beq.n	8004da4 <HAL_RCC_OscConfig+0x64>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f000 bca8 	b.w	80056f4 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da8:	4b8e      	ldr	r3, [pc, #568]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <HAL_RCC_OscConfig+0x7e>
 8004db4:	4b8b      	ldr	r3, [pc, #556]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dbc:	e005      	b.n	8004dca <HAL_RCC_OscConfig+0x8a>
 8004dbe:	4b89      	ldr	r3, [pc, #548]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d224      	bcs.n	8004e18 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 feca 	bl	8005b6c <RCC_SetFlashLatencyFromMSIRange>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f000 bc88 	b.w	80056f4 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004de4:	4b7f      	ldr	r3, [pc, #508]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a7e      	ldr	r2, [pc, #504]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004dea:	f043 0308 	orr.w	r3, r3, #8
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b7c      	ldr	r3, [pc, #496]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	4979      	ldr	r1, [pc, #484]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e02:	4b78      	ldr	r3, [pc, #480]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	4974      	ldr	r1, [pc, #464]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	604b      	str	r3, [r1, #4]
 8004e16:	e026      	b.n	8004e66 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e18:	4b72      	ldr	r3, [pc, #456]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a71      	ldr	r2, [pc, #452]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e1e:	f043 0308 	orr.w	r3, r3, #8
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4b6f      	ldr	r3, [pc, #444]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	496c      	ldr	r1, [pc, #432]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e36:	4b6b      	ldr	r3, [pc, #428]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	4967      	ldr	r1, [pc, #412]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fe89 	bl	8005b6c <RCC_SetFlashLatencyFromMSIRange>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f000 bc47 	b.w	80056f4 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e66:	f000 fe13 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4a5e      	ldr	r2, [pc, #376]	; (8004fe8 <HAL_RCC_OscConfig+0x2a8>)
 8004e6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e70:	4b5e      	ldr	r3, [pc, #376]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fc f8a1 	bl	8000fbc <HAL_InitTick>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d060      	beq.n	8004f46 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	f000 bc35 	b.w	80056f4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d039      	beq.n	8004f06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e92:	4b54      	ldr	r3, [pc, #336]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a53      	ldr	r2, [pc, #332]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e9e:	f7fd f895 	bl	8001fcc <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ea4:	e00f      	b.n	8004ec6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ea6:	f7fd f891 	bl	8001fcc <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d908      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eb4:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	f000 bc17 	b.w	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ec6:	4b47      	ldr	r3, [pc, #284]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0e9      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ed2:	4b44      	ldr	r3, [pc, #272]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a43      	ldr	r2, [pc, #268]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004ed8:	f043 0308 	orr.w	r3, r3, #8
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	4b41      	ldr	r3, [pc, #260]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	493e      	ldr	r1, [pc, #248]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ef0:	4b3c      	ldr	r3, [pc, #240]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	4939      	ldr	r1, [pc, #228]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
 8004f04:	e020      	b.n	8004f48 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f06:	4b37      	ldr	r3, [pc, #220]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a36      	ldr	r2, [pc, #216]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f12:	f7fd f85b 	bl	8001fcc <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f18:	e00e      	b.n	8004f38 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f1a:	f7fd f857 	bl	8001fcc <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d907      	bls.n	8004f38 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f28:	4b2e      	ldr	r3, [pc, #184]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e3dd      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f38:	4b2a      	ldr	r3, [pc, #168]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ea      	bne.n	8004f1a <HAL_RCC_OscConfig+0x1da>
 8004f44:	e000      	b.n	8004f48 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d07e      	beq.n	8005052 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d005      	beq.n	8004f66 <HAL_RCC_OscConfig+0x226>
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b0c      	cmp	r3, #12
 8004f5e:	d10e      	bne.n	8004f7e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d10b      	bne.n	8004f7e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f66:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d06e      	beq.n	8005050 <HAL_RCC_OscConfig+0x310>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d16a      	bne.n	8005050 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e3ba      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f86:	d106      	bne.n	8004f96 <HAL_RCC_OscConfig+0x256>
 8004f88:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a15      	ldr	r2, [pc, #84]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	e01d      	b.n	8004fd2 <HAL_RCC_OscConfig+0x292>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f9e:	d10c      	bne.n	8004fba <HAL_RCC_OscConfig+0x27a>
 8004fa0:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0f      	ldr	r2, [pc, #60]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e00b      	b.n	8004fd2 <HAL_RCC_OscConfig+0x292>
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a09      	ldr	r2, [pc, #36]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a06      	ldr	r2, [pc, #24]	; (8004fe4 <HAL_RCC_OscConfig+0x2a4>)
 8004fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d020      	beq.n	800501c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fc fff7 	bl	8001fcc <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fe0:	e015      	b.n	800500e <HAL_RCC_OscConfig+0x2ce>
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	20000000 	.word	0x20000000
 8004fec:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff0:	f7fc ffec 	bl	8001fcc <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b64      	cmp	r3, #100	; 0x64
 8004ffc:	d907      	bls.n	800500e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ffe:	4b9f      	ldr	r3, [pc, #636]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e372      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500e:	4b9b      	ldr	r3, [pc, #620]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0ea      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x2b0>
 800501a:	e01a      	b.n	8005052 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fc ffd6 	bl	8001fcc <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005022:	e00e      	b.n	8005042 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005024:	f7fc ffd2 	bl	8001fcc <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d907      	bls.n	8005042 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005032:	4b92      	ldr	r3, [pc, #584]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e358      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005042:	4b8e      	ldr	r3, [pc, #568]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1ea      	bne.n	8005024 <HAL_RCC_OscConfig+0x2e4>
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d06c      	beq.n	8005138 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d005      	beq.n	8005070 <HAL_RCC_OscConfig+0x330>
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d119      	bne.n	800509e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d116      	bne.n	800509e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005070:	4b82      	ldr	r3, [pc, #520]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_OscConfig+0x348>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e335      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005088:	4b7c      	ldr	r3, [pc, #496]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	4979      	ldr	r1, [pc, #484]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800509c:	e04c      	b.n	8005138 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d029      	beq.n	80050fa <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a6:	4b75      	ldr	r3, [pc, #468]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a74      	ldr	r2, [pc, #464]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fc ff8b 	bl	8001fcc <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b8:	e00e      	b.n	80050d8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ba:	f7fc ff87 	bl	8001fcc <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d907      	bls.n	80050d8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c8:	4b6c      	ldr	r3, [pc, #432]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e30d      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d8:	4b68      	ldr	r3, [pc, #416]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ea      	beq.n	80050ba <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e4:	4b65      	ldr	r3, [pc, #404]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	061b      	lsls	r3, r3, #24
 80050f2:	4962      	ldr	r1, [pc, #392]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	604b      	str	r3, [r1, #4]
 80050f8:	e01e      	b.n	8005138 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050fa:	4b60      	ldr	r3, [pc, #384]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a5f      	ldr	r2, [pc, #380]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fc ff61 	bl	8001fcc <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800510c:	e00e      	b.n	800512c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510e:	f7fc ff5d 	bl	8001fcc <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d907      	bls.n	800512c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800511c:	4b57      	ldr	r3, [pc, #348]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e2e3      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800512c:	4b53      	ldr	r3, [pc, #332]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ea      	bne.n	800510e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d05f      	beq.n	8005204 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d038      	beq.n	80051be <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005154:	4b49      	ldr	r3, [pc, #292]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800515a:	4a48      	ldr	r2, [pc, #288]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 800515c:	f023 0310 	bic.w	r3, r3, #16
 8005160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005164:	e007      	b.n	8005176 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005166:	4b45      	ldr	r3, [pc, #276]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800516c:	4a43      	ldr	r2, [pc, #268]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 800516e:	f043 0310 	orr.w	r3, r3, #16
 8005172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005176:	4b41      	ldr	r3, [pc, #260]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517c:	4a3f      	ldr	r2, [pc, #252]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fc ff21 	bl	8001fcc <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800518c:	e00f      	b.n	80051ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518e:	f7fc ff1d 	bl	8001fcc <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b07      	cmp	r3, #7
 800519a:	d908      	bls.n	80051ae <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800519c:	4b37      	ldr	r3, [pc, #220]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e2a2      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051ae:	4b33      	ldr	r3, [pc, #204]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80051b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0e8      	beq.n	800518e <HAL_RCC_OscConfig+0x44e>
 80051bc:	e022      	b.n	8005204 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051be:	4b2f      	ldr	r3, [pc, #188]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80051c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c4:	4a2d      	ldr	r2, [pc, #180]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ce:	f7fc fefd 	bl	8001fcc <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051d4:	e00f      	b.n	80051f6 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d6:	f7fc fef9 	bl	8001fcc <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b07      	cmp	r3, #7
 80051e2:	d908      	bls.n	80051f6 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051e4:	4b25      	ldr	r3, [pc, #148]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80051e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e27e      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051f6:	4b21      	ldr	r3, [pc, #132]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 80051f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e8      	bne.n	80051d6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8131 	beq.w	8005474 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005212:	2300      	movs	r3, #0
 8005214:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005216:	4b19      	ldr	r3, [pc, #100]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10d      	bne.n	800523e <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005222:	4b16      	ldr	r3, [pc, #88]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522c:	6593      	str	r3, [r2, #88]	; 0x58
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <HAL_RCC_OscConfig+0x53c>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523a:	2301      	movs	r3, #1
 800523c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800523e:	4b10      	ldr	r3, [pc, #64]	; (8005280 <HAL_RCC_OscConfig+0x540>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d122      	bne.n	8005290 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800524a:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <HAL_RCC_OscConfig+0x540>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <HAL_RCC_OscConfig+0x540>)
 8005250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005256:	f7fc feb9 	bl	8001fcc <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800525c:	e012      	b.n	8005284 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800525e:	f7fc feb5 	bl	8001fcc <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d90b      	bls.n	8005284 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <HAL_RCC_OscConfig+0x540>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e23b      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
 800527c:	40021000 	.word	0x40021000
 8005280:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005284:	4bb8      	ldr	r3, [pc, #736]	; (8005568 <HAL_RCC_OscConfig+0x828>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0e6      	beq.n	800525e <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01f      	beq.n	80052dc <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052a8:	4bb0      	ldr	r3, [pc, #704]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ae:	4aaf      	ldr	r2, [pc, #700]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052b0:	f043 0304 	orr.w	r3, r3, #4
 80052b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052b8:	4bac      	ldr	r3, [pc, #688]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052be:	4aab      	ldr	r2, [pc, #684]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052c8:	e018      	b.n	80052fc <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052ca:	4ba8      	ldr	r3, [pc, #672]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d0:	4aa6      	ldr	r2, [pc, #664]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052da:	e00f      	b.n	80052fc <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052dc:	4ba3      	ldr	r3, [pc, #652]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	4aa2      	ldr	r2, [pc, #648]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052ec:	4b9f      	ldr	r3, [pc, #636]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	4a9e      	ldr	r2, [pc, #632]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80052f4:	f023 0304 	bic.w	r3, r3, #4
 80052f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d068      	beq.n	80053d6 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005304:	f7fc fe62 	bl	8001fcc <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800530a:	e011      	b.n	8005330 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530c:	f7fc fe5e 	bl	8001fcc <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	; 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d908      	bls.n	8005330 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531e:	4b93      	ldr	r3, [pc, #588]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e1e1      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005330:	4b8e      	ldr	r3, [pc, #568]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0e6      	beq.n	800530c <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d022      	beq.n	8005390 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800534a:	4b88      	ldr	r3, [pc, #544]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	4a86      	ldr	r2, [pc, #536]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800535a:	e011      	b.n	8005380 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fc fe36 	bl	8001fcc <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	; 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d908      	bls.n	8005380 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800536e:	4b7f      	ldr	r3, [pc, #508]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e1b9      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005380:	4b7a      	ldr	r3, [pc, #488]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0e6      	beq.n	800535c <HAL_RCC_OscConfig+0x61c>
 800538e:	e068      	b.n	8005462 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005390:	4b76      	ldr	r3, [pc, #472]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	4a75      	ldr	r2, [pc, #468]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053a0:	e011      	b.n	80053c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fc fe13 	bl	8001fcc <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d908      	bls.n	80053c6 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053b4:	4b6d      	ldr	r3, [pc, #436]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e196      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053c6:	4b69      	ldr	r3, [pc, #420]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e6      	bne.n	80053a2 <HAL_RCC_OscConfig+0x662>
 80053d4:	e045      	b.n	8005462 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d6:	f7fc fdf9 	bl	8001fcc <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053dc:	e011      	b.n	8005402 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fc fdf5 	bl	8001fcc <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d908      	bls.n	8005402 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053f0:	4b5e      	ldr	r3, [pc, #376]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e178      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005402:	4b5a      	ldr	r3, [pc, #360]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e6      	bne.n	80053de <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005410:	4b56      	ldr	r3, [pc, #344]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	d021      	beq.n	8005462 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800541e:	4b53      	ldr	r3, [pc, #332]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	4a51      	ldr	r2, [pc, #324]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800542e:	e011      	b.n	8005454 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005430:	f7fc fdcc 	bl	8001fcc <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f241 3288 	movw	r2, #5000	; 0x1388
 800543e:	4293      	cmp	r3, r2
 8005440:	d908      	bls.n	8005454 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005442:	4b4a      	ldr	r3, [pc, #296]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e14f      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005454:	4b45      	ldr	r3, [pc, #276]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e6      	bne.n	8005430 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005462:	7ffb      	ldrb	r3, [r7, #31]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b40      	ldr	r3, [pc, #256]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	4a3f      	ldr	r2, [pc, #252]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005472:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d04a      	beq.n	8005516 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	d023      	beq.n	80054d0 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005488:	4b38      	ldr	r3, [pc, #224]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 800548a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800548e:	4a37      	ldr	r2, [pc, #220]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005498:	f7fc fd98 	bl	8001fcc <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800549e:	e00f      	b.n	80054c0 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054a0:	f7fc fd94 	bl	8001fcc <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d908      	bls.n	80054c0 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054ae:	4b2f      	ldr	r3, [pc, #188]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80054b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e119      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054c0:	4b2a      	ldr	r3, [pc, #168]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80054c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0e8      	beq.n	80054a0 <HAL_RCC_OscConfig+0x760>
 80054ce:	e022      	b.n	8005516 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054d0:	4b26      	ldr	r3, [pc, #152]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80054d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d6:	4a25      	ldr	r2, [pc, #148]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80054d8:	f023 0301 	bic.w	r3, r3, #1
 80054dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e0:	f7fc fd74 	bl	8001fcc <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054e6:	e00f      	b.n	8005508 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e8:	f7fc fd70 	bl	8001fcc <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d908      	bls.n	8005508 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054f6:	4b1d      	ldr	r3, [pc, #116]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 80054f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e0f5      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005508:	4b18      	ldr	r3, [pc, #96]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 800550a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e8      	bne.n	80054e8 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80e9 	beq.w	80056f2 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005520:	4b12      	ldr	r3, [pc, #72]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 030c 	and.w	r3, r3, #12
 8005528:	2b0c      	cmp	r3, #12
 800552a:	f000 80a3 	beq.w	8005674 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	2b02      	cmp	r3, #2
 8005534:	d16a      	bne.n	800560c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a0c      	ldr	r2, [pc, #48]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 800553c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005542:	f7fc fd43 	bl	8001fcc <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005548:	e012      	b.n	8005570 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554a:	f7fc fd3f 	bl	8001fcc <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d90b      	bls.n	8005570 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <HAL_RCC_OscConfig+0x82c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e0c5      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
 8005568:	40007000 	.word	0x40007000
 800556c:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005570:	4b62      	ldr	r3, [pc, #392]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800557c:	4b5f      	ldr	r3, [pc, #380]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	4b5f      	ldr	r3, [pc, #380]	; (8005700 <HAL_RCC_OscConfig+0x9c0>)
 8005582:	4013      	ands	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800558c:	3a01      	subs	r2, #1
 800558e:	0112      	lsls	r2, r2, #4
 8005590:	4311      	orrs	r1, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005596:	0212      	lsls	r2, r2, #8
 8005598:	4311      	orrs	r1, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800559e:	0852      	lsrs	r2, r2, #1
 80055a0:	3a01      	subs	r2, #1
 80055a2:	0552      	lsls	r2, r2, #21
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055aa:	0852      	lsrs	r2, r2, #1
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0652      	lsls	r2, r2, #25
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055b6:	06d2      	lsls	r2, r2, #27
 80055b8:	430a      	orrs	r2, r1
 80055ba:	4950      	ldr	r1, [pc, #320]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c0:	4b4e      	ldr	r3, [pc, #312]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a4d      	ldr	r2, [pc, #308]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055cc:	4b4b      	ldr	r3, [pc, #300]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a4a      	ldr	r2, [pc, #296]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 80055d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fc fcf8 	bl	8001fcc <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055de:	e00e      	b.n	80055fe <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fc fcf4 	bl	8001fcc <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d907      	bls.n	80055fe <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ee:	4b43      	ldr	r3, [pc, #268]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e07a      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055fe:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ea      	beq.n	80055e0 <HAL_RCC_OscConfig+0x8a0>
 800560a:	e072      	b.n	80056f2 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560c:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a3a      	ldr	r2, [pc, #232]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 8005612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005616:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005618:	4b38      	ldr	r3, [pc, #224]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005624:	4b35      	ldr	r3, [pc, #212]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4a34      	ldr	r2, [pc, #208]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005630:	4b32      	ldr	r3, [pc, #200]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4a31      	ldr	r2, [pc, #196]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 8005636:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800563a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fc fcc4 	bl	8001fcc <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005646:	e00e      	b.n	8005666 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005648:	f7fc fcc0 	bl	8001fcc <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d907      	bls.n	8005666 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005656:	4b29      	ldr	r3, [pc, #164]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e046      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005666:	4b25      	ldr	r3, [pc, #148]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1ea      	bne.n	8005648 <HAL_RCC_OscConfig+0x908>
 8005672:	e03e      	b.n	80056f2 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e039      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005680:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <HAL_RCC_OscConfig+0x9bc>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f003 0203 	and.w	r2, r3, #3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	429a      	cmp	r2, r3
 8005692:	d12c      	bne.n	80056ee <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569e:	3b01      	subs	r3, #1
 80056a0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d123      	bne.n	80056ee <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d11b      	bne.n	80056ee <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d113      	bne.n	80056ee <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	3b01      	subs	r3, #1
 80056d4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d109      	bne.n	80056ee <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	3b01      	subs	r3, #1
 80056e8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d001      	beq.n	80056f2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40021000 	.word	0x40021000
 8005700:	019f800c 	.word	0x019f800c

08005704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e10d      	b.n	8005938 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800571c:	4b88      	ldr	r3, [pc, #544]	; (8005940 <HAL_RCC_ClockConfig+0x23c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d910      	bls.n	800574c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b85      	ldr	r3, [pc, #532]	; (8005940 <HAL_RCC_ClockConfig+0x23c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f023 020f 	bic.w	r2, r3, #15
 8005732:	4983      	ldr	r1, [pc, #524]	; (8005940 <HAL_RCC_ClockConfig+0x23c>)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	4313      	orrs	r3, r2
 8005738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573a:	4b81      	ldr	r3, [pc, #516]	; (8005940 <HAL_RCC_ClockConfig+0x23c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d001      	beq.n	800574c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0f5      	b.n	8005938 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8094 	beq.w	8005882 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b03      	cmp	r3, #3
 8005760:	d134      	bne.n	80057cc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005762:	4b78      	ldr	r3, [pc, #480]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e0e2      	b.n	8005938 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005772:	f000 fa5f 	bl	8005c34 <RCC_GetSysClockFreqFromPLLSource>
 8005776:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4a73      	ldr	r2, [pc, #460]	; (8005948 <HAL_RCC_ClockConfig+0x244>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d956      	bls.n	800582e <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005780:	4b70      	ldr	r3, [pc, #448]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800578c:	4b6d      	ldr	r3, [pc, #436]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005794:	4a6b      	ldr	r2, [pc, #428]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 8005796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e045      	b.n	800582e <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d03f      	beq.n	800582e <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d13b      	bne.n	800582e <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057b6:	4b63      	ldr	r3, [pc, #396]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057be:	4a61      	ldr	r2, [pc, #388]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 80057c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e030      	b.n	800582e <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d107      	bne.n	80057e4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d4:	4b5b      	ldr	r3, [pc, #364]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d115      	bne.n	800580c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0a9      	b.n	8005938 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057ec:	4b55      	ldr	r3, [pc, #340]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e09d      	b.n	8005938 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057fc:	4b51      	ldr	r3, [pc, #324]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e095      	b.n	8005938 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800580c:	f000 f8a2 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8005810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4a4c      	ldr	r2, [pc, #304]	; (8005948 <HAL_RCC_ClockConfig+0x244>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d909      	bls.n	800582e <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800581a:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005822:	4a48      	ldr	r2, [pc, #288]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 8005824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005828:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800582a:	2380      	movs	r3, #128	; 0x80
 800582c:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800582e:	4b45      	ldr	r3, [pc, #276]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f023 0203 	bic.w	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4942      	ldr	r1, [pc, #264]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 800583c:	4313      	orrs	r3, r2
 800583e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005840:	f7fc fbc4 	bl	8001fcc <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	e013      	b.n	8005870 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005848:	f7fc fbc0 	bl	8001fcc <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d90a      	bls.n	8005870 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e063      	b.n	8005938 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005870:	4b34      	ldr	r3, [pc, #208]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 020c 	and.w	r2, r3, #12
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	429a      	cmp	r2, r3
 8005880:	d1e2      	bne.n	8005848 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800588e:	4b2d      	ldr	r3, [pc, #180]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	492a      	ldr	r1, [pc, #168]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 800589c:	4313      	orrs	r3, r2
 800589e:	608b      	str	r3, [r1, #8]
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b80      	cmp	r3, #128	; 0x80
 80058a6:	d105      	bne.n	80058b4 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058a8:	4b26      	ldr	r3, [pc, #152]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4a25      	ldr	r2, [pc, #148]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 80058ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b2:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058b4:	4b22      	ldr	r3, [pc, #136]	; (8005940 <HAL_RCC_ClockConfig+0x23c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d210      	bcs.n	80058e4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c2:	4b1f      	ldr	r3, [pc, #124]	; (8005940 <HAL_RCC_ClockConfig+0x23c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f023 020f 	bic.w	r2, r3, #15
 80058ca:	491d      	ldr	r1, [pc, #116]	; (8005940 <HAL_RCC_ClockConfig+0x23c>)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d2:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <HAL_RCC_ClockConfig+0x23c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e029      	b.n	8005938 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058f0:	4b14      	ldr	r3, [pc, #80]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4911      	ldr	r1, [pc, #68]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4909      	ldr	r1, [pc, #36]	; (8005944 <HAL_RCC_ClockConfig+0x240>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005922:	f000 f8b5 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8005926:	4603      	mov	r3, r0
 8005928:	4a08      	ldr	r2, [pc, #32]	; (800594c <HAL_RCC_ClockConfig+0x248>)
 800592a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800592c:	4b08      	ldr	r3, [pc, #32]	; (8005950 <HAL_RCC_ClockConfig+0x24c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fb fb43 	bl	8000fbc <HAL_InitTick>
 8005936:	4603      	mov	r3, r0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40022000 	.word	0x40022000
 8005944:	40021000 	.word	0x40021000
 8005948:	04c4b400 	.word	0x04c4b400
 800594c:	20000000 	.word	0x20000000
 8005950:	20000004 	.word	0x20000004

08005954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005962:	4b47      	ldr	r3, [pc, #284]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800596c:	4b44      	ldr	r3, [pc, #272]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x34>
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b0c      	cmp	r3, #12
 8005980:	d121      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d11e      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005988:	4b3d      	ldr	r3, [pc, #244]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005994:	4b3a      	ldr	r3, [pc, #232]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e005      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059a4:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80059b0:	4a34      	ldr	r2, [pc, #208]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x130>)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10d      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059c4:	e00a      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d102      	bne.n	80059d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059cc:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x134>)
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e004      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059d8:	4b2c      	ldr	r3, [pc, #176]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x138>)
 80059da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	d146      	bne.n	8005a70 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80059e2:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059ec:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	3301      	adds	r3, #1
 80059f8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d003      	beq.n	8005a08 <HAL_RCC_GetSysClockFreq+0xb4>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d00d      	beq.n	8005a22 <HAL_RCC_GetSysClockFreq+0xce>
 8005a06:	e019      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a08:	4a1f      	ldr	r2, [pc, #124]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x134>)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	4a1b      	ldr	r2, [pc, #108]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a12:	68d2      	ldr	r2, [r2, #12]
 8005a14:	0a12      	lsrs	r2, r2, #8
 8005a16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	617b      	str	r3, [r7, #20]
        break;
 8005a20:	e019      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a22:	4a1a      	ldr	r2, [pc, #104]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x138>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a2c:	68d2      	ldr	r2, [r2, #12]
 8005a2e:	0a12      	lsrs	r2, r2, #8
 8005a30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a34:	fb02 f303 	mul.w	r3, r2, r3
 8005a38:	617b      	str	r3, [r7, #20]
        break;
 8005a3a:	e00c      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a44:	4a0e      	ldr	r2, [pc, #56]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a46:	68d2      	ldr	r2, [r2, #12]
 8005a48:	0a12      	lsrs	r2, r2, #8
 8005a4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	617b      	str	r3, [r7, #20]
        break;
 8005a54:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	0e5b      	lsrs	r3, r3, #25
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	3301      	adds	r3, #1
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a70:	69bb      	ldr	r3, [r7, #24]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3724      	adds	r7, #36	; 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000
 8005a84:	0800c404 	.word	0x0800c404
 8005a88:	00f42400 	.word	0x00f42400
 8005a8c:	007a1200 	.word	0x007a1200

08005a90 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005a94:	f7ff ff5e 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <HAL_RCC_GetHCLKFreq+0x20>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	091b      	lsrs	r3, r3, #4
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	4903      	ldr	r1, [pc, #12]	; (8005ab4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005aa6:	5ccb      	ldrb	r3, [r1, r3]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	0800c3ec 	.word	0x0800c3ec

08005ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005abc:	f7ff ffe8 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4903      	ldr	r1, [pc, #12]	; (8005adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	0800c3fc 	.word	0x0800c3fc

08005ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ae4:	f7ff ffd4 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0adb      	lsrs	r3, r3, #11
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	4903      	ldr	r1, [pc, #12]	; (8005b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005af6:	5ccb      	ldrb	r3, [r1, r3]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40021000 	.word	0x40021000
 8005b04:	0800c3fc 	.word	0x0800c3fc

08005b08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	220f      	movs	r2, #15
 8005b16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b18:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <HAL_RCC_GetClockConfig+0x5c>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 0203 	and.w	r2, r3, #3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b24:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <HAL_RCC_GetClockConfig+0x5c>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b30:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <HAL_RCC_GetClockConfig+0x5c>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b3c:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <HAL_RCC_GetClockConfig+0x5c>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	08db      	lsrs	r3, r3, #3
 8005b42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <HAL_RCC_GetClockConfig+0x60>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 020f 	and.w	r2, r3, #15
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	601a      	str	r2, [r3, #0]
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40022000 	.word	0x40022000

08005b6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b78:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b84:	f7ff f83e 	bl	8004c04 <HAL_PWREx_GetVoltageRange>
 8005b88:	6138      	str	r0, [r7, #16]
 8005b8a:	e014      	b.n	8005bb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b8c:	4b27      	ldr	r3, [pc, #156]	; (8005c2c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b90:	4a26      	ldr	r2, [pc, #152]	; (8005c2c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b96:	6593      	str	r3, [r2, #88]	; 0x58
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ba4:	f7ff f82e 	bl	8004c04 <HAL_PWREx_GetVoltageRange>
 8005ba8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005baa:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	4a1f      	ldr	r2, [pc, #124]	; (8005c2c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc2:	d10b      	bne.n	8005bdc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b80      	cmp	r3, #128	; 0x80
 8005bc8:	d919      	bls.n	8005bfe <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2ba0      	cmp	r3, #160	; 0xa0
 8005bce:	d902      	bls.n	8005bd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005bd4:	e013      	b.n	8005bfe <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005bda:	e010      	b.n	8005bfe <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b80      	cmp	r3, #128	; 0x80
 8005be0:	d902      	bls.n	8005be8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005be2:	2303      	movs	r3, #3
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e00a      	b.n	8005bfe <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b80      	cmp	r3, #128	; 0x80
 8005bec:	d102      	bne.n	8005bf4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bee:	2302      	movs	r3, #2
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	e004      	b.n	8005bfe <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b70      	cmp	r3, #112	; 0x70
 8005bf8:	d101      	bne.n	8005bfe <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 020f 	bic.w	r2, r3, #15
 8005c06:	490a      	ldr	r1, [pc, #40]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	40022000 	.word	0x40022000

08005c34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005c3e:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d118      	bne.n	8005c7c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c4a:	4b33      	ldr	r3, [pc, #204]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d107      	bne.n	8005c66 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c56:	4b30      	ldr	r3, [pc, #192]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e005      	b.n	8005c72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c66:	4b2c      	ldr	r3, [pc, #176]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005c72:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c7c:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	3301      	adds	r3, #1
 8005c92:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d003      	beq.n	8005ca2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d00d      	beq.n	8005cbc <RCC_GetSysClockFreqFromPLLSource+0x88>
 8005ca0:	e019      	b.n	8005cd6 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ca2:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005caa:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005cac:	68d2      	ldr	r2, [r2, #12]
 8005cae:	0a12      	lsrs	r2, r2, #8
 8005cb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cb4:	fb02 f303 	mul.w	r3, r2, r3
 8005cb8:	613b      	str	r3, [r7, #16]
      break;
 8005cba:	e019      	b.n	8005cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cbc:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc4:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005cc6:	68d2      	ldr	r2, [r2, #12]
 8005cc8:	0a12      	lsrs	r2, r2, #8
 8005cca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	613b      	str	r3, [r7, #16]
      break;
 8005cd4:	e00c      	b.n	8005cf0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cde:	4a0e      	ldr	r2, [pc, #56]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005ce0:	68d2      	ldr	r2, [r2, #12]
 8005ce2:	0a12      	lsrs	r2, r2, #8
 8005ce4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ce8:	fb02 f303 	mul.w	r3, r2, r3
 8005cec:	613b      	str	r3, [r7, #16]
      break;
 8005cee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	0e5b      	lsrs	r3, r3, #25
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005d0a:	683b      	ldr	r3, [r7, #0]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	0800c404 	.word	0x0800c404
 8005d20:	00f42400 	.word	0x00f42400
 8005d24:	007a1200 	.word	0x007a1200

08005d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d30:	2300      	movs	r3, #0
 8005d32:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d34:	2300      	movs	r3, #0
 8005d36:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d040      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d48:	2b80      	cmp	r3, #128	; 0x80
 8005d4a:	d02a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d4c:	2b80      	cmp	r3, #128	; 0x80
 8005d4e:	d825      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d50:	2b60      	cmp	r3, #96	; 0x60
 8005d52:	d026      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d54:	2b60      	cmp	r3, #96	; 0x60
 8005d56:	d821      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d58:	2b40      	cmp	r3, #64	; 0x40
 8005d5a:	d006      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	d81d      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d010      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d68:	e018      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d6a:	4b8f      	ldr	r3, [pc, #572]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	4a8e      	ldr	r2, [pc, #568]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d74:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d76:	e015      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fb56 	bl	8006430 <RCCEx_PLLSAI1_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d88:	e00c      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3320      	adds	r3, #32
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fc33 	bl	80065fc <RCCEx_PLLSAI2_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d9a:	e003      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	77fb      	strb	r3, [r7, #31]
        break;
 8005da0:	e000      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da4:	7ffb      	ldrb	r3, [r7, #31]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005daa:	4b7f      	ldr	r3, [pc, #508]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005db0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db8:	497b      	ldr	r1, [pc, #492]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005dc0:	e001      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	7ffb      	ldrb	r3, [r7, #31]
 8005dc4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d047      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dda:	d030      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de0:	d82a      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de6:	d02a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dec:	d824      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df2:	d008      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df8:	d81e      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e02:	d010      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e04:	e018      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e06:	4b68      	ldr	r3, [pc, #416]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	4a67      	ldr	r2, [pc, #412]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e10:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005e12:	e015      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fb08 	bl	8006430 <RCCEx_PLLSAI1_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005e24:	e00c      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3320      	adds	r3, #32
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fbe5 	bl	80065fc <RCCEx_PLLSAI2_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005e36:	e003      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	77fb      	strb	r3, [r7, #31]
        break;
 8005e3c:	e000      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e40:	7ffb      	ldrb	r3, [r7, #31]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10b      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e46:	4b58      	ldr	r3, [pc, #352]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	4954      	ldr	r1, [pc, #336]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e5c:	e001      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5e:	7ffb      	ldrb	r3, [r7, #31]
 8005e60:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80ab 	beq.w	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e70:	2300      	movs	r3, #0
 8005e72:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e74:	4b4c      	ldr	r3, [pc, #304]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10d      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e80:	4b49      	ldr	r3, [pc, #292]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e84:	4a48      	ldr	r2, [pc, #288]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e8c:	4b46      	ldr	r3, [pc, #280]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e9c:	4b43      	ldr	r3, [pc, #268]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a42      	ldr	r2, [pc, #264]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ea8:	f7fc f890 	bl	8001fcc <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eae:	e00f      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb0:	f7fc f88c 	bl	8001fcc <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d908      	bls.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ebe:	4b3b      	ldr	r3, [pc, #236]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d109      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8005ece:	e006      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed0:	4b36      	ldr	r3, [pc, #216]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0e9      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8005ede:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005ee0:	7ffb      	ldrb	r3, [r7, #31]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d164      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ee6:	4b30      	ldr	r3, [pc, #192]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01f      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d019      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f04:	4b28      	ldr	r3, [pc, #160]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f10:	4b25      	ldr	r3, [pc, #148]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f16:	4a24      	ldr	r2, [pc, #144]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f20:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f26:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f30:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01f      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f42:	f7fc f843 	bl	8001fcc <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f48:	e012      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4a:	f7fc f83f 	bl	8001fcc <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d909      	bls.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f5c:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005f6e:	e007      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f70:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0e5      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005f80:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005f82:	7ffb      	ldrb	r3, [r7, #31]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10c      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f88:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f98:	4903      	ldr	r1, [pc, #12]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fa2:	7ffb      	ldrb	r3, [r7, #31]
 8005fa4:	77bb      	strb	r3, [r7, #30]
 8005fa6:	e005      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	7ffb      	ldrb	r3, [r7, #31]
 8005fb2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fba:	4baf      	ldr	r3, [pc, #700]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbe:	4aae      	ldr	r2, [pc, #696]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd2:	4ba9      	ldr	r3, [pc, #676]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f023 0203 	bic.w	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe0:	49a5      	ldr	r1, [pc, #660]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ff4:	4ba0      	ldr	r3, [pc, #640]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f023 020c 	bic.w	r2, r3, #12
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	499d      	ldr	r1, [pc, #628]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006016:	4b98      	ldr	r3, [pc, #608]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	4994      	ldr	r1, [pc, #592]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006038:	4b8f      	ldr	r3, [pc, #572]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	498c      	ldr	r1, [pc, #560]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800605a:	4b87      	ldr	r3, [pc, #540]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006068:	4983      	ldr	r1, [pc, #524]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800607c:	4b7e      	ldr	r3, [pc, #504]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800608a:	497b      	ldr	r1, [pc, #492]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800609e:	4b76      	ldr	r3, [pc, #472]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ac:	4972      	ldr	r1, [pc, #456]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060c0:	4b6d      	ldr	r3, [pc, #436]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	496a      	ldr	r1, [pc, #424]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80060e2:	4b65      	ldr	r3, [pc, #404]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f0:	4961      	ldr	r1, [pc, #388]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d031      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800610c:	d00e      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800610e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006112:	d814      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d015      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800611c:	d10f      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800611e:	4b56      	ldr	r3, [pc, #344]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	4a55      	ldr	r2, [pc, #340]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006128:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800612a:	e00c      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f97c 	bl	8006430 <RCCEx_PLLSAI1_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	77fb      	strb	r3, [r7, #31]
        break;
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8006144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006146:	7ffb      	ldrb	r3, [r7, #31]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800614c:	4b4a      	ldr	r3, [pc, #296]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006152:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615a:	4947      	ldr	r1, [pc, #284]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006162:	e001      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	7ffb      	ldrb	r3, [r7, #31]
 8006166:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006174:	4b40      	ldr	r3, [pc, #256]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	493d      	ldr	r1, [pc, #244]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006196:	4b38      	ldr	r3, [pc, #224]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a4:	4934      	ldr	r1, [pc, #208]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061b8:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c6:	492c      	ldr	r1, [pc, #176]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061da:	4b27      	ldr	r3, [pc, #156]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80061dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061e0:	f023 0203 	bic.w	r2, r3, #3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e8:	4923      	ldr	r1, [pc, #140]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d028      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061fc:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620a:	491b      	ldr	r1, [pc, #108]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800621a:	d106      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800621c:	4b16      	ldr	r3, [pc, #88]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4a15      	ldr	r2, [pc, #84]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006226:	60d3      	str	r3, [r2, #12]
 8006228:	e011      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800622e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006232:	d10c      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	2101      	movs	r1, #1
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f8f8 	bl	8006430 <RCCEx_PLLSAI1_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8006244:	7ffb      	ldrb	r3, [r7, #31]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 800624a:	7ffb      	ldrb	r3, [r7, #31]
 800624c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d04d      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006262:	d10b      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800626a:	4a03      	ldr	r2, [pc, #12]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800626c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006270:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006274:	e015      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006276:	bf00      	nop
 8006278:	40021000 	.word	0x40021000
 800627c:	4b6b      	ldr	r3, [pc, #428]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800628a:	4968      	ldr	r1, [pc, #416]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006292:	4b66      	ldr	r3, [pc, #408]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006298:	4a64      	ldr	r2, [pc, #400]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800629a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062aa:	d10d      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3304      	adds	r3, #4
 80062b0:	2101      	movs	r1, #1
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f8bc 	bl	8006430 <RCCEx_PLLSAI1_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80062bc:	7ffb      	ldrb	r3, [r7, #31]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d019      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80062c2:	7ffb      	ldrb	r3, [r7, #31]
 80062c4:	77bb      	strb	r3, [r7, #30]
 80062c6:	e016      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d0:	d106      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d2:	4b56      	ldr	r3, [pc, #344]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	4a55      	ldr	r2, [pc, #340]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062dc:	60d3      	str	r3, [r2, #12]
 80062de:	e00a      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062e8:	d105      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062ea:	4b50      	ldr	r3, [pc, #320]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	4a4f      	ldr	r2, [pc, #316]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d028      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006302:	4b4a      	ldr	r3, [pc, #296]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006310:	4946      	ldr	r1, [pc, #280]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800631c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006320:	d106      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006322:	4b42      	ldr	r3, [pc, #264]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	4a41      	ldr	r2, [pc, #260]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800632c:	60d3      	str	r3, [r2, #12]
 800632e:	e011      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006338:	d10c      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3304      	adds	r3, #4
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f000 f875 	bl	8006430 <RCCEx_PLLSAI1_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800634a:	7ffb      	ldrb	r3, [r7, #31]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8006350:	7ffb      	ldrb	r3, [r7, #31]
 8006352:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01e      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006360:	4b32      	ldr	r3, [pc, #200]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006370:	492e      	ldr	r1, [pc, #184]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006382:	d10c      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	2102      	movs	r1, #2
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f850 	bl	8006430 <RCCEx_PLLSAI1_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006394:	7ffb      	ldrb	r3, [r7, #31]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800639a:	7ffb      	ldrb	r3, [r7, #31]
 800639c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063aa:	4b20      	ldr	r3, [pc, #128]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063b0:	f023 0204 	bic.w	r2, r3, #4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ba:	491c      	ldr	r1, [pc, #112]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063ce:	4b17      	ldr	r3, [pc, #92]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063d4:	f023 0218 	bic.w	r2, r3, #24
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063de:	4913      	ldr	r1, [pc, #76]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d017      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063f2:	4b0e      	ldr	r3, [pc, #56]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006402:	490a      	ldr	r1, [pc, #40]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006414:	d105      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	4a04      	ldr	r2, [pc, #16]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800641c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006420:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006422:	7fbb      	ldrb	r3, [r7, #30]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40021000 	.word	0x40021000

08006430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d018      	beq.n	8006478 <RCCEx_PLLSAI1_Config+0x48>
 8006446:	2b03      	cmp	r3, #3
 8006448:	d81f      	bhi.n	800648a <RCCEx_PLLSAI1_Config+0x5a>
 800644a:	2b01      	cmp	r3, #1
 800644c:	d002      	beq.n	8006454 <RCCEx_PLLSAI1_Config+0x24>
 800644e:	2b02      	cmp	r3, #2
 8006450:	d009      	beq.n	8006466 <RCCEx_PLLSAI1_Config+0x36>
 8006452:	e01a      	b.n	800648a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006454:	4b65      	ldr	r3, [pc, #404]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d117      	bne.n	8006490 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006464:	e014      	b.n	8006490 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006466:	4b61      	ldr	r3, [pc, #388]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800646e:	2b00      	cmp	r3, #0
 8006470:	d110      	bne.n	8006494 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006476:	e00d      	b.n	8006494 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006478:	4b5c      	ldr	r3, [pc, #368]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d109      	bne.n	8006498 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006488:	e006      	b.n	8006498 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	73fb      	strb	r3, [r7, #15]
      break;
 800648e:	e004      	b.n	800649a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006490:	bf00      	nop
 8006492:	e002      	b.n	800649a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006494:	bf00      	nop
 8006496:	e000      	b.n	800649a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006498:	bf00      	nop
  }

  if (status == HAL_OK)
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 809f 	bne.w	80065e0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064a2:	4b52      	ldr	r3, [pc, #328]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a51      	ldr	r2, [pc, #324]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80064a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ae:	f7fb fd8d 	bl	8001fcc <HAL_GetTick>
 80064b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064b4:	e00f      	b.n	80064d6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064b6:	f7fb fd89 	bl	8001fcc <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d908      	bls.n	80064d6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064c4:	4b49      	ldr	r3, [pc, #292]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d009      	beq.n	80064e4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064d4:	e006      	b.n	80064e4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064d6:	4b45      	ldr	r3, [pc, #276]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e9      	bne.n	80064b6 <RCCEx_PLLSAI1_Config+0x86>
 80064e2:	e000      	b.n	80064e6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80064e4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d179      	bne.n	80065e0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d116      	bne.n	8006520 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f2:	4b3e      	ldr	r3, [pc, #248]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	4b3e      	ldr	r3, [pc, #248]	; (80065f0 <RCCEx_PLLSAI1_Config+0x1c0>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6892      	ldr	r2, [r2, #8]
 80064fe:	0211      	lsls	r1, r2, #8
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68d2      	ldr	r2, [r2, #12]
 8006504:	06d2      	lsls	r2, r2, #27
 8006506:	4311      	orrs	r1, r2
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6852      	ldr	r2, [r2, #4]
 800650c:	3a01      	subs	r2, #1
 800650e:	0112      	lsls	r2, r2, #4
 8006510:	4311      	orrs	r1, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	4934      	ldr	r1, [pc, #208]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800651a:	4313      	orrs	r3, r2
 800651c:	610b      	str	r3, [r1, #16]
 800651e:	e033      	b.n	8006588 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d118      	bne.n	8006558 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006526:	4b31      	ldr	r3, [pc, #196]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	4b32      	ldr	r3, [pc, #200]	; (80065f4 <RCCEx_PLLSAI1_Config+0x1c4>)
 800652c:	4013      	ands	r3, r2
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6892      	ldr	r2, [r2, #8]
 8006532:	0211      	lsls	r1, r2, #8
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6912      	ldr	r2, [r2, #16]
 8006538:	0852      	lsrs	r2, r2, #1
 800653a:	3a01      	subs	r2, #1
 800653c:	0552      	lsls	r2, r2, #21
 800653e:	4311      	orrs	r1, r2
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6852      	ldr	r2, [r2, #4]
 8006544:	3a01      	subs	r2, #1
 8006546:	0112      	lsls	r2, r2, #4
 8006548:	4311      	orrs	r1, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	4926      	ldr	r1, [pc, #152]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8006552:	4313      	orrs	r3, r2
 8006554:	610b      	str	r3, [r1, #16]
 8006556:	e017      	b.n	8006588 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006558:	4b24      	ldr	r3, [pc, #144]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <RCCEx_PLLSAI1_Config+0x1c8>)
 800655e:	4013      	ands	r3, r2
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6892      	ldr	r2, [r2, #8]
 8006564:	0211      	lsls	r1, r2, #8
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6952      	ldr	r2, [r2, #20]
 800656a:	0852      	lsrs	r2, r2, #1
 800656c:	3a01      	subs	r2, #1
 800656e:	0652      	lsls	r2, r2, #25
 8006570:	4311      	orrs	r1, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6852      	ldr	r2, [r2, #4]
 8006576:	3a01      	subs	r2, #1
 8006578:	0112      	lsls	r2, r2, #4
 800657a:	4311      	orrs	r1, r2
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	491a      	ldr	r1, [pc, #104]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 8006584:	4313      	orrs	r3, r2
 8006586:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006588:	4b18      	ldr	r3, [pc, #96]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a17      	ldr	r2, [pc, #92]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 800658e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006594:	f7fb fd1a 	bl	8001fcc <HAL_GetTick>
 8006598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800659a:	e00f      	b.n	80065bc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800659c:	f7fb fd16 	bl	8001fcc <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d908      	bls.n	80065bc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80065ba:	e006      	b.n	80065ca <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0e9      	beq.n	800659c <RCCEx_PLLSAI1_Config+0x16c>
 80065c8:	e000      	b.n	80065cc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80065ca:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	4904      	ldr	r1, [pc, #16]	; (80065ec <RCCEx_PLLSAI1_Config+0x1bc>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40021000 	.word	0x40021000
 80065f0:	07ff800c 	.word	0x07ff800c
 80065f4:	ff9f800c 	.word	0xff9f800c
 80065f8:	f9ff800c 	.word	0xf9ff800c

080065fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b03      	cmp	r3, #3
 8006610:	d018      	beq.n	8006644 <RCCEx_PLLSAI2_Config+0x48>
 8006612:	2b03      	cmp	r3, #3
 8006614:	d81f      	bhi.n	8006656 <RCCEx_PLLSAI2_Config+0x5a>
 8006616:	2b01      	cmp	r3, #1
 8006618:	d002      	beq.n	8006620 <RCCEx_PLLSAI2_Config+0x24>
 800661a:	2b02      	cmp	r3, #2
 800661c:	d009      	beq.n	8006632 <RCCEx_PLLSAI2_Config+0x36>
 800661e:	e01a      	b.n	8006656 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006620:	4b4a      	ldr	r3, [pc, #296]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d117      	bne.n	800665c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006630:	e014      	b.n	800665c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006632:	4b46      	ldr	r3, [pc, #280]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800663a:	2b00      	cmp	r3, #0
 800663c:	d110      	bne.n	8006660 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006642:	e00d      	b.n	8006660 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006644:	4b41      	ldr	r3, [pc, #260]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d109      	bne.n	8006664 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006654:	e006      	b.n	8006664 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	73fb      	strb	r3, [r7, #15]
      break;
 800665a:	e004      	b.n	8006666 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800665c:	bf00      	nop
 800665e:	e002      	b.n	8006666 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006664:	bf00      	nop
  }

  if (status == HAL_OK)
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d169      	bne.n	8006740 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800666c:	4b37      	ldr	r3, [pc, #220]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a36      	ldr	r2, [pc, #216]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 8006672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006678:	f7fb fca8 	bl	8001fcc <HAL_GetTick>
 800667c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800667e:	e00f      	b.n	80066a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006680:	f7fb fca4 	bl	8001fcc <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d908      	bls.n	80066a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800668e:	4b2f      	ldr	r3, [pc, #188]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800669e:	e006      	b.n	80066ae <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066a0:	4b2a      	ldr	r3, [pc, #168]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e9      	bne.n	8006680 <RCCEx_PLLSAI2_Config+0x84>
 80066ac:	e000      	b.n	80066b0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80066ae:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d144      	bne.n	8006740 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d115      	bne.n	80066e8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066bc:	4b23      	ldr	r3, [pc, #140]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	4b23      	ldr	r3, [pc, #140]	; (8006750 <RCCEx_PLLSAI2_Config+0x154>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6892      	ldr	r2, [r2, #8]
 80066c8:	0211      	lsls	r1, r2, #8
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68d2      	ldr	r2, [r2, #12]
 80066ce:	06d2      	lsls	r2, r2, #27
 80066d0:	4311      	orrs	r1, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6852      	ldr	r2, [r2, #4]
 80066d6:	3a01      	subs	r2, #1
 80066d8:	0112      	lsls	r2, r2, #4
 80066da:	4311      	orrs	r1, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	491a      	ldr	r1, [pc, #104]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066e8:	4b18      	ldr	r3, [pc, #96]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a17      	ldr	r2, [pc, #92]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f4:	f7fb fc6a 	bl	8001fcc <HAL_GetTick>
 80066f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066fa:	e00f      	b.n	800671c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066fc:	f7fb fc66 	bl	8001fcc <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d908      	bls.n	800671c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800670a:	4b10      	ldr	r3, [pc, #64]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800671a:	e006      	b.n	800672a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0e9      	beq.n	80066fc <RCCEx_PLLSAI2_Config+0x100>
 8006728:	e000      	b.n	800672c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800672a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 8006734:	695a      	ldr	r2, [r3, #20]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	4904      	ldr	r1, [pc, #16]	; (800674c <RCCEx_PLLSAI2_Config+0x150>)
 800673c:	4313      	orrs	r3, r2
 800673e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	40021000 	.word	0x40021000
 8006750:	07ff800c 	.word	0x07ff800c

08006754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e095      	b.n	8006892 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d108      	bne.n	8006780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006776:	d009      	beq.n	800678c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	61da      	str	r2, [r3, #28]
 800677e:	e005      	b.n	800678c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fa fb54 	bl	8000e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067cc:	d902      	bls.n	80067d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	e002      	b.n	80067da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067e2:	d007      	beq.n	80067f4 <HAL_SPI_Init+0xa0>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067ec:	d002      	beq.n	80067f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006836:	ea42 0103 	orr.w	r1, r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	0c1b      	lsrs	r3, r3, #16
 8006850:	f003 0204 	and.w	r2, r3, #4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	431a      	orrs	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006870:	ea42 0103 	orr.w	r1, r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	099b      	lsrs	r3, r3, #6
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10f      	bne.n	80068e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	099b      	lsrs	r3, r3, #6
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
    return;
 80068de:	e0d7      	b.n	8006a90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <HAL_SPI_IRQHandler+0x66>
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	09db      	lsrs	r3, r3, #7
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d004      	beq.n	8006902 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
    return;
 8006900:	e0c6      	b.n	8006a90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10c      	bne.n	8006928 <HAL_SPI_IRQHandler+0x8c>
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	099b      	lsrs	r3, r3, #6
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	0a1b      	lsrs	r3, r3, #8
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80b4 	beq.w	8006a90 <HAL_SPI_IRQHandler+0x1f4>
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80ad 	beq.w	8006a90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	099b      	lsrs	r3, r3, #6
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d023      	beq.n	800698a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b03      	cmp	r3, #3
 800694c:	d011      	beq.n	8006972 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006952:	f043 0204 	orr.w	r2, r3, #4
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	e00b      	b.n	800698a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	693b      	ldr	r3, [r7, #16]
        return;
 8006988:	e082      	b.n	8006a90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d014      	beq.n	80069c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800699a:	f043 0201 	orr.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	0a1b      	lsrs	r3, r3, #8
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00c      	beq.n	80069e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d0:	f043 0208 	orr.w	r2, r3, #8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069d8:	2300      	movs	r3, #0
 80069da:	60bb      	str	r3, [r7, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d04f      	beq.n	8006a8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <HAL_SPI_IRQHandler+0x17e>
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d034      	beq.n	8006a84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0203 	bic.w	r2, r2, #3
 8006a28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d011      	beq.n	8006a56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a36:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <HAL_SPI_IRQHandler+0x1fc>)
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fc fe33 	bl	80036aa <HAL_DMA_Abort_IT>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d016      	beq.n	8006a8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <HAL_SPI_IRQHandler+0x1fc>)
 8006a64:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fc fe1d 	bl	80036aa <HAL_DMA_Abort_IT>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006a82:	e003      	b.n	8006a8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f809 	bl	8006a9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006a8a:	e000      	b.n	8006a8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006a8c:	bf00      	nop
    return;
 8006a8e:	bf00      	nop
  }
}
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	08006ab1 	.word	0x08006ab1

08006a9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff ffe5 	bl	8006a9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ad2:	bf00      	nop
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e049      	b.n	8006b80 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f841 	bl	8006b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 fc03 	bl	8007324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d001      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e04f      	b.n	8006c54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01d      	beq.n	8006c12 <HAL_TIM_Base_Start_IT+0x76>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bde:	d018      	beq.n	8006c12 <HAL_TIM_Base_Start_IT+0x76>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d013      	beq.n	8006c12 <HAL_TIM_Base_Start_IT+0x76>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00e      	beq.n	8006c12 <HAL_TIM_Base_Start_IT+0x76>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1c      	ldr	r2, [pc, #112]	; (8006c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_TIM_Base_Start_IT+0x76>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d004      	beq.n	8006c12 <HAL_TIM_Base_Start_IT+0x76>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d115      	bne.n	8006c3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	4b17      	ldr	r3, [pc, #92]	; (8006c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b06      	cmp	r3, #6
 8006c22:	d015      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0xb4>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c2a:	d011      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3c:	e008      	b.n	8006c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0201 	orr.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e000      	b.n	8006c52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	40012c00 	.word	0x40012c00
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40013400 	.word	0x40013400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	00010007 	.word	0x00010007

08006c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e049      	b.n	8006d22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fa fc52 	bl	800154c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f000 fb32 	bl	8007324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b086      	sub	sp, #24
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e097      	b.n	8006e6e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fa fbb6 	bl	80014c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006d6e:	f023 0307 	bic.w	r3, r3, #7
 8006d72:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	f000 fad0 	bl	8007324 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dac:	f023 0303 	bic.w	r3, r3, #3
 8006db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	021b      	lsls	r3, r3, #8
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006dca:	f023 030c 	bic.w	r3, r3, #12
 8006dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	4313      	orrs	r3, r2
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	011a      	lsls	r2, r3, #4
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	031b      	lsls	r3, r3, #12
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e08:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e10:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d122      	bne.n	8006ed2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d11b      	bne.n	8006ed2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f06f 0202 	mvn.w	r2, #2
 8006ea2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fa15 	bl	80072e8 <HAL_TIM_IC_CaptureCallback>
 8006ebe:	e005      	b.n	8006ecc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fa07 	bl	80072d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa18 	bl	80072fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d122      	bne.n	8006f26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d11b      	bne.n	8006f26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f06f 0204 	mvn.w	r2, #4
 8006ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9eb 	bl	80072e8 <HAL_TIM_IC_CaptureCallback>
 8006f12:	e005      	b.n	8006f20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f9dd 	bl	80072d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f9ee 	bl	80072fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d122      	bne.n	8006f7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d11b      	bne.n	8006f7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f06f 0208 	mvn.w	r2, #8
 8006f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f003 0303 	and.w	r3, r3, #3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f9c1 	bl	80072e8 <HAL_TIM_IC_CaptureCallback>
 8006f66:	e005      	b.n	8006f74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9b3 	bl	80072d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f9c4 	bl	80072fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d122      	bne.n	8006fce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f003 0310 	and.w	r3, r3, #16
 8006f92:	2b10      	cmp	r3, #16
 8006f94:	d11b      	bne.n	8006fce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f06f 0210 	mvn.w	r2, #16
 8006f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f997 	bl	80072e8 <HAL_TIM_IC_CaptureCallback>
 8006fba:	e005      	b.n	8006fc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f989 	bl	80072d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f99a 	bl	80072fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d10e      	bne.n	8006ffa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d107      	bne.n	8006ffa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f06f 0201 	mvn.w	r2, #1
 8006ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7f9 fed7 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	2b80      	cmp	r3, #128	; 0x80
 8007006:	d10e      	bne.n	8007026 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007012:	2b80      	cmp	r3, #128	; 0x80
 8007014:	d107      	bne.n	8007026 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800701e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fd81 	bl	8007b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007034:	d10e      	bne.n	8007054 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007040:	2b80      	cmp	r3, #128	; 0x80
 8007042:	d107      	bne.n	8007054 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800704c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fd74 	bl	8007b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b40      	cmp	r3, #64	; 0x40
 8007060:	d10e      	bne.n	8007080 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	d107      	bne.n	8007080 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f948 	bl	8007310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d10e      	bne.n	80070ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b20      	cmp	r3, #32
 800709a:	d107      	bne.n	80070ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0220 	mvn.w	r2, #32
 80070a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fd34 	bl	8007b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e0fd      	b.n	80072ca <HAL_TIM_PWM_ConfigChannel+0x216>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b14      	cmp	r3, #20
 80070da:	f200 80f0 	bhi.w	80072be <HAL_TIM_PWM_ConfigChannel+0x20a>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	08007139 	.word	0x08007139
 80070e8:	080072bf 	.word	0x080072bf
 80070ec:	080072bf 	.word	0x080072bf
 80070f0:	080072bf 	.word	0x080072bf
 80070f4:	08007179 	.word	0x08007179
 80070f8:	080072bf 	.word	0x080072bf
 80070fc:	080072bf 	.word	0x080072bf
 8007100:	080072bf 	.word	0x080072bf
 8007104:	080071bb 	.word	0x080071bb
 8007108:	080072bf 	.word	0x080072bf
 800710c:	080072bf 	.word	0x080072bf
 8007110:	080072bf 	.word	0x080072bf
 8007114:	080071fb 	.word	0x080071fb
 8007118:	080072bf 	.word	0x080072bf
 800711c:	080072bf 	.word	0x080072bf
 8007120:	080072bf 	.word	0x080072bf
 8007124:	0800723d 	.word	0x0800723d
 8007128:	080072bf 	.word	0x080072bf
 800712c:	080072bf 	.word	0x080072bf
 8007130:	080072bf 	.word	0x080072bf
 8007134:	0800727d 	.word	0x0800727d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 f98a 	bl	8007458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0208 	orr.w	r2, r2, #8
 8007152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0204 	bic.w	r2, r2, #4
 8007162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6999      	ldr	r1, [r3, #24]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	619a      	str	r2, [r3, #24]
      break;
 8007176:	e0a3      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 f9fa 	bl	8007578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699a      	ldr	r2, [r3, #24]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6999      	ldr	r1, [r3, #24]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	021a      	lsls	r2, r3, #8
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	619a      	str	r2, [r3, #24]
      break;
 80071b8:	e082      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fa63 	bl	800768c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69da      	ldr	r2, [r3, #28]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0208 	orr.w	r2, r2, #8
 80071d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69da      	ldr	r2, [r3, #28]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0204 	bic.w	r2, r2, #4
 80071e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69d9      	ldr	r1, [r3, #28]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	61da      	str	r2, [r3, #28]
      break;
 80071f8:	e062      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 facb 	bl	800779c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69d9      	ldr	r1, [r3, #28]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	021a      	lsls	r2, r3, #8
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	61da      	str	r2, [r3, #28]
      break;
 800723a:	e041      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fb14 	bl	8007870 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0208 	orr.w	r2, r2, #8
 8007256:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0204 	bic.w	r2, r2, #4
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800727a:	e021      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fb58 	bl	8007938 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007296:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	021a      	lsls	r2, r3, #8
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072bc:	e000      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80072be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop

080072d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a40      	ldr	r2, [pc, #256]	; (8007438 <TIM_Base_SetConfig+0x114>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d013      	beq.n	8007364 <TIM_Base_SetConfig+0x40>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007342:	d00f      	beq.n	8007364 <TIM_Base_SetConfig+0x40>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a3d      	ldr	r2, [pc, #244]	; (800743c <TIM_Base_SetConfig+0x118>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00b      	beq.n	8007364 <TIM_Base_SetConfig+0x40>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a3c      	ldr	r2, [pc, #240]	; (8007440 <TIM_Base_SetConfig+0x11c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d007      	beq.n	8007364 <TIM_Base_SetConfig+0x40>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a3b      	ldr	r2, [pc, #236]	; (8007444 <TIM_Base_SetConfig+0x120>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_Base_SetConfig+0x40>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a3a      	ldr	r2, [pc, #232]	; (8007448 <TIM_Base_SetConfig+0x124>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d108      	bne.n	8007376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a2f      	ldr	r2, [pc, #188]	; (8007438 <TIM_Base_SetConfig+0x114>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d01f      	beq.n	80073be <TIM_Base_SetConfig+0x9a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007384:	d01b      	beq.n	80073be <TIM_Base_SetConfig+0x9a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a2c      	ldr	r2, [pc, #176]	; (800743c <TIM_Base_SetConfig+0x118>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d017      	beq.n	80073be <TIM_Base_SetConfig+0x9a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a2b      	ldr	r2, [pc, #172]	; (8007440 <TIM_Base_SetConfig+0x11c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d013      	beq.n	80073be <TIM_Base_SetConfig+0x9a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a2a      	ldr	r2, [pc, #168]	; (8007444 <TIM_Base_SetConfig+0x120>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00f      	beq.n	80073be <TIM_Base_SetConfig+0x9a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a29      	ldr	r2, [pc, #164]	; (8007448 <TIM_Base_SetConfig+0x124>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00b      	beq.n	80073be <TIM_Base_SetConfig+0x9a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a28      	ldr	r2, [pc, #160]	; (800744c <TIM_Base_SetConfig+0x128>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d007      	beq.n	80073be <TIM_Base_SetConfig+0x9a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a27      	ldr	r2, [pc, #156]	; (8007450 <TIM_Base_SetConfig+0x12c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d003      	beq.n	80073be <TIM_Base_SetConfig+0x9a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a26      	ldr	r2, [pc, #152]	; (8007454 <TIM_Base_SetConfig+0x130>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d108      	bne.n	80073d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a10      	ldr	r2, [pc, #64]	; (8007438 <TIM_Base_SetConfig+0x114>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00f      	beq.n	800741c <TIM_Base_SetConfig+0xf8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a12      	ldr	r2, [pc, #72]	; (8007448 <TIM_Base_SetConfig+0x124>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00b      	beq.n	800741c <TIM_Base_SetConfig+0xf8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a11      	ldr	r2, [pc, #68]	; (800744c <TIM_Base_SetConfig+0x128>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d007      	beq.n	800741c <TIM_Base_SetConfig+0xf8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a10      	ldr	r2, [pc, #64]	; (8007450 <TIM_Base_SetConfig+0x12c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d003      	beq.n	800741c <TIM_Base_SetConfig+0xf8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a0f      	ldr	r2, [pc, #60]	; (8007454 <TIM_Base_SetConfig+0x130>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d103      	bne.n	8007424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	691a      	ldr	r2, [r3, #16]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	615a      	str	r2, [r3, #20]
}
 800742a:	bf00      	nop
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40000400 	.word	0x40000400
 8007440:	40000800 	.word	0x40000800
 8007444:	40000c00 	.word	0x40000c00
 8007448:	40013400 	.word	0x40013400
 800744c:	40014000 	.word	0x40014000
 8007450:	40014400 	.word	0x40014400
 8007454:	40014800 	.word	0x40014800

08007458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	f023 0201 	bic.w	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0303 	bic.w	r3, r3, #3
 8007492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f023 0302 	bic.w	r3, r3, #2
 80074a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a2c      	ldr	r2, [pc, #176]	; (8007564 <TIM_OC1_SetConfig+0x10c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00f      	beq.n	80074d8 <TIM_OC1_SetConfig+0x80>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a2b      	ldr	r2, [pc, #172]	; (8007568 <TIM_OC1_SetConfig+0x110>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00b      	beq.n	80074d8 <TIM_OC1_SetConfig+0x80>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a2a      	ldr	r2, [pc, #168]	; (800756c <TIM_OC1_SetConfig+0x114>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d007      	beq.n	80074d8 <TIM_OC1_SetConfig+0x80>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a29      	ldr	r2, [pc, #164]	; (8007570 <TIM_OC1_SetConfig+0x118>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d003      	beq.n	80074d8 <TIM_OC1_SetConfig+0x80>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a28      	ldr	r2, [pc, #160]	; (8007574 <TIM_OC1_SetConfig+0x11c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d10c      	bne.n	80074f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f023 0308 	bic.w	r3, r3, #8
 80074de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f023 0304 	bic.w	r3, r3, #4
 80074f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1b      	ldr	r2, [pc, #108]	; (8007564 <TIM_OC1_SetConfig+0x10c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d00f      	beq.n	800751a <TIM_OC1_SetConfig+0xc2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a1a      	ldr	r2, [pc, #104]	; (8007568 <TIM_OC1_SetConfig+0x110>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00b      	beq.n	800751a <TIM_OC1_SetConfig+0xc2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a19      	ldr	r2, [pc, #100]	; (800756c <TIM_OC1_SetConfig+0x114>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d007      	beq.n	800751a <TIM_OC1_SetConfig+0xc2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a18      	ldr	r2, [pc, #96]	; (8007570 <TIM_OC1_SetConfig+0x118>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d003      	beq.n	800751a <TIM_OC1_SetConfig+0xc2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a17      	ldr	r2, [pc, #92]	; (8007574 <TIM_OC1_SetConfig+0x11c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d111      	bne.n	800753e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	621a      	str	r2, [r3, #32]
}
 8007558:	bf00      	nop
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	40012c00 	.word	0x40012c00
 8007568:	40013400 	.word	0x40013400
 800756c:	40014000 	.word	0x40014000
 8007570:	40014400 	.word	0x40014400
 8007574:	40014800 	.word	0x40014800

08007578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f023 0210 	bic.w	r2, r3, #16
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	021b      	lsls	r3, r3, #8
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f023 0320 	bic.w	r3, r3, #32
 80075c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a28      	ldr	r2, [pc, #160]	; (8007678 <TIM_OC2_SetConfig+0x100>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d003      	beq.n	80075e4 <TIM_OC2_SetConfig+0x6c>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a27      	ldr	r2, [pc, #156]	; (800767c <TIM_OC2_SetConfig+0x104>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d10d      	bne.n	8007600 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a1d      	ldr	r2, [pc, #116]	; (8007678 <TIM_OC2_SetConfig+0x100>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00f      	beq.n	8007628 <TIM_OC2_SetConfig+0xb0>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a1c      	ldr	r2, [pc, #112]	; (800767c <TIM_OC2_SetConfig+0x104>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d00b      	beq.n	8007628 <TIM_OC2_SetConfig+0xb0>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a1b      	ldr	r2, [pc, #108]	; (8007680 <TIM_OC2_SetConfig+0x108>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d007      	beq.n	8007628 <TIM_OC2_SetConfig+0xb0>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a1a      	ldr	r2, [pc, #104]	; (8007684 <TIM_OC2_SetConfig+0x10c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d003      	beq.n	8007628 <TIM_OC2_SetConfig+0xb0>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a19      	ldr	r2, [pc, #100]	; (8007688 <TIM_OC2_SetConfig+0x110>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d113      	bne.n	8007650 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800762e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	40012c00 	.word	0x40012c00
 800767c:	40013400 	.word	0x40013400
 8007680:	40014000 	.word	0x40014000
 8007684:	40014400 	.word	0x40014400
 8007688:	40014800 	.word	0x40014800

0800768c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0303 	bic.w	r3, r3, #3
 80076c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a27      	ldr	r2, [pc, #156]	; (8007788 <TIM_OC3_SetConfig+0xfc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d003      	beq.n	80076f6 <TIM_OC3_SetConfig+0x6a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a26      	ldr	r2, [pc, #152]	; (800778c <TIM_OC3_SetConfig+0x100>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d10d      	bne.n	8007712 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a1c      	ldr	r2, [pc, #112]	; (8007788 <TIM_OC3_SetConfig+0xfc>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00f      	beq.n	800773a <TIM_OC3_SetConfig+0xae>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a1b      	ldr	r2, [pc, #108]	; (800778c <TIM_OC3_SetConfig+0x100>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00b      	beq.n	800773a <TIM_OC3_SetConfig+0xae>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a1a      	ldr	r2, [pc, #104]	; (8007790 <TIM_OC3_SetConfig+0x104>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d007      	beq.n	800773a <TIM_OC3_SetConfig+0xae>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a19      	ldr	r2, [pc, #100]	; (8007794 <TIM_OC3_SetConfig+0x108>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_OC3_SetConfig+0xae>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a18      	ldr	r2, [pc, #96]	; (8007798 <TIM_OC3_SetConfig+0x10c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d113      	bne.n	8007762 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	011b      	lsls	r3, r3, #4
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	621a      	str	r2, [r3, #32]
}
 800777c:	bf00      	nop
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40013400 	.word	0x40013400
 8007790:	40014000 	.word	0x40014000
 8007794:	40014400 	.word	0x40014400
 8007798:	40014800 	.word	0x40014800

0800779c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	031b      	lsls	r3, r3, #12
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a18      	ldr	r2, [pc, #96]	; (800785c <TIM_OC4_SetConfig+0xc0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00f      	beq.n	8007820 <TIM_OC4_SetConfig+0x84>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a17      	ldr	r2, [pc, #92]	; (8007860 <TIM_OC4_SetConfig+0xc4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00b      	beq.n	8007820 <TIM_OC4_SetConfig+0x84>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a16      	ldr	r2, [pc, #88]	; (8007864 <TIM_OC4_SetConfig+0xc8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d007      	beq.n	8007820 <TIM_OC4_SetConfig+0x84>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a15      	ldr	r2, [pc, #84]	; (8007868 <TIM_OC4_SetConfig+0xcc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_OC4_SetConfig+0x84>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a14      	ldr	r2, [pc, #80]	; (800786c <TIM_OC4_SetConfig+0xd0>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d109      	bne.n	8007834 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	019b      	lsls	r3, r3, #6
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	621a      	str	r2, [r3, #32]
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40012c00 	.word	0x40012c00
 8007860:	40013400 	.word	0x40013400
 8007864:	40014000 	.word	0x40014000
 8007868:	40014400 	.word	0x40014400
 800786c:	40014800 	.word	0x40014800

08007870 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800789e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	041b      	lsls	r3, r3, #16
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a17      	ldr	r2, [pc, #92]	; (8007924 <TIM_OC5_SetConfig+0xb4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d00f      	beq.n	80078ea <TIM_OC5_SetConfig+0x7a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a16      	ldr	r2, [pc, #88]	; (8007928 <TIM_OC5_SetConfig+0xb8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00b      	beq.n	80078ea <TIM_OC5_SetConfig+0x7a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a15      	ldr	r2, [pc, #84]	; (800792c <TIM_OC5_SetConfig+0xbc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d007      	beq.n	80078ea <TIM_OC5_SetConfig+0x7a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a14      	ldr	r2, [pc, #80]	; (8007930 <TIM_OC5_SetConfig+0xc0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d003      	beq.n	80078ea <TIM_OC5_SetConfig+0x7a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a13      	ldr	r2, [pc, #76]	; (8007934 <TIM_OC5_SetConfig+0xc4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d109      	bne.n	80078fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	621a      	str	r2, [r3, #32]
}
 8007918:	bf00      	nop
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40013400 	.word	0x40013400
 800792c:	40014000 	.word	0x40014000
 8007930:	40014400 	.word	0x40014400
 8007934:	40014800 	.word	0x40014800

08007938 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800797e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	051b      	lsls	r3, r3, #20
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a18      	ldr	r2, [pc, #96]	; (80079f0 <TIM_OC6_SetConfig+0xb8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00f      	beq.n	80079b4 <TIM_OC6_SetConfig+0x7c>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <TIM_OC6_SetConfig+0xbc>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00b      	beq.n	80079b4 <TIM_OC6_SetConfig+0x7c>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a16      	ldr	r2, [pc, #88]	; (80079f8 <TIM_OC6_SetConfig+0xc0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d007      	beq.n	80079b4 <TIM_OC6_SetConfig+0x7c>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a15      	ldr	r2, [pc, #84]	; (80079fc <TIM_OC6_SetConfig+0xc4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d003      	beq.n	80079b4 <TIM_OC6_SetConfig+0x7c>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a14      	ldr	r2, [pc, #80]	; (8007a00 <TIM_OC6_SetConfig+0xc8>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d109      	bne.n	80079c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	029b      	lsls	r3, r3, #10
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	621a      	str	r2, [r3, #32]
}
 80079e2:	bf00      	nop
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	40012c00 	.word	0x40012c00
 80079f4:	40013400 	.word	0x40013400
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40014400 	.word	0x40014400
 8007a00:	40014800 	.word	0x40014800

08007a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e068      	b.n	8007aee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a2e      	ldr	r2, [pc, #184]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d004      	beq.n	8007a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a2d      	ldr	r2, [pc, #180]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d108      	bne.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a1e      	ldr	r2, [pc, #120]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d01d      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8e:	d018      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a1b      	ldr	r2, [pc, #108]	; (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d013      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1a      	ldr	r2, [pc, #104]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d00e      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d009      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d004      	beq.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a14      	ldr	r2, [pc, #80]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d10c      	bne.n	8007adc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	40012c00 	.word	0x40012c00
 8007b00:	40013400 	.word	0x40013400
 8007b04:	40000400 	.word	0x40000400
 8007b08:	40000800 	.word	0x40000800
 8007b0c:	40000c00 	.word	0x40000c00
 8007b10:	40014000 	.word	0x40014000

08007b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e042      	b.n	8007be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d106      	bne.n	8007b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7f9 fdbd 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2224      	movs	r2, #36	; 0x24
 8007b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0201 	bic.w	r2, r2, #1
 8007b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fb50 	bl	8008238 <UART_SetConfig>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e022      	b.n	8007be8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fe12 	bl	80087d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0201 	orr.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fe99 	bl	8008918 <UART_CheckIdleState>
 8007be6:	4603      	mov	r3, r0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d168      	bne.n	8007cda <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <HAL_UART_Transmit_DMA+0x24>
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e061      	b.n	8007cdc <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <HAL_UART_Transmit_DMA+0x36>
 8007c22:	2302      	movs	r3, #2
 8007c24:	e05a      	b.n	8007cdc <HAL_UART_Transmit_DMA+0xec>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	88fa      	ldrh	r2, [r7, #6]
 8007c38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	88fa      	ldrh	r2, [r7, #6]
 8007c40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2221      	movs	r2, #33	; 0x21
 8007c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d02c      	beq.n	8007cb6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c60:	4a20      	ldr	r2, [pc, #128]	; (8007ce4 <HAL_UART_Transmit_DMA+0xf4>)
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c68:	4a1f      	ldr	r2, [pc, #124]	; (8007ce8 <HAL_UART_Transmit_DMA+0xf8>)
 8007c6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c70:	4a1e      	ldr	r2, [pc, #120]	; (8007cec <HAL_UART_Transmit_DMA+0xfc>)
 8007c72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c78:	2200      	movs	r2, #0
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c84:	4619      	mov	r1, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3328      	adds	r3, #40	; 0x28
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	88fb      	ldrh	r3, [r7, #6]
 8007c90:	f7fb fc34 	bl	80034fc <HAL_DMA_Start_IT>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00d      	beq.n	8007cb6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2210      	movs	r2, #16
 8007c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e012      	b.n	8007cdc <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2240      	movs	r2, #64	; 0x40
 8007cbc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cd4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e000      	b.n	8007cdc <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
  }
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	08008c2d 	.word	0x08008c2d
 8007ce8:	08008c81 	.word	0x08008c81
 8007cec:	08008d6f 	.word	0x08008d6f

08007cf0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d131      	bne.n	8007d6c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <HAL_UART_Receive_DMA+0x24>
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e02a      	b.n	8007d6e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HAL_UART_Receive_DMA+0x36>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e023      	b.n	8007d6e <HAL_UART_Receive_DMA+0x7e>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a0f      	ldr	r2, [pc, #60]	; (8007d78 <HAL_UART_Receive_DMA+0x88>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00e      	beq.n	8007d5c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d007      	beq.n	8007d5c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007d5a:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 fea4 	bl	8008ab0 <UART_Start_Receive_DMA>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	e000      	b.n	8007d6e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007d6c:	2302      	movs	r3, #2
  }
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	40008000 	.word	0x40008000

08007d7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007da2:	4013      	ands	r3, r2
 8007da4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d118      	bne.n	8007dde <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d013      	beq.n	8007dde <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 81fb 	beq.w	80081ca <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
      }
      return;
 8007ddc:	e1f5      	b.n	80081ca <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80ef 	beq.w	8007fc4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4b73      	ldr	r3, [pc, #460]	; (8007fb8 <HAL_UART_IRQHandler+0x23c>)
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4b72      	ldr	r3, [pc, #456]	; (8007fbc <HAL_UART_IRQHandler+0x240>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 80e4 	beq.w	8007fc4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d010      	beq.n	8007e28 <HAL_UART_IRQHandler+0xac>
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2201      	movs	r2, #1
 8007e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e1e:	f043 0201 	orr.w	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d010      	beq.n	8007e54 <HAL_UART_IRQHandler+0xd8>
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2202      	movs	r2, #2
 8007e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e4a:	f043 0204 	orr.w	r2, r3, #4
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d010      	beq.n	8007e80 <HAL_UART_IRQHandler+0x104>
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2204      	movs	r2, #4
 8007e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e76:	f043 0202 	orr.w	r2, r3, #2
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d015      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	f003 0320 	and.w	r3, r3, #32
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4b48      	ldr	r3, [pc, #288]	; (8007fb8 <HAL_UART_IRQHandler+0x23c>)
 8007e98:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00b      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2208      	movs	r2, #8
 8007ea4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eac:	f043 0208 	orr.w	r2, r3, #8
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d011      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x168>
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00c      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eda:	f043 0220 	orr.w	r2, r3, #32
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 816f 	beq.w	80081ce <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d011      	beq.n	8007f1e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f24:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d004      	beq.n	8007f3e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d031      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fe42 	bl	8008bc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4e:	2b40      	cmp	r3, #64	; 0x40
 8007f50:	d123      	bne.n	8007f9a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f60:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d013      	beq.n	8007f92 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f6e:	4a14      	ldr	r2, [pc, #80]	; (8007fc0 <HAL_UART_IRQHandler+0x244>)
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fb fb97 	bl	80036aa <HAL_DMA_Abort_IT>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d017      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f90:	e00f      	b.n	8007fb2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f93a 	bl	800820c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f98:	e00b      	b.n	8007fb2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f936 	bl	800820c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa0:	e007      	b.n	8007fb2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f932 	bl	800820c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007fb0:	e10d      	b.n	80081ce <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb2:	bf00      	nop
    return;
 8007fb4:	e10b      	b.n	80081ce <HAL_UART_IRQHandler+0x452>
 8007fb6:	bf00      	nop
 8007fb8:	10000001 	.word	0x10000001
 8007fbc:	04000120 	.word	0x04000120
 8007fc0:	08008def 	.word	0x08008def

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	f040 80ab 	bne.w	8008124 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 80a5 	beq.w	8008124 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 809f 	beq.w	8008124 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2210      	movs	r2, #16
 8007fec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff8:	2b40      	cmp	r3, #64	; 0x40
 8007ffa:	d155      	bne.n	80080a8 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8008006:	893b      	ldrh	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80e2 	beq.w	80081d2 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008014:	893a      	ldrh	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	f080 80db 	bcs.w	80081d2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	893a      	ldrh	r2, [r7, #8]
 8008020:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0320 	and.w	r3, r3, #32
 8008030:	2b00      	cmp	r3, #0
 8008032:	d12b      	bne.n	800808c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008042:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0201 	bic.w	r2, r2, #1
 8008052:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008062:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2220      	movs	r2, #32
 8008068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0210 	bic.w	r2, r2, #16
 8008080:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008086:	4618      	mov	r0, r3
 8008088:	f7fb fab3 	bl	80035f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008098:	b29b      	uxth	r3, r3
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	b29b      	uxth	r3, r3
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f8bd 	bl	8008220 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80080a6:	e094      	b.n	80081d2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8087 	beq.w	80081d6 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 80080c8:	897b      	ldrh	r3, [r7, #10]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8083 	beq.w	80081d6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080de:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ee:	f023 0301 	bic.w	r3, r3, #1
 80080f2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0210 	bic.w	r2, r2, #16
 8008116:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008118:	897b      	ldrh	r3, [r7, #10]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f87f 	bl	8008220 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008122:	e058      	b.n	80081d6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00d      	beq.n	800814a <HAL_UART_IRQHandler+0x3ce>
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d008      	beq.n	800814a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fe83 	bl	8008e4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008148:	e048      	b.n	80081dc <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008150:	2b00      	cmp	r3, #0
 8008152:	d012      	beq.n	800817a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816c:	2b00      	cmp	r3, #0
 800816e:	d034      	beq.n	80081da <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
    }
    return;
 8008178:	e02f      	b.n	80081da <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <HAL_UART_IRQHandler+0x41a>
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fe43 	bl	8008e1a <UART_EndTransmit_IT>
    return;
 8008194:	e022      	b.n	80081dc <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <HAL_UART_IRQHandler+0x436>
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fe63 	bl	8008e76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081b0:	e014      	b.n	80081dc <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00f      	beq.n	80081dc <HAL_UART_IRQHandler+0x460>
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	da0c      	bge.n	80081dc <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fe4d 	bl	8008e62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081c8:	e008      	b.n	80081dc <HAL_UART_IRQHandler+0x460>
      return;
 80081ca:	bf00      	nop
 80081cc:	e006      	b.n	80081dc <HAL_UART_IRQHandler+0x460>
    return;
 80081ce:	bf00      	nop
 80081d0:	e004      	b.n	80081dc <HAL_UART_IRQHandler+0x460>
      return;
 80081d2:	bf00      	nop
 80081d4:	e002      	b.n	80081dc <HAL_UART_IRQHandler+0x460>
      return;
 80081d6:	bf00      	nop
 80081d8:	e000      	b.n	80081dc <HAL_UART_IRQHandler+0x460>
    return;
 80081da:	bf00      	nop
  }
}
 80081dc:	3720      	adds	r7, #32
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop

080081e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008238:	b5b0      	push	{r4, r5, r7, lr}
 800823a:	b088      	sub	sp, #32
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	4313      	orrs	r3, r2
 800825a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4bb1      	ldr	r3, [pc, #708]	; (8008528 <UART_SetConfig+0x2f0>)
 8008264:	4013      	ands	r3, r2
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6812      	ldr	r2, [r2, #0]
 800826a:	69f9      	ldr	r1, [r7, #28]
 800826c:	430b      	orrs	r3, r1
 800826e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4aa6      	ldr	r2, [pc, #664]	; (800852c <UART_SetConfig+0x2f4>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d004      	beq.n	80082a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	4313      	orrs	r3, r2
 800829e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80082aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6812      	ldr	r2, [r2, #0]
 80082b2:	69f9      	ldr	r1, [r7, #28]
 80082b4:	430b      	orrs	r3, r1
 80082b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	f023 010f 	bic.w	r1, r3, #15
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a97      	ldr	r2, [pc, #604]	; (8008530 <UART_SetConfig+0x2f8>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d120      	bne.n	800831a <UART_SetConfig+0xe2>
 80082d8:	4b96      	ldr	r3, [pc, #600]	; (8008534 <UART_SetConfig+0x2fc>)
 80082da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d816      	bhi.n	8008314 <UART_SetConfig+0xdc>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <UART_SetConfig+0xb4>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	080082fd 	.word	0x080082fd
 80082f0:	08008309 	.word	0x08008309
 80082f4:	08008303 	.word	0x08008303
 80082f8:	0800830f 	.word	0x0800830f
 80082fc:	2301      	movs	r3, #1
 80082fe:	76fb      	strb	r3, [r7, #27]
 8008300:	e0e7      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008302:	2302      	movs	r3, #2
 8008304:	76fb      	strb	r3, [r7, #27]
 8008306:	e0e4      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008308:	2304      	movs	r3, #4
 800830a:	76fb      	strb	r3, [r7, #27]
 800830c:	e0e1      	b.n	80084d2 <UART_SetConfig+0x29a>
 800830e:	2308      	movs	r3, #8
 8008310:	76fb      	strb	r3, [r7, #27]
 8008312:	e0de      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008314:	2310      	movs	r3, #16
 8008316:	76fb      	strb	r3, [r7, #27]
 8008318:	e0db      	b.n	80084d2 <UART_SetConfig+0x29a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a86      	ldr	r2, [pc, #536]	; (8008538 <UART_SetConfig+0x300>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d132      	bne.n	800838a <UART_SetConfig+0x152>
 8008324:	4b83      	ldr	r3, [pc, #524]	; (8008534 <UART_SetConfig+0x2fc>)
 8008326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832a:	f003 030c 	and.w	r3, r3, #12
 800832e:	2b0c      	cmp	r3, #12
 8008330:	d828      	bhi.n	8008384 <UART_SetConfig+0x14c>
 8008332:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <UART_SetConfig+0x100>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	0800836d 	.word	0x0800836d
 800833c:	08008385 	.word	0x08008385
 8008340:	08008385 	.word	0x08008385
 8008344:	08008385 	.word	0x08008385
 8008348:	08008379 	.word	0x08008379
 800834c:	08008385 	.word	0x08008385
 8008350:	08008385 	.word	0x08008385
 8008354:	08008385 	.word	0x08008385
 8008358:	08008373 	.word	0x08008373
 800835c:	08008385 	.word	0x08008385
 8008360:	08008385 	.word	0x08008385
 8008364:	08008385 	.word	0x08008385
 8008368:	0800837f 	.word	0x0800837f
 800836c:	2300      	movs	r3, #0
 800836e:	76fb      	strb	r3, [r7, #27]
 8008370:	e0af      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008372:	2302      	movs	r3, #2
 8008374:	76fb      	strb	r3, [r7, #27]
 8008376:	e0ac      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008378:	2304      	movs	r3, #4
 800837a:	76fb      	strb	r3, [r7, #27]
 800837c:	e0a9      	b.n	80084d2 <UART_SetConfig+0x29a>
 800837e:	2308      	movs	r3, #8
 8008380:	76fb      	strb	r3, [r7, #27]
 8008382:	e0a6      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008384:	2310      	movs	r3, #16
 8008386:	76fb      	strb	r3, [r7, #27]
 8008388:	e0a3      	b.n	80084d2 <UART_SetConfig+0x29a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a6b      	ldr	r2, [pc, #428]	; (800853c <UART_SetConfig+0x304>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d120      	bne.n	80083d6 <UART_SetConfig+0x19e>
 8008394:	4b67      	ldr	r3, [pc, #412]	; (8008534 <UART_SetConfig+0x2fc>)
 8008396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800839e:	2b30      	cmp	r3, #48	; 0x30
 80083a0:	d013      	beq.n	80083ca <UART_SetConfig+0x192>
 80083a2:	2b30      	cmp	r3, #48	; 0x30
 80083a4:	d814      	bhi.n	80083d0 <UART_SetConfig+0x198>
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d009      	beq.n	80083be <UART_SetConfig+0x186>
 80083aa:	2b20      	cmp	r3, #32
 80083ac:	d810      	bhi.n	80083d0 <UART_SetConfig+0x198>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d002      	beq.n	80083b8 <UART_SetConfig+0x180>
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d006      	beq.n	80083c4 <UART_SetConfig+0x18c>
 80083b6:	e00b      	b.n	80083d0 <UART_SetConfig+0x198>
 80083b8:	2300      	movs	r3, #0
 80083ba:	76fb      	strb	r3, [r7, #27]
 80083bc:	e089      	b.n	80084d2 <UART_SetConfig+0x29a>
 80083be:	2302      	movs	r3, #2
 80083c0:	76fb      	strb	r3, [r7, #27]
 80083c2:	e086      	b.n	80084d2 <UART_SetConfig+0x29a>
 80083c4:	2304      	movs	r3, #4
 80083c6:	76fb      	strb	r3, [r7, #27]
 80083c8:	e083      	b.n	80084d2 <UART_SetConfig+0x29a>
 80083ca:	2308      	movs	r3, #8
 80083cc:	76fb      	strb	r3, [r7, #27]
 80083ce:	e080      	b.n	80084d2 <UART_SetConfig+0x29a>
 80083d0:	2310      	movs	r3, #16
 80083d2:	76fb      	strb	r3, [r7, #27]
 80083d4:	e07d      	b.n	80084d2 <UART_SetConfig+0x29a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a59      	ldr	r2, [pc, #356]	; (8008540 <UART_SetConfig+0x308>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d120      	bne.n	8008422 <UART_SetConfig+0x1ea>
 80083e0:	4b54      	ldr	r3, [pc, #336]	; (8008534 <UART_SetConfig+0x2fc>)
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083ea:	2bc0      	cmp	r3, #192	; 0xc0
 80083ec:	d013      	beq.n	8008416 <UART_SetConfig+0x1de>
 80083ee:	2bc0      	cmp	r3, #192	; 0xc0
 80083f0:	d814      	bhi.n	800841c <UART_SetConfig+0x1e4>
 80083f2:	2b80      	cmp	r3, #128	; 0x80
 80083f4:	d009      	beq.n	800840a <UART_SetConfig+0x1d2>
 80083f6:	2b80      	cmp	r3, #128	; 0x80
 80083f8:	d810      	bhi.n	800841c <UART_SetConfig+0x1e4>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <UART_SetConfig+0x1cc>
 80083fe:	2b40      	cmp	r3, #64	; 0x40
 8008400:	d006      	beq.n	8008410 <UART_SetConfig+0x1d8>
 8008402:	e00b      	b.n	800841c <UART_SetConfig+0x1e4>
 8008404:	2300      	movs	r3, #0
 8008406:	76fb      	strb	r3, [r7, #27]
 8008408:	e063      	b.n	80084d2 <UART_SetConfig+0x29a>
 800840a:	2302      	movs	r3, #2
 800840c:	76fb      	strb	r3, [r7, #27]
 800840e:	e060      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008410:	2304      	movs	r3, #4
 8008412:	76fb      	strb	r3, [r7, #27]
 8008414:	e05d      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008416:	2308      	movs	r3, #8
 8008418:	76fb      	strb	r3, [r7, #27]
 800841a:	e05a      	b.n	80084d2 <UART_SetConfig+0x29a>
 800841c:	2310      	movs	r3, #16
 800841e:	76fb      	strb	r3, [r7, #27]
 8008420:	e057      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a47      	ldr	r2, [pc, #284]	; (8008544 <UART_SetConfig+0x30c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d125      	bne.n	8008478 <UART_SetConfig+0x240>
 800842c:	4b41      	ldr	r3, [pc, #260]	; (8008534 <UART_SetConfig+0x2fc>)
 800842e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800843a:	d017      	beq.n	800846c <UART_SetConfig+0x234>
 800843c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008440:	d817      	bhi.n	8008472 <UART_SetConfig+0x23a>
 8008442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008446:	d00b      	beq.n	8008460 <UART_SetConfig+0x228>
 8008448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800844c:	d811      	bhi.n	8008472 <UART_SetConfig+0x23a>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <UART_SetConfig+0x222>
 8008452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008456:	d006      	beq.n	8008466 <UART_SetConfig+0x22e>
 8008458:	e00b      	b.n	8008472 <UART_SetConfig+0x23a>
 800845a:	2300      	movs	r3, #0
 800845c:	76fb      	strb	r3, [r7, #27]
 800845e:	e038      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008460:	2302      	movs	r3, #2
 8008462:	76fb      	strb	r3, [r7, #27]
 8008464:	e035      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008466:	2304      	movs	r3, #4
 8008468:	76fb      	strb	r3, [r7, #27]
 800846a:	e032      	b.n	80084d2 <UART_SetConfig+0x29a>
 800846c:	2308      	movs	r3, #8
 800846e:	76fb      	strb	r3, [r7, #27]
 8008470:	e02f      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008472:	2310      	movs	r3, #16
 8008474:	76fb      	strb	r3, [r7, #27]
 8008476:	e02c      	b.n	80084d2 <UART_SetConfig+0x29a>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a2b      	ldr	r2, [pc, #172]	; (800852c <UART_SetConfig+0x2f4>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d125      	bne.n	80084ce <UART_SetConfig+0x296>
 8008482:	4b2c      	ldr	r3, [pc, #176]	; (8008534 <UART_SetConfig+0x2fc>)
 8008484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800848c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008490:	d017      	beq.n	80084c2 <UART_SetConfig+0x28a>
 8008492:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008496:	d817      	bhi.n	80084c8 <UART_SetConfig+0x290>
 8008498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849c:	d00b      	beq.n	80084b6 <UART_SetConfig+0x27e>
 800849e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a2:	d811      	bhi.n	80084c8 <UART_SetConfig+0x290>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <UART_SetConfig+0x278>
 80084a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ac:	d006      	beq.n	80084bc <UART_SetConfig+0x284>
 80084ae:	e00b      	b.n	80084c8 <UART_SetConfig+0x290>
 80084b0:	2300      	movs	r3, #0
 80084b2:	76fb      	strb	r3, [r7, #27]
 80084b4:	e00d      	b.n	80084d2 <UART_SetConfig+0x29a>
 80084b6:	2302      	movs	r3, #2
 80084b8:	76fb      	strb	r3, [r7, #27]
 80084ba:	e00a      	b.n	80084d2 <UART_SetConfig+0x29a>
 80084bc:	2304      	movs	r3, #4
 80084be:	76fb      	strb	r3, [r7, #27]
 80084c0:	e007      	b.n	80084d2 <UART_SetConfig+0x29a>
 80084c2:	2308      	movs	r3, #8
 80084c4:	76fb      	strb	r3, [r7, #27]
 80084c6:	e004      	b.n	80084d2 <UART_SetConfig+0x29a>
 80084c8:	2310      	movs	r3, #16
 80084ca:	76fb      	strb	r3, [r7, #27]
 80084cc:	e001      	b.n	80084d2 <UART_SetConfig+0x29a>
 80084ce:	2310      	movs	r3, #16
 80084d0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a15      	ldr	r2, [pc, #84]	; (800852c <UART_SetConfig+0x2f4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	f040 80a3 	bne.w	8008624 <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084de:	7efb      	ldrb	r3, [r7, #27]
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	d83b      	bhi.n	800855c <UART_SetConfig+0x324>
 80084e4:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <UART_SetConfig+0x2b4>)
 80084e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ea:	bf00      	nop
 80084ec:	08008511 	.word	0x08008511
 80084f0:	08008519 	.word	0x08008519
 80084f4:	08008521 	.word	0x08008521
 80084f8:	0800855d 	.word	0x0800855d
 80084fc:	0800854d 	.word	0x0800854d
 8008500:	0800855d 	.word	0x0800855d
 8008504:	0800855d 	.word	0x0800855d
 8008508:	0800855d 	.word	0x0800855d
 800850c:	08008555 	.word	0x08008555
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008510:	f7fd fad2 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8008514:	6178      	str	r0, [r7, #20]
        break;
 8008516:	e026      	b.n	8008566 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008518:	f7fd fae2 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 800851c:	6178      	str	r0, [r7, #20]
        break;
 800851e:	e022      	b.n	8008566 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <UART_SetConfig+0x310>)
 8008522:	617b      	str	r3, [r7, #20]
        break;
 8008524:	e01f      	b.n	8008566 <UART_SetConfig+0x32e>
 8008526:	bf00      	nop
 8008528:	cfff69f3 	.word	0xcfff69f3
 800852c:	40008000 	.word	0x40008000
 8008530:	40013800 	.word	0x40013800
 8008534:	40021000 	.word	0x40021000
 8008538:	40004400 	.word	0x40004400
 800853c:	40004800 	.word	0x40004800
 8008540:	40004c00 	.word	0x40004c00
 8008544:	40005000 	.word	0x40005000
 8008548:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800854c:	f7fd fa02 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8008550:	6178      	str	r0, [r7, #20]
        break;
 8008552:	e008      	b.n	8008566 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008558:	617b      	str	r3, [r7, #20]
        break;
 800855a:	e004      	b.n	8008566 <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	76bb      	strb	r3, [r7, #26]
        break;
 8008564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 811b 	beq.w	80087a4 <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	4a96      	ldr	r2, [pc, #600]	; (80087cc <UART_SetConfig+0x594>)
 8008574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008578:	461a      	mov	r2, r3
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008580:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	4613      	mov	r3, r2
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	4413      	add	r3, r2
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	d305      	bcc.n	800859e <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	429a      	cmp	r2, r3
 800859c:	d902      	bls.n	80085a4 <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	76bb      	strb	r3, [r7, #26]
 80085a2:	e0ff      	b.n	80087a4 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f04f 0100 	mov.w	r1, #0
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	4a86      	ldr	r2, [pc, #536]	; (80087cc <UART_SetConfig+0x594>)
 80085b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	f7f7 fe48 	bl	8000250 <__aeabi_uldivmod>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4610      	mov	r0, r2
 80085c6:	4619      	mov	r1, r3
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	020b      	lsls	r3, r1, #8
 80085d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085d6:	0202      	lsls	r2, r0, #8
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	6849      	ldr	r1, [r1, #4]
 80085dc:	0849      	lsrs	r1, r1, #1
 80085de:	4608      	mov	r0, r1
 80085e0:	f04f 0100 	mov.w	r1, #0
 80085e4:	1814      	adds	r4, r2, r0
 80085e6:	eb43 0501 	adc.w	r5, r3, r1
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	f7f7 fe2a 	bl	8000250 <__aeabi_uldivmod>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4613      	mov	r3, r2
 8008602:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800860a:	d308      	bcc.n	800861e <UART_SetConfig+0x3e6>
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008612:	d204      	bcs.n	800861e <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	60da      	str	r2, [r3, #12]
 800861c:	e0c2      	b.n	80087a4 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	76bb      	strb	r3, [r7, #26]
 8008622:	e0bf      	b.n	80087a4 <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800862c:	d165      	bne.n	80086fa <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 800862e:	7efb      	ldrb	r3, [r7, #27]
 8008630:	2b08      	cmp	r3, #8
 8008632:	d828      	bhi.n	8008686 <UART_SetConfig+0x44e>
 8008634:	a201      	add	r2, pc, #4	; (adr r2, 800863c <UART_SetConfig+0x404>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	08008661 	.word	0x08008661
 8008640:	08008669 	.word	0x08008669
 8008644:	08008671 	.word	0x08008671
 8008648:	08008687 	.word	0x08008687
 800864c:	08008677 	.word	0x08008677
 8008650:	08008687 	.word	0x08008687
 8008654:	08008687 	.word	0x08008687
 8008658:	08008687 	.word	0x08008687
 800865c:	0800867f 	.word	0x0800867f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008660:	f7fd fa2a 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8008664:	6178      	str	r0, [r7, #20]
        break;
 8008666:	e013      	b.n	8008690 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008668:	f7fd fa3a 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 800866c:	6178      	str	r0, [r7, #20]
        break;
 800866e:	e00f      	b.n	8008690 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008670:	4b57      	ldr	r3, [pc, #348]	; (80087d0 <UART_SetConfig+0x598>)
 8008672:	617b      	str	r3, [r7, #20]
        break;
 8008674:	e00c      	b.n	8008690 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008676:	f7fd f96d 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 800867a:	6178      	str	r0, [r7, #20]
        break;
 800867c:	e008      	b.n	8008690 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800867e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008682:	617b      	str	r3, [r7, #20]
        break;
 8008684:	e004      	b.n	8008690 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	76bb      	strb	r3, [r7, #26]
        break;
 800868e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 8086 	beq.w	80087a4 <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	4a4b      	ldr	r2, [pc, #300]	; (80087cc <UART_SetConfig+0x594>)
 800869e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a2:	461a      	mov	r2, r3
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80086aa:	005a      	lsls	r2, r3, #1
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	085b      	lsrs	r3, r3, #1
 80086b2:	441a      	add	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086bc:	b29b      	uxth	r3, r3
 80086be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b0f      	cmp	r3, #15
 80086c4:	d916      	bls.n	80086f4 <UART_SetConfig+0x4bc>
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086cc:	d212      	bcs.n	80086f4 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	f023 030f 	bic.w	r3, r3, #15
 80086d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	085b      	lsrs	r3, r3, #1
 80086dc:	b29b      	uxth	r3, r3
 80086de:	f003 0307 	and.w	r3, r3, #7
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	89fb      	ldrh	r3, [r7, #14]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	89fa      	ldrh	r2, [r7, #14]
 80086f0:	60da      	str	r2, [r3, #12]
 80086f2:	e057      	b.n	80087a4 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	76bb      	strb	r3, [r7, #26]
 80086f8:	e054      	b.n	80087a4 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086fa:	7efb      	ldrb	r3, [r7, #27]
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d828      	bhi.n	8008752 <UART_SetConfig+0x51a>
 8008700:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <UART_SetConfig+0x4d0>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	0800872d 	.word	0x0800872d
 800870c:	08008735 	.word	0x08008735
 8008710:	0800873d 	.word	0x0800873d
 8008714:	08008753 	.word	0x08008753
 8008718:	08008743 	.word	0x08008743
 800871c:	08008753 	.word	0x08008753
 8008720:	08008753 	.word	0x08008753
 8008724:	08008753 	.word	0x08008753
 8008728:	0800874b 	.word	0x0800874b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800872c:	f7fd f9c4 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8008730:	6178      	str	r0, [r7, #20]
        break;
 8008732:	e013      	b.n	800875c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008734:	f7fd f9d4 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 8008738:	6178      	str	r0, [r7, #20]
        break;
 800873a:	e00f      	b.n	800875c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800873c:	4b24      	ldr	r3, [pc, #144]	; (80087d0 <UART_SetConfig+0x598>)
 800873e:	617b      	str	r3, [r7, #20]
        break;
 8008740:	e00c      	b.n	800875c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008742:	f7fd f907 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8008746:	6178      	str	r0, [r7, #20]
        break;
 8008748:	e008      	b.n	800875c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800874a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800874e:	617b      	str	r3, [r7, #20]
        break;
 8008750:	e004      	b.n	800875c <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	76bb      	strb	r3, [r7, #26]
        break;
 800875a:	bf00      	nop
    }

    if (pclk != 0U)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d020      	beq.n	80087a4 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	4a19      	ldr	r2, [pc, #100]	; (80087cc <UART_SetConfig+0x594>)
 8008768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800876c:	461a      	mov	r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	fbb3 f2f2 	udiv	r2, r3, r2
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	085b      	lsrs	r3, r3, #1
 800877a:	441a      	add	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	fbb2 f3f3 	udiv	r3, r2, r3
 8008784:	b29b      	uxth	r3, r3
 8008786:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	2b0f      	cmp	r3, #15
 800878c:	d908      	bls.n	80087a0 <UART_SetConfig+0x568>
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008794:	d204      	bcs.n	80087a0 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	60da      	str	r2, [r3, #12]
 800879e:	e001      	b.n	80087a4 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80087c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3720      	adds	r7, #32
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bdb0      	pop	{r4, r5, r7, pc}
 80087ca:	bf00      	nop
 80087cc:	0800c458 	.word	0x0800c458
 80087d0:	00f42400 	.word	0x00f42400

080087d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00a      	beq.n	80087fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00a      	beq.n	8008842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00a      	beq.n	8008886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d01a      	beq.n	80088ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088d2:	d10a      	bne.n	80088ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	605a      	str	r2, [r3, #4]
  }
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af02      	add	r7, sp, #8
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008928:	f7f9 fb50 	bl	8001fcc <HAL_GetTick>
 800892c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b08      	cmp	r3, #8
 800893a:	d10e      	bne.n	800895a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800893c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f82f 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e025      	b.n	80089a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b04      	cmp	r3, #4
 8008966:	d10e      	bne.n	8008986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f819 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e00f      	b.n	80089a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	603b      	str	r3, [r7, #0]
 80089ba:	4613      	mov	r3, r2
 80089bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089be:	e062      	b.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d05e      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089c8:	f7f9 fb00 	bl	8001fcc <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d302      	bcc.n	80089de <UART_WaitOnFlagUntilTimeout+0x30>
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d11d      	bne.n	8008a1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0201 	bic.w	r2, r2, #1
 80089fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e045      	b.n	8008aa6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d02e      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a36:	d126      	bne.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0201 	bic.w	r2, r2, #1
 8008a60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e00f      	b.n	8008aa6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69da      	ldr	r2, [r3, #28]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	bf0c      	ite	eq
 8008a96:	2301      	moveq	r3, #1
 8008a98:	2300      	movne	r3, #0
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	79fb      	ldrb	r3, [r7, #7]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d08d      	beq.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2222      	movs	r2, #34	; 0x22
 8008ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02c      	beq.n	8008b3e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ae8:	4a25      	ldr	r2, [pc, #148]	; (8008b80 <UART_Start_Receive_DMA+0xd0>)
 8008aea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af0:	4a24      	ldr	r2, [pc, #144]	; (8008b84 <UART_Start_Receive_DMA+0xd4>)
 8008af2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af8:	4a23      	ldr	r2, [pc, #140]	; (8008b88 <UART_Start_Receive_DMA+0xd8>)
 8008afa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b00:	2200      	movs	r2, #0
 8008b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3324      	adds	r3, #36	; 0x24
 8008b0e:	4619      	mov	r1, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b14:	461a      	mov	r2, r3
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	f7fa fcf0 	bl	80034fc <HAL_DMA_Start_IT>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00d      	beq.n	8008b3e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2210      	movs	r2, #16
 8008b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e01c      	b.n	8008b78 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b54:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f042 0201 	orr.w	r2, r2, #1
 8008b64:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b74:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	08008c9d 	.word	0x08008c9d
 8008b84:	08008d37 	.word	0x08008d37
 8008b88:	08008d6f 	.word	0x08008d6f

08008b8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008ba2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008bb2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bde:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6812      	ldr	r2, [r2, #0]
 8008bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bee:	f023 0301 	bic.w	r3, r3, #1
 8008bf2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d107      	bne.n	8008c0c <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0210 	bic.w	r2, r2, #16
 8008c0a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c38:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0320 	and.w	r3, r3, #32
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d114      	bne.n	8008c72 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c5e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c6e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c70:	e002      	b.n	8008c78 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7f8 fa68 	bl	8001148 <HAL_UART_TxCpltCallback>
}
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f7ff faa8 	bl	80081e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c94:	bf00      	nop
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d12b      	bne.n	8008d10 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0201 	bic.w	r2, r2, #1
 8008cde:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cee:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d107      	bne.n	8008d10 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0210 	bic.w	r2, r2, #16
 8008d0e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d107      	bne.n	8008d28 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d1e:	4619      	mov	r1, r3
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f7ff fa7d 	bl	8008220 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d26:	e002      	b.n	8008d2e <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7f8 f9f9 	bl	8001120 <HAL_UART_RxCpltCallback>
}
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d109      	bne.n	8008d60 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d52:	085b      	lsrs	r3, r3, #1
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	4619      	mov	r1, r3
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f7ff fa61 	bl	8008220 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d5e:	e002      	b.n	8008d66 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f7ff fa49 	bl	80081f8 <HAL_UART_RxHalfCpltCallback>
}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d96:	2b80      	cmp	r3, #128	; 0x80
 8008d98:	d109      	bne.n	8008dae <UART_DMAError+0x40>
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2b21      	cmp	r3, #33	; 0x21
 8008d9e:	d106      	bne.n	8008dae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008da8:	6978      	ldr	r0, [r7, #20]
 8008daa:	f7ff feef 	bl	8008b8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db8:	2b40      	cmp	r3, #64	; 0x40
 8008dba:	d109      	bne.n	8008dd0 <UART_DMAError+0x62>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b22      	cmp	r3, #34	; 0x22
 8008dc0:	d106      	bne.n	8008dd0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008dca:	6978      	ldr	r0, [r7, #20]
 8008dcc:	f7ff fefc 	bl	8008bc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd6:	f043 0210 	orr.w	r2, r3, #16
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008de0:	6978      	ldr	r0, [r7, #20]
 8008de2:	f7ff fa13 	bl	800820c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de6:	bf00      	nop
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff f9fd 	bl	800820c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e30:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2220      	movs	r2, #32
 8008e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7f8 f981 	bl	8001148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008e6a:	bf00      	nop
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b085      	sub	sp, #20
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d101      	bne.n	8008ea0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	e027      	b.n	8008ef0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2224      	movs	r2, #36	; 0x24
 8008eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f022 0201 	bic.w	r2, r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ece:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e02d      	b.n	8008f70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2224      	movs	r2, #36	; 0x24
 8008f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0201 	bic.w	r2, r2, #1
 8008f3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f84f 	bl	8008ff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e02d      	b.n	8008fec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2224      	movs	r2, #36	; 0x24
 8008f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 0201 	bic.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f811 	bl	8008ff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009000:	2b00      	cmp	r3, #0
 8009002:	d108      	bne.n	8009016 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009014:	e031      	b.n	800907a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009016:	2308      	movs	r3, #8
 8009018:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800901a:	2308      	movs	r3, #8
 800901c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	0e5b      	lsrs	r3, r3, #25
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	0f5b      	lsrs	r3, r3, #29
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	7b3a      	ldrb	r2, [r7, #12]
 8009042:	4911      	ldr	r1, [pc, #68]	; (8009088 <UARTEx_SetNbDataToProcess+0x94>)
 8009044:	5c8a      	ldrb	r2, [r1, r2]
 8009046:	fb02 f303 	mul.w	r3, r2, r3
 800904a:	7b3a      	ldrb	r2, [r7, #12]
 800904c:	490f      	ldr	r1, [pc, #60]	; (800908c <UARTEx_SetNbDataToProcess+0x98>)
 800904e:	5c8a      	ldrb	r2, [r1, r2]
 8009050:	fb93 f3f2 	sdiv	r3, r3, r2
 8009054:	b29a      	uxth	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	7b7a      	ldrb	r2, [r7, #13]
 8009060:	4909      	ldr	r1, [pc, #36]	; (8009088 <UARTEx_SetNbDataToProcess+0x94>)
 8009062:	5c8a      	ldrb	r2, [r1, r2]
 8009064:	fb02 f303 	mul.w	r3, r2, r3
 8009068:	7b7a      	ldrb	r2, [r7, #13]
 800906a:	4908      	ldr	r1, [pc, #32]	; (800908c <UARTEx_SetNbDataToProcess+0x98>)
 800906c:	5c8a      	ldrb	r2, [r1, r2]
 800906e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009072:	b29a      	uxth	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800907a:	bf00      	nop
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	0800c470 	.word	0x0800c470
 800908c:	0800c478 	.word	0x0800c478

08009090 <__NVIC_SetPriority>:
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800909c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	db0a      	blt.n	80090ba <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	490c      	ldr	r1, [pc, #48]	; (80090dc <__NVIC_SetPriority+0x4c>)
 80090aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ae:	0152      	lsls	r2, r2, #5
 80090b0:	b2d2      	uxtb	r2, r2
 80090b2:	440b      	add	r3, r1
 80090b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80090b8:	e00a      	b.n	80090d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	4908      	ldr	r1, [pc, #32]	; (80090e0 <__NVIC_SetPriority+0x50>)
 80090c0:	79fb      	ldrb	r3, [r7, #7]
 80090c2:	f003 030f 	and.w	r3, r3, #15
 80090c6:	3b04      	subs	r3, #4
 80090c8:	0152      	lsls	r2, r2, #5
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	440b      	add	r3, r1
 80090ce:	761a      	strb	r2, [r3, #24]
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	e000e100 	.word	0xe000e100
 80090e0:	e000ed00 	.word	0xe000ed00

080090e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <SysTick_Handler+0x1c>)
 80090ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80090ec:	f001 fbf0 	bl	800a8d0 <xTaskGetSchedulerState>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d001      	beq.n	80090fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80090f6:	f002 f935 	bl	800b364 <xPortSysTickHandler>
  }
}
 80090fa:	bf00      	nop
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	e000e010 	.word	0xe000e010

08009104 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009108:	2100      	movs	r1, #0
 800910a:	f06f 0004 	mvn.w	r0, #4
 800910e:	f7ff ffbf 	bl	8009090 <__NVIC_SetPriority>
#endif
}
 8009112:	bf00      	nop
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800911e:	f3ef 8305 	mrs	r3, IPSR
 8009122:	603b      	str	r3, [r7, #0]
  return(result);
 8009124:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800912a:	f06f 0305 	mvn.w	r3, #5
 800912e:	607b      	str	r3, [r7, #4]
 8009130:	e00c      	b.n	800914c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009132:	4b0a      	ldr	r3, [pc, #40]	; (800915c <osKernelInitialize+0x44>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800913a:	4b08      	ldr	r3, [pc, #32]	; (800915c <osKernelInitialize+0x44>)
 800913c:	2201      	movs	r2, #1
 800913e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009140:	2300      	movs	r3, #0
 8009142:	607b      	str	r3, [r7, #4]
 8009144:	e002      	b.n	800914c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009146:	f04f 33ff 	mov.w	r3, #4294967295
 800914a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800914c:	687b      	ldr	r3, [r7, #4]
}
 800914e:	4618      	mov	r0, r3
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	200000d8 	.word	0x200000d8

08009160 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009166:	f3ef 8305 	mrs	r3, IPSR
 800916a:	603b      	str	r3, [r7, #0]
  return(result);
 800916c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009172:	f06f 0305 	mvn.w	r3, #5
 8009176:	607b      	str	r3, [r7, #4]
 8009178:	e010      	b.n	800919c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800917a:	4b0b      	ldr	r3, [pc, #44]	; (80091a8 <osKernelStart+0x48>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d109      	bne.n	8009196 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009182:	f7ff ffbf 	bl	8009104 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009186:	4b08      	ldr	r3, [pc, #32]	; (80091a8 <osKernelStart+0x48>)
 8009188:	2202      	movs	r2, #2
 800918a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800918c:	f000 ffa4 	bl	800a0d8 <vTaskStartScheduler>
      stat = osOK;
 8009190:	2300      	movs	r3, #0
 8009192:	607b      	str	r3, [r7, #4]
 8009194:	e002      	b.n	800919c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009196:	f04f 33ff 	mov.w	r3, #4294967295
 800919a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800919c:	687b      	ldr	r3, [r7, #4]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200000d8 	.word	0x200000d8

080091ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08e      	sub	sp, #56	; 0x38
 80091b0:	af04      	add	r7, sp, #16
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091b8:	2300      	movs	r3, #0
 80091ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091bc:	f3ef 8305 	mrs	r3, IPSR
 80091c0:	617b      	str	r3, [r7, #20]
  return(result);
 80091c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d17e      	bne.n	80092c6 <osThreadNew+0x11a>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d07b      	beq.n	80092c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091ce:	2380      	movs	r3, #128	; 0x80
 80091d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091d2:	2318      	movs	r3, #24
 80091d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80091da:	f04f 33ff 	mov.w	r3, #4294967295
 80091de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d045      	beq.n	8009272 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <osThreadNew+0x48>
        name = attr->name;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d008      	beq.n	800921a <osThreadNew+0x6e>
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	2b38      	cmp	r3, #56	; 0x38
 800920c:	d805      	bhi.n	800921a <osThreadNew+0x6e>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <osThreadNew+0x72>
        return (NULL);
 800921a:	2300      	movs	r3, #0
 800921c:	e054      	b.n	80092c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	089b      	lsrs	r3, r3, #2
 800922c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00e      	beq.n	8009254 <osThreadNew+0xa8>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	2b5f      	cmp	r3, #95	; 0x5f
 800923c:	d90a      	bls.n	8009254 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009242:	2b00      	cmp	r3, #0
 8009244:	d006      	beq.n	8009254 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <osThreadNew+0xa8>
        mem = 1;
 800924e:	2301      	movs	r3, #1
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	e010      	b.n	8009276 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10c      	bne.n	8009276 <osThreadNew+0xca>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d108      	bne.n	8009276 <osThreadNew+0xca>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d104      	bne.n	8009276 <osThreadNew+0xca>
          mem = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	e001      	b.n	8009276 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d110      	bne.n	800929e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009284:	9202      	str	r2, [sp, #8]
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	6a3a      	ldr	r2, [r7, #32]
 8009290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 fd7e 	bl	8009d94 <xTaskCreateStatic>
 8009298:	4603      	mov	r3, r0
 800929a:	613b      	str	r3, [r7, #16]
 800929c:	e013      	b.n	80092c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d110      	bne.n	80092c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	f107 0310 	add.w	r3, r7, #16
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fdb1 	bl	8009e1e <xTaskCreate>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d001      	beq.n	80092c6 <osThreadNew+0x11a>
            hTask = NULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092c6:	693b      	ldr	r3, [r7, #16]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3728      	adds	r7, #40	; 0x28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092d8:	f3ef 8305 	mrs	r3, IPSR
 80092dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80092de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <osDelay+0x1c>
    stat = osErrorISR;
 80092e4:	f06f 0305 	mvn.w	r3, #5
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	e007      	b.n	80092fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 feca 	bl	800a090 <vTaskDelay>
    }
  }

  return (stat);
 80092fc:	68fb      	ldr	r3, [r7, #12]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4a07      	ldr	r2, [pc, #28]	; (8009334 <vApplicationGetIdleTaskMemory+0x2c>)
 8009318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	4a06      	ldr	r2, [pc, #24]	; (8009338 <vApplicationGetIdleTaskMemory+0x30>)
 800931e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2280      	movs	r2, #128	; 0x80
 8009324:	601a      	str	r2, [r3, #0]
}
 8009326:	bf00      	nop
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	200000dc 	.word	0x200000dc
 8009338:	2000013c 	.word	0x2000013c

0800933c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4a07      	ldr	r2, [pc, #28]	; (8009368 <vApplicationGetTimerTaskMemory+0x2c>)
 800934c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	4a06      	ldr	r2, [pc, #24]	; (800936c <vApplicationGetTimerTaskMemory+0x30>)
 8009352:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800935a:	601a      	str	r2, [r3, #0]
}
 800935c:	bf00      	nop
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	2000033c 	.word	0x2000033c
 800936c:	2000039c 	.word	0x2000039c

08009370 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f103 0208 	add.w	r2, r3, #8
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f04f 32ff 	mov.w	r2, #4294967295
 8009388:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f103 0208 	add.w	r2, r3, #8
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f103 0208 	add.w	r2, r3, #8
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	601a      	str	r2, [r3, #0]
}
 8009406:	bf00      	nop
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009412:	b480      	push	{r7}
 8009414:	b085      	sub	sp, #20
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d103      	bne.n	8009432 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	e00c      	b.n	800944c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3308      	adds	r3, #8
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e002      	b.n	8009440 <vListInsert+0x2e>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	429a      	cmp	r2, r3
 800944a:	d2f6      	bcs.n	800943a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	601a      	str	r2, [r3, #0]
}
 8009478:	bf00      	nop
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6892      	ldr	r2, [r2, #8]
 800949a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6852      	ldr	r2, [r2, #4]
 80094a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d103      	bne.n	80094b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	1e5a      	subs	r2, r3, #1
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <xQueueGenericReset+0x1a>
 80094ec:	f002 f844 	bl	800b578 <ulSetInterruptMask>
 80094f0:	e7fe      	b.n	80094f0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80094f2:	f001 ff0b 	bl	800b30c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fe:	68f9      	ldr	r1, [r7, #12]
 8009500:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009502:	fb01 f303 	mul.w	r3, r1, r3
 8009506:	441a      	add	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009522:	3b01      	subs	r3, #1
 8009524:	68f9      	ldr	r1, [r7, #12]
 8009526:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009528:	fb01 f303 	mul.w	r3, r1, r3
 800952c:	441a      	add	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	22ff      	movs	r2, #255	; 0xff
 8009536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	22ff      	movs	r2, #255	; 0xff
 800953e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10e      	bne.n	8009566 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d014      	beq.n	800957a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3310      	adds	r3, #16
 8009554:	4618      	mov	r0, r3
 8009556:	f001 f825 	bl	800a5a4 <xTaskRemoveFromEventList>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00c      	beq.n	800957a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009560:	f001 fec2 	bl	800b2e8 <vPortYield>
 8009564:	e009      	b.n	800957a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	3310      	adds	r3, #16
 800956a:	4618      	mov	r0, r3
 800956c:	f7ff ff00 	bl	8009370 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3324      	adds	r3, #36	; 0x24
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fefb 	bl	8009370 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800957a:	f001 fed9 	bl	800b330 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800957e:	2301      	movs	r3, #1
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009588:	b580      	push	{r7, lr}
 800958a:	b088      	sub	sp, #32
 800958c:	af02      	add	r7, sp, #8
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
 8009594:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <xQueueGenericCreateStatic+0x1a>
 800959c:	f001 ffec 	bl	800b578 <ulSetInterruptMask>
 80095a0:	e7fe      	b.n	80095a0 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d102      	bne.n	80095ae <xQueueGenericCreateStatic+0x26>
 80095a8:	f001 ffe6 	bl	800b578 <ulSetInterruptMask>
 80095ac:	e7fe      	b.n	80095ac <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <xQueueGenericCreateStatic+0x32>
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <xQueueGenericCreateStatic+0x36>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e000      	b.n	80095c0 <xQueueGenericCreateStatic+0x38>
 80095be:	2300      	movs	r3, #0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d102      	bne.n	80095ca <xQueueGenericCreateStatic+0x42>
 80095c4:	f001 ffd8 	bl	800b578 <ulSetInterruptMask>
 80095c8:	e7fe      	b.n	80095c8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <xQueueGenericCreateStatic+0x4e>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <xQueueGenericCreateStatic+0x52>
 80095d6:	2301      	movs	r3, #1
 80095d8:	e000      	b.n	80095dc <xQueueGenericCreateStatic+0x54>
 80095da:	2300      	movs	r3, #0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d102      	bne.n	80095e6 <xQueueGenericCreateStatic+0x5e>
 80095e0:	f001 ffca 	bl	800b578 <ulSetInterruptMask>
 80095e4:	e7fe      	b.n	80095e4 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095e6:	2350      	movs	r3, #80	; 0x50
 80095e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	2b50      	cmp	r3, #80	; 0x50
 80095ee:	d002      	beq.n	80095f6 <xQueueGenericCreateStatic+0x6e>
 80095f0:	f001 ffc2 	bl	800b578 <ulSetInterruptMask>
 80095f4:	e7fe      	b.n	80095f4 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095f6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00d      	beq.n	800961e <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800960a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	4613      	mov	r3, r2
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f837 	bl	800968c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800961e:	697b      	ldr	r3, [r7, #20]
	}
 8009620:	4618      	mov	r0, r3
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af02      	add	r7, sp, #8
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4613      	mov	r3, r2
 8009634:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <xQueueGenericCreate+0x1a>
 800963c:	f001 ff9c 	bl	800b578 <ulSetInterruptMask>
 8009640:	e7fe      	b.n	8009640 <xQueueGenericCreate+0x18>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	fb02 f303 	mul.w	r3, r2, r3
 800964a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	3350      	adds	r3, #80	; 0x50
 8009650:	4618      	mov	r0, r3
 8009652:	f001 fff9 	bl	800b648 <pvPortMalloc>
 8009656:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d011      	beq.n	8009682 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	3350      	adds	r3, #80	; 0x50
 8009666:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009670:	79fa      	ldrb	r2, [r7, #7]
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	4613      	mov	r3, r2
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 f805 	bl	800968c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009682:	69bb      	ldr	r3, [r7, #24]
	}
 8009684:	4618      	mov	r0, r3
 8009686:	3720      	adds	r7, #32
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d103      	bne.n	80096a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	e002      	b.n	80096ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096ba:	2101      	movs	r1, #1
 80096bc:	69b8      	ldr	r0, [r7, #24]
 80096be:	f7ff ff0b 	bl	80094d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	78fa      	ldrb	r2, [r7, #3]
 80096c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b08a      	sub	sp, #40	; 0x28
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
 80096de:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096e0:	2300      	movs	r3, #0
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d102      	bne.n	80096f4 <xQueueGenericSend+0x22>
 80096ee:	f001 ff43 	bl	800b578 <ulSetInterruptMask>
 80096f2:	e7fe      	b.n	80096f2 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d103      	bne.n	8009702 <xQueueGenericSend+0x30>
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <xQueueGenericSend+0x34>
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <xQueueGenericSend+0x36>
 8009706:	2300      	movs	r3, #0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d102      	bne.n	8009712 <xQueueGenericSend+0x40>
 800970c:	f001 ff34 	bl	800b578 <ulSetInterruptMask>
 8009710:	e7fe      	b.n	8009710 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b02      	cmp	r3, #2
 8009716:	d103      	bne.n	8009720 <xQueueGenericSend+0x4e>
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <xQueueGenericSend+0x52>
 8009720:	2301      	movs	r3, #1
 8009722:	e000      	b.n	8009726 <xQueueGenericSend+0x54>
 8009724:	2300      	movs	r3, #0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <xQueueGenericSend+0x5e>
 800972a:	f001 ff25 	bl	800b578 <ulSetInterruptMask>
 800972e:	e7fe      	b.n	800972e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009730:	f001 f8ce 	bl	800a8d0 <xTaskGetSchedulerState>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d102      	bne.n	8009740 <xQueueGenericSend+0x6e>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <xQueueGenericSend+0x72>
 8009740:	2301      	movs	r3, #1
 8009742:	e000      	b.n	8009746 <xQueueGenericSend+0x74>
 8009744:	2300      	movs	r3, #0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d102      	bne.n	8009750 <xQueueGenericSend+0x7e>
 800974a:	f001 ff15 	bl	800b578 <ulSetInterruptMask>
 800974e:	e7fe      	b.n	800974e <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009750:	f001 fddc 	bl	800b30c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009758:	6a3b      	ldr	r3, [r7, #32]
 800975a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975c:	429a      	cmp	r2, r3
 800975e:	d302      	bcc.n	8009766 <xQueueGenericSend+0x94>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b02      	cmp	r3, #2
 8009764:	d11d      	bne.n	80097a2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	68b9      	ldr	r1, [r7, #8]
 800976a:	6a38      	ldr	r0, [r7, #32]
 800976c:	f000 f9a4 	bl	8009ab8 <prvCopyDataToQueue>
 8009770:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	3324      	adds	r3, #36	; 0x24
 800977e:	4618      	mov	r0, r3
 8009780:	f000 ff10 	bl	800a5a4 <xTaskRemoveFromEventList>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d007      	beq.n	800979a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800978a:	f001 fdad 	bl	800b2e8 <vPortYield>
 800978e:	e004      	b.n	800979a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009796:	f001 fda7 	bl	800b2e8 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800979a:	f001 fdc9 	bl	800b330 <vPortExitCritical>
				return pdPASS;
 800979e:	2301      	movs	r3, #1
 80097a0:	e05c      	b.n	800985c <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097a8:	f001 fdc2 	bl	800b330 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e055      	b.n	800985c <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097b6:	f107 0314 	add.w	r3, r7, #20
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 ff4e 	bl	800a65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097c0:	2301      	movs	r3, #1
 80097c2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097c4:	f001 fdb4 	bl	800b330 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097c8:	f000 fcde 	bl	800a188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097cc:	f001 fd9e 	bl	800b30c <vPortEnterCritical>
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097d6:	b25b      	sxtb	r3, r3
 80097d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097dc:	d103      	bne.n	80097e6 <xQueueGenericSend+0x114>
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ec:	b25b      	sxtb	r3, r3
 80097ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f2:	d103      	bne.n	80097fc <xQueueGenericSend+0x12a>
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097fc:	f001 fd98 	bl	800b330 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009800:	1d3a      	adds	r2, r7, #4
 8009802:	f107 0314 	add.w	r3, r7, #20
 8009806:	4611      	mov	r1, r2
 8009808:	4618      	mov	r0, r3
 800980a:	f000 ff3d 	bl	800a688 <xTaskCheckForTimeOut>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d11d      	bne.n	8009850 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009814:	6a38      	ldr	r0, [r7, #32]
 8009816:	f000 fa47 	bl	8009ca8 <prvIsQueueFull>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d011      	beq.n	8009844 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	3310      	adds	r3, #16
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	4611      	mov	r1, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fe7b 	bl	800a524 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800982e:	6a38      	ldr	r0, [r7, #32]
 8009830:	f000 f9d2 	bl	8009bd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009834:	f000 fcb6 	bl	800a1a4 <xTaskResumeAll>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d188      	bne.n	8009750 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800983e:	f001 fd53 	bl	800b2e8 <vPortYield>
 8009842:	e785      	b.n	8009750 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009844:	6a38      	ldr	r0, [r7, #32]
 8009846:	f000 f9c7 	bl	8009bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800984a:	f000 fcab 	bl	800a1a4 <xTaskResumeAll>
 800984e:	e77f      	b.n	8009750 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009850:	6a38      	ldr	r0, [r7, #32]
 8009852:	f000 f9c1 	bl	8009bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009856:	f000 fca5 	bl	800a1a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800985a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800985c:	4618      	mov	r0, r3
 800985e:	3728      	adds	r7, #40	; 0x28
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08a      	sub	sp, #40	; 0x28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d102      	bne.n	8009882 <xQueueGenericSendFromISR+0x1e>
 800987c:	f001 fe7c 	bl	800b578 <ulSetInterruptMask>
 8009880:	e7fe      	b.n	8009880 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d103      	bne.n	8009890 <xQueueGenericSendFromISR+0x2c>
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <xQueueGenericSendFromISR+0x30>
 8009890:	2301      	movs	r3, #1
 8009892:	e000      	b.n	8009896 <xQueueGenericSendFromISR+0x32>
 8009894:	2300      	movs	r3, #0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d102      	bne.n	80098a0 <xQueueGenericSendFromISR+0x3c>
 800989a:	f001 fe6d 	bl	800b578 <ulSetInterruptMask>
 800989e:	e7fe      	b.n	800989e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d103      	bne.n	80098ae <xQueueGenericSendFromISR+0x4a>
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <xQueueGenericSendFromISR+0x4e>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <xQueueGenericSendFromISR+0x50>
 80098b2:	2300      	movs	r3, #0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d102      	bne.n	80098be <xQueueGenericSendFromISR+0x5a>
 80098b8:	f001 fe5e 	bl	800b578 <ulSetInterruptMask>
 80098bc:	e7fe      	b.n	80098bc <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098be:	f001 fe5b 	bl	800b578 <ulSetInterruptMask>
 80098c2:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d302      	bcc.n	80098d6 <xQueueGenericSendFromISR+0x72>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d12d      	bne.n	8009932 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098dc:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e2:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	68b9      	ldr	r1, [r7, #8]
 80098e8:	6a38      	ldr	r0, [r7, #32]
 80098ea:	f000 f8e5 	bl	8009ab8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80098f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f6:	d112      	bne.n	800991e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d015      	beq.n	800992c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	3324      	adds	r3, #36	; 0x24
 8009904:	4618      	mov	r0, r3
 8009906:	f000 fe4d 	bl	800a5a4 <xTaskRemoveFromEventList>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00d      	beq.n	800992c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e006      	b.n	800992c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800991e:	7efb      	ldrb	r3, [r7, #27]
 8009920:	3301      	adds	r3, #1
 8009922:	b2db      	uxtb	r3, r3
 8009924:	b25a      	sxtb	r2, r3
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800992c:	2301      	movs	r3, #1
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8009930:	e001      	b.n	8009936 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009932:	2300      	movs	r3, #0
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8009936:	69f8      	ldr	r0, [r7, #28]
 8009938:	f001 fe2b 	bl	800b592 <vClearInterruptMask>

	return xReturn;
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800993e:	4618      	mov	r0, r3
 8009940:	3728      	adds	r7, #40	; 0x28
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b08a      	sub	sp, #40	; 0x28
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d102      	bne.n	8009966 <xQueueReceive+0x20>
 8009960:	f001 fe0a 	bl	800b578 <ulSetInterruptMask>
 8009964:	e7fe      	b.n	8009964 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d103      	bne.n	8009974 <xQueueReceive+0x2e>
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <xQueueReceive+0x32>
 8009974:	2301      	movs	r3, #1
 8009976:	e000      	b.n	800997a <xQueueReceive+0x34>
 8009978:	2300      	movs	r3, #0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d102      	bne.n	8009984 <xQueueReceive+0x3e>
 800997e:	f001 fdfb 	bl	800b578 <ulSetInterruptMask>
 8009982:	e7fe      	b.n	8009982 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009984:	f000 ffa4 	bl	800a8d0 <xTaskGetSchedulerState>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d102      	bne.n	8009994 <xQueueReceive+0x4e>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <xQueueReceive+0x52>
 8009994:	2301      	movs	r3, #1
 8009996:	e000      	b.n	800999a <xQueueReceive+0x54>
 8009998:	2300      	movs	r3, #0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <xQueueReceive+0x5e>
 800999e:	f001 fdeb 	bl	800b578 <ulSetInterruptMask>
 80099a2:	e7fe      	b.n	80099a2 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099a4:	f001 fcb2 	bl	800b30c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ac:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d019      	beq.n	80099e8 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	6a38      	ldr	r0, [r7, #32]
 80099b8:	f000 f8e8 	bl	8009b8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	1e5a      	subs	r2, r3, #1
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	3310      	adds	r3, #16
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 fde7 	bl	800a5a4 <xTaskRemoveFromEventList>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099dc:	f001 fc84 	bl	800b2e8 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099e0:	f001 fca6 	bl	800b330 <vPortExitCritical>
				return pdPASS;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e063      	b.n	8009ab0 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d103      	bne.n	80099f6 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099ee:	f001 fc9f 	bl	800b330 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099f2:	2300      	movs	r3, #0
 80099f4:	e05c      	b.n	8009ab0 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d106      	bne.n	8009a0a <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099fc:	f107 0314 	add.w	r3, r7, #20
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 fe2b 	bl	800a65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a06:	2301      	movs	r3, #1
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a0a:	f001 fc91 	bl	800b330 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a0e:	f000 fbbb 	bl	800a188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a12:	f001 fc7b 	bl	800b30c <vPortEnterCritical>
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a1c:	b25b      	sxtb	r3, r3
 8009a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a22:	d103      	bne.n	8009a2c <xQueueReceive+0xe6>
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a32:	b25b      	sxtb	r3, r3
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a38:	d103      	bne.n	8009a42 <xQueueReceive+0xfc>
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a42:	f001 fc75 	bl	800b330 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a46:	1d3a      	adds	r2, r7, #4
 8009a48:	f107 0314 	add.w	r3, r7, #20
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fe1a 	bl	800a688 <xTaskCheckForTimeOut>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d11d      	bne.n	8009a96 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a5a:	6a38      	ldr	r0, [r7, #32]
 8009a5c:	f000 f90e 	bl	8009c7c <prvIsQueueEmpty>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d011      	beq.n	8009a8a <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	3324      	adds	r3, #36	; 0x24
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 fd58 	bl	800a524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a74:	6a38      	ldr	r0, [r7, #32]
 8009a76:	f000 f8af 	bl	8009bd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a7a:	f000 fb93 	bl	800a1a4 <xTaskResumeAll>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d18f      	bne.n	80099a4 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8009a84:	f001 fc30 	bl	800b2e8 <vPortYield>
 8009a88:	e78c      	b.n	80099a4 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a8a:	6a38      	ldr	r0, [r7, #32]
 8009a8c:	f000 f8a4 	bl	8009bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a90:	f000 fb88 	bl	800a1a4 <xTaskResumeAll>
 8009a94:	e786      	b.n	80099a4 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a96:	6a38      	ldr	r0, [r7, #32]
 8009a98:	f000 f89e 	bl	8009bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a9c:	f000 fb82 	bl	800a1a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009aa0:	6a38      	ldr	r0, [r7, #32]
 8009aa2:	f000 f8eb 	bl	8009c7c <prvIsQueueEmpty>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f43f af7b 	beq.w	80099a4 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009aae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3728      	adds	r7, #40	; 0x28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009acc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10d      	bne.n	8009af2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d14d      	bne.n	8009b7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 ff12 	bl	800a90c <xTaskPriorityDisinherit>
 8009ae8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	609a      	str	r2, [r3, #8]
 8009af0:	e043      	b.n	8009b7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d119      	bne.n	8009b2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6858      	ldr	r0, [r3, #4]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b00:	461a      	mov	r2, r3
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	f001 ff94 	bl	800ba30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d32b      	bcc.n	8009b7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	605a      	str	r2, [r3, #4]
 8009b2a:	e026      	b.n	8009b7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	68d8      	ldr	r0, [r3, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b34:	461a      	mov	r2, r3
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	f001 ff7a 	bl	800ba30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	425b      	negs	r3, r3
 8009b46:	441a      	add	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d207      	bcs.n	8009b68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	689a      	ldr	r2, [r3, #8]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b60:	425b      	negs	r3, r3
 8009b62:	441a      	add	r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d105      	bne.n	8009b7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b82:	697b      	ldr	r3, [r7, #20]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3718      	adds	r7, #24
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d018      	beq.n	8009bd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	441a      	add	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d303      	bcc.n	8009bc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68d9      	ldr	r1, [r3, #12]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6838      	ldr	r0, [r7, #0]
 8009bcc:	f001 ff30 	bl	800ba30 <memcpy>
	}
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009be0:	f001 fb94 	bl	800b30c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bec:	e011      	b.n	8009c12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d012      	beq.n	8009c1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3324      	adds	r3, #36	; 0x24
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 fcd2 	bl	800a5a4 <xTaskRemoveFromEventList>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c06:	f000 fd91 	bl	800a72c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	dce9      	bgt.n	8009bee <prvUnlockQueue+0x16>
 8009c1a:	e000      	b.n	8009c1e <prvUnlockQueue+0x46>
					break;
 8009c1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	22ff      	movs	r2, #255	; 0xff
 8009c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c26:	f001 fb83 	bl	800b330 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c2a:	f001 fb6f 	bl	800b30c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c36:	e011      	b.n	8009c5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d012      	beq.n	8009c66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	3310      	adds	r3, #16
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 fcad 	bl	800a5a4 <xTaskRemoveFromEventList>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c50:	f000 fd6c 	bl	800a72c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dce9      	bgt.n	8009c38 <prvUnlockQueue+0x60>
 8009c64:	e000      	b.n	8009c68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	22ff      	movs	r2, #255	; 0xff
 8009c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c70:	f001 fb5e 	bl	800b330 <vPortExitCritical>
}
 8009c74:	bf00      	nop
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c84:	f001 fb42 	bl	800b30c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c90:	2301      	movs	r3, #1
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	e001      	b.n	8009c9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c9a:	f001 fb49 	bl	800b330 <vPortExitCritical>

	return xReturn;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cb0:	f001 fb2c 	bl	800b30c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d102      	bne.n	8009cc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e001      	b.n	8009cca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cca:	f001 fb31 	bl	800b330 <vPortExitCritical>

	return xReturn;
 8009cce:	68fb      	ldr	r3, [r7, #12]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	60fb      	str	r3, [r7, #12]
 8009ce6:	e014      	b.n	8009d12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ce8:	4a0f      	ldr	r2, [pc, #60]	; (8009d28 <vQueueAddToRegistry+0x50>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10b      	bne.n	8009d0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cf4:	490c      	ldr	r1, [pc, #48]	; (8009d28 <vQueueAddToRegistry+0x50>)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cfe:	4a0a      	ldr	r2, [pc, #40]	; (8009d28 <vQueueAddToRegistry+0x50>)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	4413      	add	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d0a:	e006      	b.n	8009d1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	60fb      	str	r3, [r7, #12]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b07      	cmp	r3, #7
 8009d16:	d9e7      	bls.n	8009ce8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	2000788c 	.word	0x2000788c

08009d2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d3c:	f001 fae6 	bl	800b30c <vPortEnterCritical>
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d46:	b25b      	sxtb	r3, r3
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4c:	d103      	bne.n	8009d56 <vQueueWaitForMessageRestricted+0x2a>
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d5c:	b25b      	sxtb	r3, r3
 8009d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d62:	d103      	bne.n	8009d6c <vQueueWaitForMessageRestricted+0x40>
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d6c:	f001 fae0 	bl	800b330 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	3324      	adds	r3, #36	; 0x24
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	68b9      	ldr	r1, [r7, #8]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fbeb 	bl	800a55c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d86:	6978      	ldr	r0, [r7, #20]
 8009d88:	f7ff ff26 	bl	8009bd8 <prvUnlockQueue>
	}
 8009d8c:	bf00      	nop
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08c      	sub	sp, #48	; 0x30
 8009d98:	af04      	add	r7, sp, #16
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <xTaskCreateStatic+0x1a>
 8009da8:	f001 fbe6 	bl	800b578 <ulSetInterruptMask>
 8009dac:	e7fe      	b.n	8009dac <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d102      	bne.n	8009dba <xTaskCreateStatic+0x26>
 8009db4:	f001 fbe0 	bl	800b578 <ulSetInterruptMask>
 8009db8:	e7fe      	b.n	8009db8 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009dba:	2360      	movs	r3, #96	; 0x60
 8009dbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b60      	cmp	r3, #96	; 0x60
 8009dc2:	d002      	beq.n	8009dca <xTaskCreateStatic+0x36>
 8009dc4:	f001 fbd8 	bl	800b578 <ulSetInterruptMask>
 8009dc8:	e7fe      	b.n	8009dc8 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009dca:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d01e      	beq.n	8009e10 <xTaskCreateStatic+0x7c>
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01b      	beq.n	8009e10 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009de0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	2202      	movs	r2, #2
 8009de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009dea:	2300      	movs	r3, #0
 8009dec:	9303      	str	r3, [sp, #12]
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	9302      	str	r3, [sp, #8]
 8009df2:	f107 0318 	add.w	r3, r7, #24
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	68b9      	ldr	r1, [r7, #8]
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 f850 	bl	8009ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e08:	69f8      	ldr	r0, [r7, #28]
 8009e0a:	f000 f8d9 	bl	8009fc0 <prvAddNewTaskToReadyList>
 8009e0e:	e001      	b.n	8009e14 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8009e10:	2300      	movs	r3, #0
 8009e12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e14:	69bb      	ldr	r3, [r7, #24]
	}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b08c      	sub	sp, #48	; 0x30
 8009e22:	af04      	add	r7, sp, #16
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	603b      	str	r3, [r7, #0]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e2e:	88fb      	ldrh	r3, [r7, #6]
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f001 fc08 	bl	800b648 <pvPortMalloc>
 8009e38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00e      	beq.n	8009e5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e40:	2060      	movs	r0, #96	; 0x60
 8009e42:	f001 fc01 	bl	800b648 <pvPortMalloc>
 8009e46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	631a      	str	r2, [r3, #48]	; 0x30
 8009e54:	e005      	b.n	8009e62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e56:	6978      	ldr	r0, [r7, #20]
 8009e58:	f001 fcaa 	bl	800b7b0 <vPortFree>
 8009e5c:	e001      	b.n	8009e62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d017      	beq.n	8009e98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e70:	88fa      	ldrh	r2, [r7, #6]
 8009e72:	2300      	movs	r3, #0
 8009e74:	9303      	str	r3, [sp, #12]
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	9302      	str	r3, [sp, #8]
 8009e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7c:	9301      	str	r3, [sp, #4]
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 f80e 	bl	8009ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e8c:	69f8      	ldr	r0, [r7, #28]
 8009e8e:	f000 f897 	bl	8009fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e92:	2301      	movs	r3, #1
 8009e94:	61bb      	str	r3, [r7, #24]
 8009e96:	e002      	b.n	8009e9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e98:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
	}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3720      	adds	r7, #32
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	21a5      	movs	r1, #165	; 0xa5
 8009ec2:	f001 fdc2 	bl	800ba4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f023 0307 	bic.w	r3, r3, #7
 8009ede:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f003 0307 	and.w	r3, r3, #7
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <prvInitialiseNewTask+0x48>
 8009eea:	f001 fb45 	bl	800b578 <ulSetInterruptMask>
 8009eee:	e7fe      	b.n	8009eee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d01f      	beq.n	8009f36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	e012      	b.n	8009f22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	4413      	add	r3, r2
 8009f02:	7819      	ldrb	r1, [r3, #0]
 8009f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	4413      	add	r3, r2
 8009f0a:	3334      	adds	r3, #52	; 0x34
 8009f0c:	460a      	mov	r2, r1
 8009f0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	4413      	add	r3, r2
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d006      	beq.n	8009f2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2b0f      	cmp	r3, #15
 8009f26:	d9e9      	bls.n	8009efc <prvInitialiseNewTask+0x54>
 8009f28:	e000      	b.n	8009f2c <prvInitialiseNewTask+0x84>
			{
				break;
 8009f2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f34:	e003      	b.n	8009f3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	2b37      	cmp	r3, #55	; 0x37
 8009f42:	d901      	bls.n	8009f48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f44:	2337      	movs	r3, #55	; 0x37
 8009f46:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	6a3a      	ldr	r2, [r7, #32]
 8009f4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f50:	6a3a      	ldr	r2, [r7, #32]
 8009f52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	2200      	movs	r2, #0
 8009f58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff fa26 	bl	80093b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	3318      	adds	r3, #24
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff fa21 	bl	80093b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	2200      	movs	r2, #0
 8009f88:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	6938      	ldr	r0, [r7, #16]
 8009fa2:	f001 fa11 	bl	800b3c8 <pxPortInitialiseStack>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d002      	beq.n	8009fb8 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fb8:	bf00      	nop
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fc8:	f001 f9a0 	bl	800b30c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fcc:	4b2a      	ldr	r3, [pc, #168]	; (800a078 <prvAddNewTaskToReadyList+0xb8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	4a29      	ldr	r2, [pc, #164]	; (800a078 <prvAddNewTaskToReadyList+0xb8>)
 8009fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fd6:	4b29      	ldr	r3, [pc, #164]	; (800a07c <prvAddNewTaskToReadyList+0xbc>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d109      	bne.n	8009ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fde:	4a27      	ldr	r2, [pc, #156]	; (800a07c <prvAddNewTaskToReadyList+0xbc>)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fe4:	4b24      	ldr	r3, [pc, #144]	; (800a078 <prvAddNewTaskToReadyList+0xb8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d110      	bne.n	800a00e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fec:	f000 fbba 	bl	800a764 <prvInitialiseTaskLists>
 8009ff0:	e00d      	b.n	800a00e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ff2:	4b23      	ldr	r3, [pc, #140]	; (800a080 <prvAddNewTaskToReadyList+0xc0>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d109      	bne.n	800a00e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ffa:	4b20      	ldr	r3, [pc, #128]	; (800a07c <prvAddNewTaskToReadyList+0xbc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a004:	429a      	cmp	r2, r3
 800a006:	d802      	bhi.n	800a00e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a008:	4a1c      	ldr	r2, [pc, #112]	; (800a07c <prvAddNewTaskToReadyList+0xbc>)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a00e:	4b1d      	ldr	r3, [pc, #116]	; (800a084 <prvAddNewTaskToReadyList+0xc4>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3301      	adds	r3, #1
 800a014:	4a1b      	ldr	r2, [pc, #108]	; (800a084 <prvAddNewTaskToReadyList+0xc4>)
 800a016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a018:	4b1a      	ldr	r3, [pc, #104]	; (800a084 <prvAddNewTaskToReadyList+0xc4>)
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a024:	4b18      	ldr	r3, [pc, #96]	; (800a088 <prvAddNewTaskToReadyList+0xc8>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d903      	bls.n	800a034 <prvAddNewTaskToReadyList+0x74>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	4a15      	ldr	r2, [pc, #84]	; (800a088 <prvAddNewTaskToReadyList+0xc8>)
 800a032:	6013      	str	r3, [r2, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4a12      	ldr	r2, [pc, #72]	; (800a08c <prvAddNewTaskToReadyList+0xcc>)
 800a042:	441a      	add	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3304      	adds	r3, #4
 800a048:	4619      	mov	r1, r3
 800a04a:	4610      	mov	r0, r2
 800a04c:	f7ff f9bd 	bl	80093ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a050:	f001 f96e 	bl	800b330 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a054:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <prvAddNewTaskToReadyList+0xc0>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d008      	beq.n	800a06e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a05c:	4b07      	ldr	r3, [pc, #28]	; (800a07c <prvAddNewTaskToReadyList+0xbc>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	429a      	cmp	r2, r3
 800a068:	d201      	bcs.n	800a06e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a06a:	f001 f93d 	bl	800b2e8 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20000c70 	.word	0x20000c70
 800a07c:	2000079c 	.word	0x2000079c
 800a080:	20000c7c 	.word	0x20000c7c
 800a084:	20000c8c 	.word	0x20000c8c
 800a088:	20000c78 	.word	0x20000c78
 800a08c:	200007a0 	.word	0x200007a0

0800a090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a098:	2300      	movs	r3, #0
 800a09a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00f      	beq.n	800a0c2 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0a2:	4b0c      	ldr	r3, [pc, #48]	; (800a0d4 <vTaskDelay+0x44>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <vTaskDelay+0x20>
 800a0aa:	f001 fa65 	bl	800b578 <ulSetInterruptMask>
 800a0ae:	e7fe      	b.n	800a0ae <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800a0b0:	f000 f86a 	bl	800a188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fd5e 	bl	800ab78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a0bc:	f000 f872 	bl	800a1a4 <xTaskResumeAll>
 800a0c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 800a0c8:	f001 f90e 	bl	800b2e8 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0cc:	bf00      	nop
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	20000c98 	.word	0x20000c98

0800a0d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b088      	sub	sp, #32
 800a0dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0e6:	463a      	mov	r2, r7
 800a0e8:	1d39      	adds	r1, r7, #4
 800a0ea:	f107 0308 	add.w	r3, r7, #8
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7ff f90a 	bl	8009308 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	9202      	str	r2, [sp, #8]
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	2300      	movs	r3, #0
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	2300      	movs	r3, #0
 800a104:	460a      	mov	r2, r1
 800a106:	491a      	ldr	r1, [pc, #104]	; (800a170 <vTaskStartScheduler+0x98>)
 800a108:	481a      	ldr	r0, [pc, #104]	; (800a174 <vTaskStartScheduler+0x9c>)
 800a10a:	f7ff fe43 	bl	8009d94 <xTaskCreateStatic>
 800a10e:	4603      	mov	r3, r0
 800a110:	4a19      	ldr	r2, [pc, #100]	; (800a178 <vTaskStartScheduler+0xa0>)
 800a112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a114:	4b18      	ldr	r3, [pc, #96]	; (800a178 <vTaskStartScheduler+0xa0>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a11c:	2301      	movs	r3, #1
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	e001      	b.n	800a126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d102      	bne.n	800a132 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a12c:	f000 fd78 	bl	800ac20 <xTimerCreateTimerTask>
 800a130:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d110      	bne.n	800a15a <vTaskStartScheduler+0x82>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800a138:	f001 fa1e 	bl	800b578 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a13c:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <vTaskStartScheduler+0xa4>)
 800a13e:	f04f 32ff 	mov.w	r2, #4294967295
 800a142:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a144:	4b0e      	ldr	r3, [pc, #56]	; (800a180 <vTaskStartScheduler+0xa8>)
 800a146:	2201      	movs	r2, #1
 800a148:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a14a:	4b0e      	ldr	r3, [pc, #56]	; (800a184 <vTaskStartScheduler+0xac>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a150:	f7f6 faec 	bl	800072c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a154:	f001 f9c2 	bl	800b4dc <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a158:	e006      	b.n	800a168 <vTaskStartScheduler+0x90>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a160:	d102      	bne.n	800a168 <vTaskStartScheduler+0x90>
 800a162:	f001 fa09 	bl	800b578 <ulSetInterruptMask>
 800a166:	e7fe      	b.n	800a166 <vTaskStartScheduler+0x8e>
}
 800a168:	bf00      	nop
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	0800c38c 	.word	0x0800c38c
 800a174:	0800a745 	.word	0x0800a745
 800a178:	20000c94 	.word	0x20000c94
 800a17c:	20000c90 	.word	0x20000c90
 800a180:	20000c7c 	.word	0x20000c7c
 800a184:	20000c74 	.word	0x20000c74

0800a188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a188:	b480      	push	{r7}
 800a18a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a18c:	4b04      	ldr	r3, [pc, #16]	; (800a1a0 <vTaskSuspendAll+0x18>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3301      	adds	r3, #1
 800a192:	4a03      	ldr	r2, [pc, #12]	; (800a1a0 <vTaskSuspendAll+0x18>)
 800a194:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a196:	bf00      	nop
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	20000c98 	.word	0x20000c98

0800a1a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1b2:	4b3b      	ldr	r3, [pc, #236]	; (800a2a0 <xTaskResumeAll+0xfc>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d102      	bne.n	800a1c0 <xTaskResumeAll+0x1c>
 800a1ba:	f001 f9dd 	bl	800b578 <ulSetInterruptMask>
 800a1be:	e7fe      	b.n	800a1be <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1c0:	f001 f8a4 	bl	800b30c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1c4:	4b36      	ldr	r3, [pc, #216]	; (800a2a0 <xTaskResumeAll+0xfc>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	4a35      	ldr	r2, [pc, #212]	; (800a2a0 <xTaskResumeAll+0xfc>)
 800a1cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ce:	4b34      	ldr	r3, [pc, #208]	; (800a2a0 <xTaskResumeAll+0xfc>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d15c      	bne.n	800a290 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1d6:	4b33      	ldr	r3, [pc, #204]	; (800a2a4 <xTaskResumeAll+0x100>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d058      	beq.n	800a290 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1de:	e02f      	b.n	800a240 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1e0:	4b31      	ldr	r3, [pc, #196]	; (800a2a8 <xTaskResumeAll+0x104>)
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3318      	adds	r3, #24
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff f949 	bl	8009484 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff f944 	bl	8009484 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a200:	4b2a      	ldr	r3, [pc, #168]	; (800a2ac <xTaskResumeAll+0x108>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	429a      	cmp	r2, r3
 800a206:	d903      	bls.n	800a210 <xTaskResumeAll+0x6c>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	4a27      	ldr	r2, [pc, #156]	; (800a2ac <xTaskResumeAll+0x108>)
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a214:	4613      	mov	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4a24      	ldr	r2, [pc, #144]	; (800a2b0 <xTaskResumeAll+0x10c>)
 800a21e:	441a      	add	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	3304      	adds	r3, #4
 800a224:	4619      	mov	r1, r3
 800a226:	4610      	mov	r0, r2
 800a228:	f7ff f8cf 	bl	80093ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a230:	4b20      	ldr	r3, [pc, #128]	; (800a2b4 <xTaskResumeAll+0x110>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	429a      	cmp	r2, r3
 800a238:	d302      	bcc.n	800a240 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800a23a:	4b1f      	ldr	r3, [pc, #124]	; (800a2b8 <xTaskResumeAll+0x114>)
 800a23c:	2201      	movs	r2, #1
 800a23e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a240:	4b19      	ldr	r3, [pc, #100]	; (800a2a8 <xTaskResumeAll+0x104>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1cb      	bne.n	800a1e0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a24e:	f000 fb1f 	bl	800a890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a252:	4b1a      	ldr	r3, [pc, #104]	; (800a2bc <xTaskResumeAll+0x118>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d010      	beq.n	800a280 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a25e:	f000 f83f 	bl	800a2e0 <xTaskIncrementTick>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 800a268:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <xTaskResumeAll+0x114>)
 800a26a:	2201      	movs	r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3b01      	subs	r3, #1
 800a272:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f1      	bne.n	800a25e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800a27a:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <xTaskResumeAll+0x118>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a280:	4b0d      	ldr	r3, [pc, #52]	; (800a2b8 <xTaskResumeAll+0x114>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d003      	beq.n	800a290 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a288:	2301      	movs	r3, #1
 800a28a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a28c:	f001 f82c 	bl	800b2e8 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a290:	f001 f84e 	bl	800b330 <vPortExitCritical>

	return xAlreadyYielded;
 800a294:	68bb      	ldr	r3, [r7, #8]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000c98 	.word	0x20000c98
 800a2a4:	20000c70 	.word	0x20000c70
 800a2a8:	20000c30 	.word	0x20000c30
 800a2ac:	20000c78 	.word	0x20000c78
 800a2b0:	200007a0 	.word	0x200007a0
 800a2b4:	2000079c 	.word	0x2000079c
 800a2b8:	20000c84 	.word	0x20000c84
 800a2bc:	20000c80 	.word	0x20000c80

0800a2c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <xTaskGetTickCount+0x1c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2cc:	687b      	ldr	r3, [r7, #4]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	20000c74 	.word	0x20000c74

0800a2e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2ea:	4b4b      	ldr	r3, [pc, #300]	; (800a418 <xTaskIncrementTick+0x138>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f040 8087 	bne.w	800a402 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2f4:	4b49      	ldr	r3, [pc, #292]	; (800a41c <xTaskIncrementTick+0x13c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2fc:	4a47      	ldr	r2, [pc, #284]	; (800a41c <xTaskIncrementTick+0x13c>)
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d118      	bne.n	800a33a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a308:	4b45      	ldr	r3, [pc, #276]	; (800a420 <xTaskIncrementTick+0x140>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <xTaskIncrementTick+0x38>
 800a312:	f001 f931 	bl	800b578 <ulSetInterruptMask>
 800a316:	e7fe      	b.n	800a316 <xTaskIncrementTick+0x36>
 800a318:	4b41      	ldr	r3, [pc, #260]	; (800a420 <xTaskIncrementTick+0x140>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	4b41      	ldr	r3, [pc, #260]	; (800a424 <xTaskIncrementTick+0x144>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a3f      	ldr	r2, [pc, #252]	; (800a420 <xTaskIncrementTick+0x140>)
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	4a3f      	ldr	r2, [pc, #252]	; (800a424 <xTaskIncrementTick+0x144>)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	4b3e      	ldr	r3, [pc, #248]	; (800a428 <xTaskIncrementTick+0x148>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3301      	adds	r3, #1
 800a332:	4a3d      	ldr	r2, [pc, #244]	; (800a428 <xTaskIncrementTick+0x148>)
 800a334:	6013      	str	r3, [r2, #0]
 800a336:	f000 faab 	bl	800a890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a33a:	4b3c      	ldr	r3, [pc, #240]	; (800a42c <xTaskIncrementTick+0x14c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	429a      	cmp	r2, r3
 800a342:	d349      	bcc.n	800a3d8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a344:	4b36      	ldr	r3, [pc, #216]	; (800a420 <xTaskIncrementTick+0x140>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d104      	bne.n	800a358 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a34e:	4b37      	ldr	r3, [pc, #220]	; (800a42c <xTaskIncrementTick+0x14c>)
 800a350:	f04f 32ff 	mov.w	r2, #4294967295
 800a354:	601a      	str	r2, [r3, #0]
					break;
 800a356:	e03f      	b.n	800a3d8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a358:	4b31      	ldr	r3, [pc, #196]	; (800a420 <xTaskIncrementTick+0x140>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d203      	bcs.n	800a378 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a370:	4a2e      	ldr	r2, [pc, #184]	; (800a42c <xTaskIncrementTick+0x14c>)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a376:	e02f      	b.n	800a3d8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	3304      	adds	r3, #4
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7ff f881 	bl	8009484 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a386:	2b00      	cmp	r3, #0
 800a388:	d004      	beq.n	800a394 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	3318      	adds	r3, #24
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff f878 	bl	8009484 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a398:	4b25      	ldr	r3, [pc, #148]	; (800a430 <xTaskIncrementTick+0x150>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d903      	bls.n	800a3a8 <xTaskIncrementTick+0xc8>
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	4a22      	ldr	r2, [pc, #136]	; (800a430 <xTaskIncrementTick+0x150>)
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4a1f      	ldr	r2, [pc, #124]	; (800a434 <xTaskIncrementTick+0x154>)
 800a3b6:	441a      	add	r2, r3
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f7ff f803 	bl	80093ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4b1b      	ldr	r3, [pc, #108]	; (800a438 <xTaskIncrementTick+0x158>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d3b8      	bcc.n	800a344 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d6:	e7b5      	b.n	800a344 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3d8:	4b17      	ldr	r3, [pc, #92]	; (800a438 <xTaskIncrementTick+0x158>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3de:	4915      	ldr	r1, [pc, #84]	; (800a434 <xTaskIncrementTick+0x154>)
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	440b      	add	r3, r1
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d901      	bls.n	800a3f4 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a3f4:	4b11      	ldr	r3, [pc, #68]	; (800a43c <xTaskIncrementTick+0x15c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d007      	beq.n	800a40c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	617b      	str	r3, [r7, #20]
 800a400:	e004      	b.n	800a40c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a402:	4b0f      	ldr	r3, [pc, #60]	; (800a440 <xTaskIncrementTick+0x160>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3301      	adds	r3, #1
 800a408:	4a0d      	ldr	r2, [pc, #52]	; (800a440 <xTaskIncrementTick+0x160>)
 800a40a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a40c:	697b      	ldr	r3, [r7, #20]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000c98 	.word	0x20000c98
 800a41c:	20000c74 	.word	0x20000c74
 800a420:	20000c28 	.word	0x20000c28
 800a424:	20000c2c 	.word	0x20000c2c
 800a428:	20000c88 	.word	0x20000c88
 800a42c:	20000c90 	.word	0x20000c90
 800a430:	20000c78 	.word	0x20000c78
 800a434:	200007a0 	.word	0x200007a0
 800a438:	2000079c 	.word	0x2000079c
 800a43c:	20000c84 	.word	0x20000c84
 800a440:	20000c80 	.word	0x20000c80

0800a444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a44a:	4b2f      	ldr	r3, [pc, #188]	; (800a508 <vTaskSwitchContext+0xc4>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a452:	4b2e      	ldr	r3, [pc, #184]	; (800a50c <vTaskSwitchContext+0xc8>)
 800a454:	2201      	movs	r2, #1
 800a456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a458:	e052      	b.n	800a500 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 800a45a:	4b2c      	ldr	r3, [pc, #176]	; (800a50c <vTaskSwitchContext+0xc8>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a460:	f7f6 f96b 	bl	800073a <getRunTimeCounterValue>
 800a464:	4603      	mov	r3, r0
 800a466:	4a2a      	ldr	r2, [pc, #168]	; (800a510 <vTaskSwitchContext+0xcc>)
 800a468:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a46a:	4b29      	ldr	r3, [pc, #164]	; (800a510 <vTaskSwitchContext+0xcc>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	4b29      	ldr	r3, [pc, #164]	; (800a514 <vTaskSwitchContext+0xd0>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	429a      	cmp	r2, r3
 800a474:	d909      	bls.n	800a48a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a476:	4b28      	ldr	r3, [pc, #160]	; (800a518 <vTaskSwitchContext+0xd4>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a47c:	4a24      	ldr	r2, [pc, #144]	; (800a510 <vTaskSwitchContext+0xcc>)
 800a47e:	6810      	ldr	r0, [r2, #0]
 800a480:	4a24      	ldr	r2, [pc, #144]	; (800a514 <vTaskSwitchContext+0xd0>)
 800a482:	6812      	ldr	r2, [r2, #0]
 800a484:	1a82      	subs	r2, r0, r2
 800a486:	440a      	add	r2, r1
 800a488:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a48a:	4b21      	ldr	r3, [pc, #132]	; (800a510 <vTaskSwitchContext+0xcc>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a21      	ldr	r2, [pc, #132]	; (800a514 <vTaskSwitchContext+0xd0>)
 800a490:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a492:	4b22      	ldr	r3, [pc, #136]	; (800a51c <vTaskSwitchContext+0xd8>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	607b      	str	r3, [r7, #4]
 800a498:	e008      	b.n	800a4ac <vTaskSwitchContext+0x68>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <vTaskSwitchContext+0x62>
 800a4a0:	f001 f86a 	bl	800b578 <ulSetInterruptMask>
 800a4a4:	e7fe      	b.n	800a4a4 <vTaskSwitchContext+0x60>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	607b      	str	r3, [r7, #4]
 800a4ac:	491c      	ldr	r1, [pc, #112]	; (800a520 <vTaskSwitchContext+0xdc>)
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	440b      	add	r3, r1
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0ec      	beq.n	800a49a <vTaskSwitchContext+0x56>
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	4413      	add	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4a15      	ldr	r2, [pc, #84]	; (800a520 <vTaskSwitchContext+0xdc>)
 800a4cc:	4413      	add	r3, r2
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	605a      	str	r2, [r3, #4]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d104      	bne.n	800a4f0 <vTaskSwitchContext+0xac>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	605a      	str	r2, [r3, #4]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	4a08      	ldr	r2, [pc, #32]	; (800a518 <vTaskSwitchContext+0xd4>)
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	4a08      	ldr	r2, [pc, #32]	; (800a51c <vTaskSwitchContext+0xd8>)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6013      	str	r3, [r2, #0]
}
 800a500:	bf00      	nop
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20000c98 	.word	0x20000c98
 800a50c:	20000c84 	.word	0x20000c84
 800a510:	20000ca0 	.word	0x20000ca0
 800a514:	20000c9c 	.word	0x20000c9c
 800a518:	2000079c 	.word	0x2000079c
 800a51c:	20000c78 	.word	0x20000c78
 800a520:	200007a0 	.word	0x200007a0

0800a524 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <vTaskPlaceOnEventList+0x16>
 800a534:	f001 f820 	bl	800b578 <ulSetInterruptMask>
 800a538:	e7fe      	b.n	800a538 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a53a:	4b07      	ldr	r3, [pc, #28]	; (800a558 <vTaskPlaceOnEventList+0x34>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3318      	adds	r3, #24
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7fe ff65 	bl	8009412 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a548:	2101      	movs	r1, #1
 800a54a:	6838      	ldr	r0, [r7, #0]
 800a54c:	f000 fb14 	bl	800ab78 <prvAddCurrentTaskToDelayedList>
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	2000079c 	.word	0x2000079c

0800a55c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d102      	bne.n	800a574 <vTaskPlaceOnEventListRestricted+0x18>
 800a56e:	f001 f803 	bl	800b578 <ulSetInterruptMask>
 800a572:	e7fe      	b.n	800a572 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a574:	4b0a      	ldr	r3, [pc, #40]	; (800a5a0 <vTaskPlaceOnEventListRestricted+0x44>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3318      	adds	r3, #24
 800a57a:	4619      	mov	r1, r3
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f7fe ff24 	bl	80093ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800a588:	f04f 33ff 	mov.w	r3, #4294967295
 800a58c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	68b8      	ldr	r0, [r7, #8]
 800a592:	f000 faf1 	bl	800ab78 <prvAddCurrentTaskToDelayedList>
	}
 800a596:	bf00      	nop
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	2000079c 	.word	0x2000079c

0800a5a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <xTaskRemoveFromEventList+0x1c>
 800a5ba:	f000 ffdd 	bl	800b578 <ulSetInterruptMask>
 800a5be:	e7fe      	b.n	800a5be <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	3318      	adds	r3, #24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe ff5d 	bl	8009484 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ca:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <xTaskRemoveFromEventList+0xa0>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d11d      	bne.n	800a60e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe ff54 	bl	8009484 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e0:	4b19      	ldr	r3, [pc, #100]	; (800a648 <xTaskRemoveFromEventList+0xa4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d903      	bls.n	800a5f0 <xTaskRemoveFromEventList+0x4c>
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	4a16      	ldr	r2, [pc, #88]	; (800a648 <xTaskRemoveFromEventList+0xa4>)
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4a13      	ldr	r2, [pc, #76]	; (800a64c <xTaskRemoveFromEventList+0xa8>)
 800a5fe:	441a      	add	r2, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	3304      	adds	r3, #4
 800a604:	4619      	mov	r1, r3
 800a606:	4610      	mov	r0, r2
 800a608:	f7fe fedf 	bl	80093ca <vListInsertEnd>
 800a60c:	e005      	b.n	800a61a <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	3318      	adds	r3, #24
 800a612:	4619      	mov	r1, r3
 800a614:	480e      	ldr	r0, [pc, #56]	; (800a650 <xTaskRemoveFromEventList+0xac>)
 800a616:	f7fe fed8 	bl	80093ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a61e:	4b0d      	ldr	r3, [pc, #52]	; (800a654 <xTaskRemoveFromEventList+0xb0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a624:	429a      	cmp	r2, r3
 800a626:	d905      	bls.n	800a634 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a628:	2301      	movs	r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a62c:	4b0a      	ldr	r3, [pc, #40]	; (800a658 <xTaskRemoveFromEventList+0xb4>)
 800a62e:	2201      	movs	r2, #1
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	e001      	b.n	800a638 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800a638:	68fb      	ldr	r3, [r7, #12]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000c98 	.word	0x20000c98
 800a648:	20000c78 	.word	0x20000c78
 800a64c:	200007a0 	.word	0x200007a0
 800a650:	20000c30 	.word	0x20000c30
 800a654:	2000079c 	.word	0x2000079c
 800a658:	20000c84 	.word	0x20000c84

0800a65c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a664:	4b06      	ldr	r3, [pc, #24]	; (800a680 <vTaskInternalSetTimeOutState+0x24>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a66c:	4b05      	ldr	r3, [pc, #20]	; (800a684 <vTaskInternalSetTimeOutState+0x28>)
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	605a      	str	r2, [r3, #4]
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	20000c88 	.word	0x20000c88
 800a684:	20000c74 	.word	0x20000c74

0800a688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d102      	bne.n	800a69e <xTaskCheckForTimeOut+0x16>
 800a698:	f000 ff6e 	bl	800b578 <ulSetInterruptMask>
 800a69c:	e7fe      	b.n	800a69c <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <xTaskCheckForTimeOut+0x22>
 800a6a4:	f000 ff68 	bl	800b578 <ulSetInterruptMask>
 800a6a8:	e7fe      	b.n	800a6a8 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800a6aa:	f000 fe2f 	bl	800b30c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6ae:	4b1d      	ldr	r3, [pc, #116]	; (800a724 <xTaskCheckForTimeOut+0x9c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c6:	d102      	bne.n	800a6ce <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	e023      	b.n	800a716 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	4b15      	ldr	r3, [pc, #84]	; (800a728 <xTaskCheckForTimeOut+0xa0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d007      	beq.n	800a6ea <xTaskCheckForTimeOut+0x62>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d302      	bcc.n	800a6ea <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	e015      	b.n	800a716 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d20b      	bcs.n	800a70c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	1ad2      	subs	r2, r2, r3
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff ffab 	bl	800a65c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a706:	2300      	movs	r3, #0
 800a708:	617b      	str	r3, [r7, #20]
 800a70a:	e004      	b.n	800a716 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2200      	movs	r2, #0
 800a710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a712:	2301      	movs	r3, #1
 800a714:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a716:	f000 fe0b 	bl	800b330 <vPortExitCritical>

	return xReturn;
 800a71a:	697b      	ldr	r3, [r7, #20]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	20000c74 	.word	0x20000c74
 800a728:	20000c88 	.word	0x20000c88

0800a72c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a730:	4b03      	ldr	r3, [pc, #12]	; (800a740 <vTaskMissedYield+0x14>)
 800a732:	2201      	movs	r2, #1
 800a734:	601a      	str	r2, [r3, #0]
}
 800a736:	bf00      	nop
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	20000c84 	.word	0x20000c84

0800a744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a74c:	f000 f84a 	bl	800a7e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a750:	4b03      	ldr	r3, [pc, #12]	; (800a760 <prvIdleTask+0x1c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d9f9      	bls.n	800a74c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a758:	f000 fdc6 	bl	800b2e8 <vPortYield>
		prvCheckTasksWaitingTermination();
 800a75c:	e7f6      	b.n	800a74c <prvIdleTask+0x8>
 800a75e:	bf00      	nop
 800a760:	200007a0 	.word	0x200007a0

0800a764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a76a:	2300      	movs	r3, #0
 800a76c:	607b      	str	r3, [r7, #4]
 800a76e:	e00c      	b.n	800a78a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4a12      	ldr	r2, [pc, #72]	; (800a7c4 <prvInitialiseTaskLists+0x60>)
 800a77c:	4413      	add	r3, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fdf6 	bl	8009370 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3301      	adds	r3, #1
 800a788:	607b      	str	r3, [r7, #4]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b37      	cmp	r3, #55	; 0x37
 800a78e:	d9ef      	bls.n	800a770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a790:	480d      	ldr	r0, [pc, #52]	; (800a7c8 <prvInitialiseTaskLists+0x64>)
 800a792:	f7fe fded 	bl	8009370 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a796:	480d      	ldr	r0, [pc, #52]	; (800a7cc <prvInitialiseTaskLists+0x68>)
 800a798:	f7fe fdea 	bl	8009370 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a79c:	480c      	ldr	r0, [pc, #48]	; (800a7d0 <prvInitialiseTaskLists+0x6c>)
 800a79e:	f7fe fde7 	bl	8009370 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7a2:	480c      	ldr	r0, [pc, #48]	; (800a7d4 <prvInitialiseTaskLists+0x70>)
 800a7a4:	f7fe fde4 	bl	8009370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7a8:	480b      	ldr	r0, [pc, #44]	; (800a7d8 <prvInitialiseTaskLists+0x74>)
 800a7aa:	f7fe fde1 	bl	8009370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7ae:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <prvInitialiseTaskLists+0x78>)
 800a7b0:	4a05      	ldr	r2, [pc, #20]	; (800a7c8 <prvInitialiseTaskLists+0x64>)
 800a7b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7b4:	4b0a      	ldr	r3, [pc, #40]	; (800a7e0 <prvInitialiseTaskLists+0x7c>)
 800a7b6:	4a05      	ldr	r2, [pc, #20]	; (800a7cc <prvInitialiseTaskLists+0x68>)
 800a7b8:	601a      	str	r2, [r3, #0]
}
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200007a0 	.word	0x200007a0
 800a7c8:	20000c00 	.word	0x20000c00
 800a7cc:	20000c14 	.word	0x20000c14
 800a7d0:	20000c30 	.word	0x20000c30
 800a7d4:	20000c44 	.word	0x20000c44
 800a7d8:	20000c5c 	.word	0x20000c5c
 800a7dc:	20000c28 	.word	0x20000c28
 800a7e0:	20000c2c 	.word	0x20000c2c

0800a7e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7ea:	e019      	b.n	800a820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7ec:	f000 fd8e 	bl	800b30c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7f0:	4b10      	ldr	r3, [pc, #64]	; (800a834 <prvCheckTasksWaitingTermination+0x50>)
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fe fe41 	bl	8009484 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a802:	4b0d      	ldr	r3, [pc, #52]	; (800a838 <prvCheckTasksWaitingTermination+0x54>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3b01      	subs	r3, #1
 800a808:	4a0b      	ldr	r2, [pc, #44]	; (800a838 <prvCheckTasksWaitingTermination+0x54>)
 800a80a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a80c:	4b0b      	ldr	r3, [pc, #44]	; (800a83c <prvCheckTasksWaitingTermination+0x58>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3b01      	subs	r3, #1
 800a812:	4a0a      	ldr	r2, [pc, #40]	; (800a83c <prvCheckTasksWaitingTermination+0x58>)
 800a814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a816:	f000 fd8b 	bl	800b330 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f810 	bl	800a840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a820:	4b06      	ldr	r3, [pc, #24]	; (800a83c <prvCheckTasksWaitingTermination+0x58>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e1      	bne.n	800a7ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20000c44 	.word	0x20000c44
 800a838:	20000c70 	.word	0x20000c70
 800a83c:	20000c58 	.word	0x20000c58

0800a840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d108      	bne.n	800a864 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a856:	4618      	mov	r0, r3
 800a858:	f000 ffaa 	bl	800b7b0 <vPortFree>
				vPortFree( pxTCB );
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 ffa7 	bl	800b7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a862:	e010      	b.n	800a886 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d103      	bne.n	800a876 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 ff9e 	bl	800b7b0 <vPortFree>
	}
 800a874:	e007      	b.n	800a886 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d002      	beq.n	800a886 <prvDeleteTCB+0x46>
 800a880:	f000 fe7a 	bl	800b578 <ulSetInterruptMask>
 800a884:	e7fe      	b.n	800a884 <prvDeleteTCB+0x44>
	}
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a896:	4b0c      	ldr	r3, [pc, #48]	; (800a8c8 <prvResetNextTaskUnblockTime+0x38>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d104      	bne.n	800a8aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8a0:	4b0a      	ldr	r3, [pc, #40]	; (800a8cc <prvResetNextTaskUnblockTime+0x3c>)
 800a8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8a8:	e008      	b.n	800a8bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8aa:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <prvResetNextTaskUnblockTime+0x38>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	4a04      	ldr	r2, [pc, #16]	; (800a8cc <prvResetNextTaskUnblockTime+0x3c>)
 800a8ba:	6013      	str	r3, [r2, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	20000c28 	.word	0x20000c28
 800a8cc:	20000c90 	.word	0x20000c90

0800a8d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8d6:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <xTaskGetSchedulerState+0x34>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d102      	bne.n	800a8e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	607b      	str	r3, [r7, #4]
 800a8e2:	e008      	b.n	800a8f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8e4:	4b08      	ldr	r3, [pc, #32]	; (800a908 <xTaskGetSchedulerState+0x38>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d102      	bne.n	800a8f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	607b      	str	r3, [r7, #4]
 800a8f0:	e001      	b.n	800a8f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8f6:	687b      	ldr	r3, [r7, #4]
	}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	20000c7c 	.word	0x20000c7c
 800a908:	20000c98 	.word	0x20000c98

0800a90c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d046      	beq.n	800a9b0 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a922:	4b26      	ldr	r3, [pc, #152]	; (800a9bc <xTaskPriorityDisinherit+0xb0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d002      	beq.n	800a932 <xTaskPriorityDisinherit+0x26>
 800a92c:	f000 fe24 	bl	800b578 <ulSetInterruptMask>
 800a930:	e7fe      	b.n	800a930 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a936:	2b00      	cmp	r3, #0
 800a938:	d102      	bne.n	800a940 <xTaskPriorityDisinherit+0x34>
 800a93a:	f000 fe1d 	bl	800b578 <ulSetInterruptMask>
 800a93e:	e7fe      	b.n	800a93e <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a944:	1e5a      	subs	r2, r3, #1
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a952:	429a      	cmp	r2, r3
 800a954:	d02c      	beq.n	800a9b0 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d128      	bne.n	800a9b0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	3304      	adds	r3, #4
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fd8e 	bl	8009484 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a974:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a980:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <xTaskPriorityDisinherit+0xb4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	429a      	cmp	r2, r3
 800a986:	d903      	bls.n	800a990 <xTaskPriorityDisinherit+0x84>
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98c:	4a0c      	ldr	r2, [pc, #48]	; (800a9c0 <xTaskPriorityDisinherit+0xb4>)
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a994:	4613      	mov	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4a09      	ldr	r2, [pc, #36]	; (800a9c4 <xTaskPriorityDisinherit+0xb8>)
 800a99e:	441a      	add	r2, r3
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f7fe fd0f 	bl	80093ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
	}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	2000079c 	.word	0x2000079c
 800a9c0:	20000c78 	.word	0x20000c78
 800a9c4:	200007a0 	.word	0x200007a0

0800a9c8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800a9d2:	f000 fc9b 	bl	800b30c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a9d6:	4b1b      	ldr	r3, [pc, #108]	; (800aa44 <ulTaskNotifyTake+0x7c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10d      	bne.n	800a9fc <ulTaskNotifyTake+0x34>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a9e0:	4b18      	ldr	r3, [pc, #96]	; (800aa44 <ulTaskNotifyTake+0x7c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d005      	beq.n	800a9fc <ulTaskNotifyTake+0x34>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	6838      	ldr	r0, [r7, #0]
 800a9f4:	f000 f8c0 	bl	800ab78 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a9f8:	f000 fc76 	bl	800b2e8 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a9fc:	f000 fc98 	bl	800b330 <vPortExitCritical>

		taskENTER_CRITICAL();
 800aa00:	f000 fc84 	bl	800b30c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800aa04:	4b0f      	ldr	r3, [pc, #60]	; (800aa44 <ulTaskNotifyTake+0x7c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00c      	beq.n	800aa2c <ulTaskNotifyTake+0x64>
			{
				if( xClearCountOnExit != pdFALSE )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <ulTaskNotifyTake+0x5a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800aa18:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <ulTaskNotifyTake+0x7c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	659a      	str	r2, [r3, #88]	; 0x58
 800aa20:	e004      	b.n	800aa2c <ulTaskNotifyTake+0x64>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800aa22:	4b08      	ldr	r3, [pc, #32]	; (800aa44 <ulTaskNotifyTake+0x7c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	3a01      	subs	r2, #1
 800aa2a:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa2c:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <ulTaskNotifyTake+0x7c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
 800aa36:	f000 fc7b 	bl	800b330 <vPortExitCritical>

		return ulReturn;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
	}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	2000079c 	.word	0x2000079c

0800aa48 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d102      	bne.n	800aa5e <vTaskNotifyGiveFromISR+0x16>
 800aa58:	f000 fd8e 	bl	800b578 <ulSetInterruptMask>
 800aa5c:	e7fe      	b.n	800aa5c <vTaskNotifyGiveFromISR+0x14>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa62:	f000 fd89 	bl	800b578 <ulSetInterruptMask>
 800aa66:	6138      	str	r0, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aa6e:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa7c:	1c5a      	adds	r2, r3, #1
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	659a      	str	r2, [r3, #88]	; 0x58

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d13e      	bne.n	800ab06 <vTaskNotifyGiveFromISR+0xbe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <vTaskNotifyGiveFromISR+0x4e>
 800aa90:	f000 fd72 	bl	800b578 <ulSetInterruptMask>
 800aa94:	e7fe      	b.n	800aa94 <vTaskNotifyGiveFromISR+0x4c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa96:	4b1f      	ldr	r3, [pc, #124]	; (800ab14 <vTaskNotifyGiveFromISR+0xcc>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d11d      	bne.n	800aada <vTaskNotifyGiveFromISR+0x92>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe fcee 	bl	8009484 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaac:	4b1a      	ldr	r3, [pc, #104]	; (800ab18 <vTaskNotifyGiveFromISR+0xd0>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d903      	bls.n	800aabc <vTaskNotifyGiveFromISR+0x74>
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab8:	4a17      	ldr	r2, [pc, #92]	; (800ab18 <vTaskNotifyGiveFromISR+0xd0>)
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac0:	4613      	mov	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4a14      	ldr	r2, [pc, #80]	; (800ab1c <vTaskNotifyGiveFromISR+0xd4>)
 800aaca:	441a      	add	r2, r3
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	3304      	adds	r3, #4
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f7fe fc79 	bl	80093ca <vListInsertEnd>
 800aad8:	e005      	b.n	800aae6 <vTaskNotifyGiveFromISR+0x9e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	3318      	adds	r3, #24
 800aade:	4619      	mov	r1, r3
 800aae0:	480f      	ldr	r0, [pc, #60]	; (800ab20 <vTaskNotifyGiveFromISR+0xd8>)
 800aae2:	f7fe fc72 	bl	80093ca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaea:	4b0e      	ldr	r3, [pc, #56]	; (800ab24 <vTaskNotifyGiveFromISR+0xdc>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d908      	bls.n	800ab06 <vTaskNotifyGiveFromISR+0xbe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <vTaskNotifyGiveFromISR+0xb8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2201      	movs	r2, #1
 800aafe:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ab00:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <vTaskNotifyGiveFromISR+0xe0>)
 800ab02:	2201      	movs	r2, #1
 800ab04:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ab06:	6938      	ldr	r0, [r7, #16]
 800ab08:	f000 fd43 	bl	800b592 <vClearInterruptMask>
	}
 800ab0c:	bf00      	nop
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	20000c98 	.word	0x20000c98
 800ab18:	20000c78 	.word	0x20000c78
 800ab1c:	200007a0 	.word	0x200007a0
 800ab20:	20000c30 	.word	0x20000c30
 800ab24:	2000079c 	.word	0x2000079c
 800ab28:	20000c84 	.word	0x20000c84

0800ab2c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d102      	bne.n	800ab40 <xTaskNotifyStateClear+0x14>
 800ab3a:	4b0e      	ldr	r3, [pc, #56]	; (800ab74 <xTaskNotifyStateClear+0x48>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	e000      	b.n	800ab42 <xTaskNotifyStateClear+0x16>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800ab44:	f000 fbe2 	bl	800b30c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d106      	bne.n	800ab62 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				xReturn = pdPASS;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	e001      	b.n	800ab66 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800ab66:	f000 fbe3 	bl	800b330 <vPortExitCritical>

		return xReturn;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
	}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	2000079c 	.word	0x2000079c

0800ab78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab82:	4b21      	ldr	r3, [pc, #132]	; (800ac08 <prvAddCurrentTaskToDelayedList+0x90>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab88:	4b20      	ldr	r3, [pc, #128]	; (800ac0c <prvAddCurrentTaskToDelayedList+0x94>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fc78 	bl	8009484 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9a:	d10a      	bne.n	800abb2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d007      	beq.n	800abb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aba2:	4b1a      	ldr	r3, [pc, #104]	; (800ac0c <prvAddCurrentTaskToDelayedList+0x94>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3304      	adds	r3, #4
 800aba8:	4619      	mov	r1, r3
 800abaa:	4819      	ldr	r0, [pc, #100]	; (800ac10 <prvAddCurrentTaskToDelayedList+0x98>)
 800abac:	f7fe fc0d 	bl	80093ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abb0:	e026      	b.n	800ac00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4413      	add	r3, r2
 800abb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abba:	4b14      	ldr	r3, [pc, #80]	; (800ac0c <prvAddCurrentTaskToDelayedList+0x94>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d209      	bcs.n	800abde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abca:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <prvAddCurrentTaskToDelayedList+0x94>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3304      	adds	r3, #4
 800abd4:	4619      	mov	r1, r3
 800abd6:	4610      	mov	r0, r2
 800abd8:	f7fe fc1b 	bl	8009412 <vListInsert>
}
 800abdc:	e010      	b.n	800ac00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abde:	4b0e      	ldr	r3, [pc, #56]	; (800ac18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <prvAddCurrentTaskToDelayedList+0x94>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3304      	adds	r3, #4
 800abe8:	4619      	mov	r1, r3
 800abea:	4610      	mov	r0, r2
 800abec:	f7fe fc11 	bl	8009412 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abf0:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d202      	bcs.n	800ac00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800abfa:	4a08      	ldr	r2, [pc, #32]	; (800ac1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	6013      	str	r3, [r2, #0]
}
 800ac00:	bf00      	nop
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	20000c74 	.word	0x20000c74
 800ac0c:	2000079c 	.word	0x2000079c
 800ac10:	20000c5c 	.word	0x20000c5c
 800ac14:	20000c2c 	.word	0x20000c2c
 800ac18:	20000c28 	.word	0x20000c28
 800ac1c:	20000c90 	.word	0x20000c90

0800ac20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac2a:	f000 fac7 	bl	800b1bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac2e:	4b18      	ldr	r3, [pc, #96]	; (800ac90 <xTimerCreateTimerTask+0x70>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d020      	beq.n	800ac78 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac3e:	463a      	mov	r2, r7
 800ac40:	1d39      	adds	r1, r7, #4
 800ac42:	f107 0308 	add.w	r3, r7, #8
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe fb78 	bl	800933c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	9202      	str	r2, [sp, #8]
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	2303      	movs	r3, #3
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	460a      	mov	r2, r1
 800ac5e:	490d      	ldr	r1, [pc, #52]	; (800ac94 <xTimerCreateTimerTask+0x74>)
 800ac60:	480d      	ldr	r0, [pc, #52]	; (800ac98 <xTimerCreateTimerTask+0x78>)
 800ac62:	f7ff f897 	bl	8009d94 <xTaskCreateStatic>
 800ac66:	4603      	mov	r3, r0
 800ac68:	4a0c      	ldr	r2, [pc, #48]	; (800ac9c <xTimerCreateTimerTask+0x7c>)
 800ac6a:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac6c:	4b0b      	ldr	r3, [pc, #44]	; (800ac9c <xTimerCreateTimerTask+0x7c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800ac74:	2301      	movs	r3, #1
 800ac76:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <xTimerCreateTimerTask+0x64>
 800ac7e:	f000 fc7b 	bl	800b578 <ulSetInterruptMask>
 800ac82:	e7fe      	b.n	800ac82 <xTimerCreateTimerTask+0x62>
	return xReturn;
 800ac84:	68fb      	ldr	r3, [r7, #12]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000cd4 	.word	0x20000cd4
 800ac94:	0800c394 	.word	0x0800c394
 800ac98:	0800adb5 	.word	0x0800adb5
 800ac9c:	20000cd8 	.word	0x20000cd8

0800aca0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b08a      	sub	sp, #40	; 0x28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acae:	2300      	movs	r3, #0
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <xTimerGenericCommand+0x1e>
 800acb8:	f000 fc5e 	bl	800b578 <ulSetInterruptMask>
 800acbc:	e7fe      	b.n	800acbc <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acbe:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <xTimerGenericCommand+0x88>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d02a      	beq.n	800ad1c <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2b05      	cmp	r3, #5
 800acd6:	dc18      	bgt.n	800ad0a <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800acd8:	f7ff fdfa 	bl	800a8d0 <xTaskGetSchedulerState>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d109      	bne.n	800acf6 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ace2:	4b11      	ldr	r3, [pc, #68]	; (800ad28 <xTimerGenericCommand+0x88>)
 800ace4:	6818      	ldr	r0, [r3, #0]
 800ace6:	f107 0114 	add.w	r1, r7, #20
 800acea:	2300      	movs	r3, #0
 800acec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acee:	f7fe fcf0 	bl	80096d2 <xQueueGenericSend>
 800acf2:	6278      	str	r0, [r7, #36]	; 0x24
 800acf4:	e012      	b.n	800ad1c <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800acf6:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <xTimerGenericCommand+0x88>)
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	f107 0114 	add.w	r1, r7, #20
 800acfe:	2300      	movs	r3, #0
 800ad00:	2200      	movs	r2, #0
 800ad02:	f7fe fce6 	bl	80096d2 <xQueueGenericSend>
 800ad06:	6278      	str	r0, [r7, #36]	; 0x24
 800ad08:	e008      	b.n	800ad1c <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad0a:	4b07      	ldr	r3, [pc, #28]	; (800ad28 <xTimerGenericCommand+0x88>)
 800ad0c:	6818      	ldr	r0, [r3, #0]
 800ad0e:	f107 0114 	add.w	r1, r7, #20
 800ad12:	2300      	movs	r3, #0
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	f7fe fda5 	bl	8009864 <xQueueGenericSendFromISR>
 800ad1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3728      	adds	r7, #40	; 0x28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000cd4 	.word	0x20000cd4

0800ad2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af02      	add	r7, sp, #8
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad36:	4b1e      	ldr	r3, [pc, #120]	; (800adb0 <prvProcessExpiredTimer+0x84>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3304      	adds	r3, #4
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fe fb9d 	bl	8009484 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d01a      	beq.n	800ad8e <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	699a      	ldr	r2, [r3, #24]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	18d1      	adds	r1, r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 f8c1 	bl	800aeec <prvInsertTimerInActiveList>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d017      	beq.n	800ada0 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad70:	2300      	movs	r3, #0
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	2300      	movs	r3, #0
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	2100      	movs	r1, #0
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7ff ff90 	bl	800aca0 <xTimerGenericCommand>
 800ad80:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10b      	bne.n	800ada0 <prvProcessExpiredTimer+0x74>
 800ad88:	f000 fbf6 	bl	800b578 <ulSetInterruptMask>
 800ad8c:	e7fe      	b.n	800ad8c <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad94:	f023 0301 	bic.w	r3, r3, #1
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	4798      	blx	r3
}
 800ada8:	bf00      	nop
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	20000ccc 	.word	0x20000ccc

0800adb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adbc:	f107 0308 	add.w	r3, r7, #8
 800adc0:	4618      	mov	r0, r3
 800adc2:	f000 f84f 	bl	800ae64 <prvGetNextExpireTime>
 800adc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	4619      	mov	r1, r3
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f000 f803 	bl	800add8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800add2:	f000 f8cd 	bl	800af70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800add6:	e7f1      	b.n	800adbc <prvTimerTask+0x8>

0800add8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ade2:	f7ff f9d1 	bl	800a188 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ade6:	f107 0308 	add.w	r3, r7, #8
 800adea:	4618      	mov	r0, r3
 800adec:	f000 f85e 	bl	800aeac <prvSampleTimeNow>
 800adf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d12a      	bne.n	800ae4e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <prvProcessTimerOrBlockTask+0x3c>
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d806      	bhi.n	800ae14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae06:	f7ff f9cd 	bl	800a1a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae0a:	68f9      	ldr	r1, [r7, #12]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff ff8d 	bl	800ad2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae12:	e01e      	b.n	800ae52 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d008      	beq.n	800ae2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae1a:	4b10      	ldr	r3, [pc, #64]	; (800ae5c <prvProcessTimerOrBlockTask+0x84>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <prvProcessTimerOrBlockTask+0x50>
 800ae24:	2301      	movs	r3, #1
 800ae26:	e000      	b.n	800ae2a <prvProcessTimerOrBlockTask+0x52>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae2c:	4b0c      	ldr	r3, [pc, #48]	; (800ae60 <prvProcessTimerOrBlockTask+0x88>)
 800ae2e:	6818      	ldr	r0, [r3, #0]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	f7fe ff77 	bl	8009d2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae3e:	f7ff f9b1 	bl	800a1a4 <xTaskResumeAll>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d104      	bne.n	800ae52 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800ae48:	f000 fa4e 	bl	800b2e8 <vPortYield>
}
 800ae4c:	e001      	b.n	800ae52 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800ae4e:	f7ff f9a9 	bl	800a1a4 <xTaskResumeAll>
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20000cd0 	.word	0x20000cd0
 800ae60:	20000cd4 	.word	0x20000cd4

0800ae64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae6c:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <prvGetNextExpireTime+0x44>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <prvGetNextExpireTime+0x16>
 800ae76:	2201      	movs	r2, #1
 800ae78:	e000      	b.n	800ae7c <prvGetNextExpireTime+0x18>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d105      	bne.n	800ae94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae88:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <prvGetNextExpireTime+0x44>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	60fb      	str	r3, [r7, #12]
 800ae92:	e001      	b.n	800ae98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae94:	2300      	movs	r3, #0
 800ae96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae98:	68fb      	ldr	r3, [r7, #12]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	20000ccc 	.word	0x20000ccc

0800aeac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aeb4:	f7ff fa04 	bl	800a2c0 <xTaskGetTickCount>
 800aeb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aeba:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <prvSampleTimeNow+0x3c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d205      	bcs.n	800aed0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aec4:	f000 f91e 	bl	800b104 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	e002      	b.n	800aed6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aed6:	4a04      	ldr	r2, [pc, #16]	; (800aee8 <prvSampleTimeNow+0x3c>)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aedc:	68fb      	ldr	r3, [r7, #12]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	20000cdc 	.word	0x20000cdc

0800aeec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aefa:	2300      	movs	r3, #0
 800aefc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d812      	bhi.n	800af38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	1ad2      	subs	r2, r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d302      	bcc.n	800af26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af20:	2301      	movs	r3, #1
 800af22:	617b      	str	r3, [r7, #20]
 800af24:	e01b      	b.n	800af5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af26:	4b10      	ldr	r3, [pc, #64]	; (800af68 <prvInsertTimerInActiveList+0x7c>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3304      	adds	r3, #4
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f7fe fa6e 	bl	8009412 <vListInsert>
 800af36:	e012      	b.n	800af5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d206      	bcs.n	800af4e <prvInsertTimerInActiveList+0x62>
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	429a      	cmp	r2, r3
 800af46:	d302      	bcc.n	800af4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af48:	2301      	movs	r3, #1
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	e007      	b.n	800af5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af4e:	4b07      	ldr	r3, [pc, #28]	; (800af6c <prvInsertTimerInActiveList+0x80>)
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3304      	adds	r3, #4
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f7fe fa5a 	bl	8009412 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af5e:	697b      	ldr	r3, [r7, #20]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	20000cd0 	.word	0x20000cd0
 800af6c:	20000ccc 	.word	0x20000ccc

0800af70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08c      	sub	sp, #48	; 0x30
 800af74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af76:	e0b2      	b.n	800b0de <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	da11      	bge.n	800afa2 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af7e:	f107 0308 	add.w	r3, r7, #8
 800af82:	3304      	adds	r3, #4
 800af84:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d102      	bne.n	800af92 <prvProcessReceivedCommands+0x22>
 800af8c:	f000 faf4 	bl	800b578 <ulSetInterruptMask>
 800af90:	e7fe      	b.n	800af90 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af98:	6850      	ldr	r0, [r2, #4]
 800af9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af9c:	6892      	ldr	r2, [r2, #8]
 800af9e:	4611      	mov	r1, r2
 800afa0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f2c0 8099 	blt.w	800b0dc <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800afae:	6a3b      	ldr	r3, [r7, #32]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d004      	beq.n	800afc0 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	3304      	adds	r3, #4
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fe fa62 	bl	8009484 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afc0:	1d3b      	adds	r3, r7, #4
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff ff72 	bl	800aeac <prvSampleTimeNow>
 800afc8:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b09      	cmp	r3, #9
 800afce:	f200 8086 	bhi.w	800b0de <prvProcessReceivedCommands+0x16e>
 800afd2:	a201      	add	r2, pc, #4	; (adr r2, 800afd8 <prvProcessReceivedCommands+0x68>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800b001 	.word	0x0800b001
 800afdc:	0800b001 	.word	0x0800b001
 800afe0:	0800b001 	.word	0x0800b001
 800afe4:	0800b065 	.word	0x0800b065
 800afe8:	0800b079 	.word	0x0800b079
 800afec:	0800b0b3 	.word	0x0800b0b3
 800aff0:	0800b001 	.word	0x0800b001
 800aff4:	0800b001 	.word	0x0800b001
 800aff8:	0800b065 	.word	0x0800b065
 800affc:	0800b079 	.word	0x0800b079
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b000:	6a3b      	ldr	r3, [r7, #32]
 800b002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b006:	f043 0301 	orr.w	r3, r3, #1
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	18d1      	adds	r1, r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	69fa      	ldr	r2, [r7, #28]
 800b01e:	6a38      	ldr	r0, [r7, #32]
 800b020:	f7ff ff64 	bl	800aeec <prvInsertTimerInActiveList>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d059      	beq.n	800b0de <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	6a38      	ldr	r0, [r7, #32]
 800b030:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b032:	6a3b      	ldr	r3, [r7, #32]
 800b034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d04e      	beq.n	800b0de <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	441a      	add	r2, r3
 800b048:	2300      	movs	r3, #0
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	2300      	movs	r3, #0
 800b04e:	2100      	movs	r1, #0
 800b050:	6a38      	ldr	r0, [r7, #32]
 800b052:	f7ff fe25 	bl	800aca0 <xTimerGenericCommand>
 800b056:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d13f      	bne.n	800b0de <prvProcessReceivedCommands+0x16e>
 800b05e:	f000 fa8b 	bl	800b578 <ulSetInterruptMask>
 800b062:	e7fe      	b.n	800b062 <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b06a:	f023 0301 	bic.w	r3, r3, #1
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b076:	e032      	b.n	800b0de <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b07e:	f043 0301 	orr.w	r3, r3, #1
 800b082:	b2da      	uxtb	r2, r3
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d102      	bne.n	800b09e <prvProcessReceivedCommands+0x12e>
 800b098:	f000 fa6e 	bl	800b578 <ulSetInterruptMask>
 800b09c:	e7fe      	b.n	800b09c <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	699a      	ldr	r2, [r3, #24]
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	18d1      	adds	r1, r2, r3
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	69fa      	ldr	r2, [r7, #28]
 800b0aa:	6a38      	ldr	r0, [r7, #32]
 800b0ac:	f7ff ff1e 	bl	800aeec <prvInsertTimerInActiveList>
					break;
 800b0b0:	e015      	b.n	800b0de <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0b8:	f003 0302 	and.w	r3, r3, #2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d103      	bne.n	800b0c8 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800b0c0:	6a38      	ldr	r0, [r7, #32]
 800b0c2:	f000 fb75 	bl	800b7b0 <vPortFree>
 800b0c6:	e00a      	b.n	800b0de <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ce:	f023 0301 	bic.w	r3, r3, #1
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b0da:	e000      	b.n	800b0de <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b0dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0de:	4b08      	ldr	r3, [pc, #32]	; (800b100 <prvProcessReceivedCommands+0x190>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f107 0108 	add.w	r1, r7, #8
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fe fc2c 	bl	8009946 <xQueueReceive>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f47f af41 	bne.w	800af78 <prvProcessReceivedCommands+0x8>
	}
}
 800b0f6:	bf00      	nop
 800b0f8:	bf00      	nop
 800b0fa:	3728      	adds	r7, #40	; 0x28
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20000cd4 	.word	0x20000cd4

0800b104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b10a:	e040      	b.n	800b18e <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b10c:	4b29      	ldr	r3, [pc, #164]	; (800b1b4 <prvSwitchTimerLists+0xb0>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b116:	4b27      	ldr	r3, [pc, #156]	; (800b1b4 <prvSwitchTimerLists+0xb0>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3304      	adds	r3, #4
 800b124:	4618      	mov	r0, r3
 800b126:	f7fe f9ad 	bl	8009484 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d026      	beq.n	800b18e <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	4413      	add	r3, r2
 800b148:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d90e      	bls.n	800b170 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b15e:	4b15      	ldr	r3, [pc, #84]	; (800b1b4 <prvSwitchTimerLists+0xb0>)
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3304      	adds	r3, #4
 800b166:	4619      	mov	r1, r3
 800b168:	4610      	mov	r0, r2
 800b16a:	f7fe f952 	bl	8009412 <vListInsert>
 800b16e:	e00e      	b.n	800b18e <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b170:	2300      	movs	r3, #0
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	2300      	movs	r3, #0
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	2100      	movs	r1, #0
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7ff fd90 	bl	800aca0 <xTimerGenericCommand>
 800b180:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <prvSwitchTimerLists+0x8a>
 800b188:	f000 f9f6 	bl	800b578 <ulSetInterruptMask>
 800b18c:	e7fe      	b.n	800b18c <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b18e:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <prvSwitchTimerLists+0xb0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1b9      	bne.n	800b10c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b198:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <prvSwitchTimerLists+0xb0>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b19e:	4b06      	ldr	r3, [pc, #24]	; (800b1b8 <prvSwitchTimerLists+0xb4>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a04      	ldr	r2, [pc, #16]	; (800b1b4 <prvSwitchTimerLists+0xb0>)
 800b1a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b1a6:	4a04      	ldr	r2, [pc, #16]	; (800b1b8 <prvSwitchTimerLists+0xb4>)
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	6013      	str	r3, [r2, #0]
}
 800b1ac:	bf00      	nop
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	20000ccc 	.word	0x20000ccc
 800b1b8:	20000cd0 	.word	0x20000cd0

0800b1bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b1c2:	f000 f8a3 	bl	800b30c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b1c6:	4b15      	ldr	r3, [pc, #84]	; (800b21c <prvCheckForValidListAndQueue+0x60>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d120      	bne.n	800b210 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b1ce:	4814      	ldr	r0, [pc, #80]	; (800b220 <prvCheckForValidListAndQueue+0x64>)
 800b1d0:	f7fe f8ce 	bl	8009370 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b1d4:	4813      	ldr	r0, [pc, #76]	; (800b224 <prvCheckForValidListAndQueue+0x68>)
 800b1d6:	f7fe f8cb 	bl	8009370 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1da:	4b13      	ldr	r3, [pc, #76]	; (800b228 <prvCheckForValidListAndQueue+0x6c>)
 800b1dc:	4a10      	ldr	r2, [pc, #64]	; (800b220 <prvCheckForValidListAndQueue+0x64>)
 800b1de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b1e0:	4b12      	ldr	r3, [pc, #72]	; (800b22c <prvCheckForValidListAndQueue+0x70>)
 800b1e2:	4a10      	ldr	r2, [pc, #64]	; (800b224 <prvCheckForValidListAndQueue+0x68>)
 800b1e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	4b11      	ldr	r3, [pc, #68]	; (800b230 <prvCheckForValidListAndQueue+0x74>)
 800b1ec:	4a11      	ldr	r2, [pc, #68]	; (800b234 <prvCheckForValidListAndQueue+0x78>)
 800b1ee:	2110      	movs	r1, #16
 800b1f0:	200a      	movs	r0, #10
 800b1f2:	f7fe f9c9 	bl	8009588 <xQueueGenericCreateStatic>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	4a08      	ldr	r2, [pc, #32]	; (800b21c <prvCheckForValidListAndQueue+0x60>)
 800b1fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1fc:	4b07      	ldr	r3, [pc, #28]	; (800b21c <prvCheckForValidListAndQueue+0x60>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d005      	beq.n	800b210 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b204:	4b05      	ldr	r3, [pc, #20]	; (800b21c <prvCheckForValidListAndQueue+0x60>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	490b      	ldr	r1, [pc, #44]	; (800b238 <prvCheckForValidListAndQueue+0x7c>)
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fe fd64 	bl	8009cd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b210:	f000 f88e 	bl	800b330 <vPortExitCritical>
}
 800b214:	bf00      	nop
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	20000cd4 	.word	0x20000cd4
 800b220:	20000ca4 	.word	0x20000ca4
 800b224:	20000cb8 	.word	0x20000cb8
 800b228:	20000ccc 	.word	0x20000ccc
 800b22c:	20000cd0 	.word	0x20000cd0
 800b230:	20000d80 	.word	0x20000d80
 800b234:	20000ce0 	.word	0x20000ce0
 800b238:	0800c39c 	.word	0x0800c39c

0800b23c <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b240:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <vPortSetupTimerInterrupt+0x34>)
 800b242:	2200      	movs	r2, #0
 800b244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b246:	4b0b      	ldr	r3, [pc, #44]	; (800b274 <vPortSetupTimerInterrupt+0x38>)
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b24c:	4b0a      	ldr	r3, [pc, #40]	; (800b278 <vPortSetupTimerInterrupt+0x3c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a0a      	ldr	r2, [pc, #40]	; (800b27c <vPortSetupTimerInterrupt+0x40>)
 800b252:	fba2 2303 	umull	r2, r3, r2, r3
 800b256:	099b      	lsrs	r3, r3, #6
 800b258:	4a09      	ldr	r2, [pc, #36]	; (800b280 <vPortSetupTimerInterrupt+0x44>)
 800b25a:	3b01      	subs	r3, #1
 800b25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800b25e:	4b04      	ldr	r3, [pc, #16]	; (800b270 <vPortSetupTimerInterrupt+0x34>)
 800b260:	2207      	movs	r2, #7
 800b262:	601a      	str	r2, [r3, #0]
}
 800b264:	bf00      	nop
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	e000e010 	.word	0xe000e010
 800b274:	e000e018 	.word	0xe000e018
 800b278:	20000000 	.word	0x20000000
 800b27c:	10624dd3 	.word	0x10624dd3
 800b280:	e000e014 	.word	0xe000e014

0800b284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800b28e:	4b09      	ldr	r3, [pc, #36]	; (800b2b4 <prvTaskExitError+0x30>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b296:	d002      	beq.n	800b29e <prvTaskExitError+0x1a>
 800b298:	f000 f96e 	bl	800b578 <ulSetInterruptMask>
 800b29c:	e7fe      	b.n	800b29c <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800b29e:	f000 f96b 	bl	800b578 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800b2a2:	bf00      	nop
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0fc      	beq.n	800b2a4 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	2000000c 	.word	0x2000000c

0800b2b8 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 800b2b8:	b480      	push	{r7}
 800b2ba:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800b2bc:	4b08      	ldr	r3, [pc, #32]	; (800b2e0 <prvSetupFPU+0x28>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a07      	ldr	r2, [pc, #28]	; (800b2e0 <prvSetupFPU+0x28>)
 800b2c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2c6:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800b2c8:	4b06      	ldr	r3, [pc, #24]	; (800b2e4 <prvSetupFPU+0x2c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a05      	ldr	r2, [pc, #20]	; (800b2e4 <prvSetupFPU+0x2c>)
 800b2ce:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2d2:	6013      	str	r3, [r2, #0]
	}
 800b2d4:	bf00      	nop
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	e000ed88 	.word	0xe000ed88
 800b2e4:	e000ef34 	.word	0xe000ef34

0800b2e8 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2ec:	4b06      	ldr	r3, [pc, #24]	; (800b308 <vPortYield+0x20>)
 800b2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800b2f4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800b2f8:	f3bf 8f6f 	isb	sy
}
 800b2fc:	bf00      	nop
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	e000ed04 	.word	0xe000ed04

0800b30c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800b310:	f000 f932 	bl	800b578 <ulSetInterruptMask>
	ulCriticalNesting++;
 800b314:	4b05      	ldr	r3, [pc, #20]	; (800b32c <vPortEnterCritical+0x20>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	3301      	adds	r3, #1
 800b31a:	4a04      	ldr	r2, [pc, #16]	; (800b32c <vPortEnterCritical+0x20>)
 800b31c:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800b31e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800b322:	f3bf 8f6f 	isb	sy
}
 800b326:	bf00      	nop
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	2000000c 	.word	0x2000000c

0800b330 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800b330:	b580      	push	{r7, lr}
 800b332:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800b334:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <vPortExitCritical+0x30>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <vPortExitCritical+0x12>
 800b33c:	f000 f91c 	bl	800b578 <ulSetInterruptMask>
 800b340:	e7fe      	b.n	800b340 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800b342:	4b07      	ldr	r3, [pc, #28]	; (800b360 <vPortExitCritical+0x30>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3b01      	subs	r3, #1
 800b348:	4a05      	ldr	r2, [pc, #20]	; (800b360 <vPortExitCritical+0x30>)
 800b34a:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800b34c:	4b04      	ldr	r3, [pc, #16]	; (800b360 <vPortExitCritical+0x30>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d102      	bne.n	800b35a <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800b354:	2000      	movs	r0, #0
 800b356:	f000 f91c 	bl	800b592 <vClearInterruptMask>
	}
}
 800b35a:	bf00      	nop
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	2000000c 	.word	0x2000000c

0800b364 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800b36a:	f000 f905 	bl	800b578 <ulSetInterruptMask>
 800b36e:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b370:	f7fe ffb6 	bl	800a2e0 <xTaskIncrementTick>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b37a:	4b05      	ldr	r3, [pc, #20]	; (800b390 <xPortSysTickHandler+0x2c>)
 800b37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b380:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f905 	bl	800b592 <vClearInterruptMask>
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	e000ed04 	.word	0xe000ed04

0800b394 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3b02      	subs	r3, #2
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800b3aa:	7afb      	ldrb	r3, [r7, #11]
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d104      	bne.n	800b3ba <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 800b3b0:	f7ff ff82 	bl	800b2b8 <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800b3b4:	f000 f8b4 	bl	800b520 <vRestoreContextOfFirstTask>
		}
		break;
 800b3b8:	e002      	b.n	800b3c0 <vPortSVCHandler_C+0x2c>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800b3ba:	f000 f8dd 	bl	800b578 <ulSetInterruptMask>
 800b3be:	e7fe      	b.n	800b3be <vPortSVCHandler_C+0x2a>
		}
	}
}
 800b3c0:	bf00      	nop
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3b04      	subs	r3, #4
 800b3da:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3e2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3b04      	subs	r3, #4
 800b3e8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	3b04      	subs	r3, #4
 800b3f4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3f6:	4a38      	ldr	r2, [pc, #224]	; (800b4d8 <pxPortInitialiseStack+0x110>)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3b04      	subs	r3, #4
 800b400:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800b408:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3b04      	subs	r3, #4
 800b40e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800b416:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	3b04      	subs	r3, #4
 800b41c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800b424:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3b04      	subs	r3, #4
 800b42a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800b432:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3b04      	subs	r3, #4
 800b438:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3b04      	subs	r3, #4
 800b444:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800b44c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3b04      	subs	r3, #4
 800b452:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800b45a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	3b04      	subs	r3, #4
 800b460:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800b468:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3b04      	subs	r3, #4
 800b46e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800b476:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3b04      	subs	r3, #4
 800b47c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800b484:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3b04      	subs	r3, #4
 800b48a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800b492:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	3b04      	subs	r3, #4
 800b498:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800b4a0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3b04      	subs	r3, #4
 800b4a6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800b4ae:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	3b04      	subs	r3, #4
 800b4b4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800b4bc:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3b04      	subs	r3, #4
 800b4c2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr
 800b4d8:	0800b285 	.word	0x0800b285

0800b4dc <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4e0:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <xPortStartScheduler+0x38>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a0b      	ldr	r2, [pc, #44]	; (800b514 <xPortStartScheduler+0x38>)
 800b4e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4ec:	4b09      	ldr	r3, [pc, #36]	; (800b514 <xPortStartScheduler+0x38>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a08      	ldr	r2, [pc, #32]	; (800b514 <xPortStartScheduler+0x38>)
 800b4f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4f6:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800b4f8:	f7ff fea0 	bl	800b23c <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800b4fc:	4b06      	ldr	r3, [pc, #24]	; (800b518 <xPortStartScheduler+0x3c>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800b502:	f000 f825 	bl	800b550 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800b506:	f7fe ff9d 	bl	800a444 <vTaskSwitchContext>
	prvTaskExitError();
 800b50a:	f7ff febb 	bl	800b284 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	bd80      	pop	{r7, pc}
 800b514:	e000ed20 	.word	0xe000ed20
 800b518:	2000000c 	.word	0x2000000c
 800b51c:	00000000 	.word	0x00000000

0800b520 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800b520:	4a07      	ldr	r2, [pc, #28]	; (800b540 <pxCurrentTCBConst2>)
 800b522:	6811      	ldr	r1, [r2, #0]
 800b524:	6808      	ldr	r0, [r1, #0]
 800b526:	c806      	ldmia	r0!, {r1, r2}
 800b528:	f381 880b 	msr	PSPLIM, r1
 800b52c:	2102      	movs	r1, #2
 800b52e:	f381 8814 	msr	CONTROL, r1
 800b532:	3020      	adds	r0, #32
 800b534:	f380 8809 	msr	PSP, r0
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	4710      	bx	r2
 800b53e:	bf00      	nop

0800b540 <pxCurrentTCBConst2>:
 800b540:	2000079c 	.word	0x2000079c
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop
	...

0800b550 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800b550:	4807      	ldr	r0, [pc, #28]	; (800b570 <xVTORConst>)
 800b552:	6800      	ldr	r0, [r0, #0]
 800b554:	6800      	ldr	r0, [r0, #0]
 800b556:	f380 8808 	msr	MSP, r0
 800b55a:	b662      	cpsie	i
 800b55c:	b661      	cpsie	f
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	df02      	svc	2
 800b568:	bf00      	nop
 800b56a:	bf00      	nop
 800b56c:	f3af 8000 	nop.w

0800b570 <xVTORConst>:
 800b570:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop

0800b578 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800b578:	f3ef 8011 	mrs	r0, BASEPRI
 800b57c:	f04f 0180 	mov.w	r1, #128	; 0x80
 800b580:	f381 8811 	msr	BASEPRI, r1
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b58e:	bf00      	nop
 800b590:	4618      	mov	r0, r3

0800b592 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800b592:	f380 8811 	msr	BASEPRI, r0
 800b596:	f3bf 8f4f 	dsb	sy
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800b5a0:	bf00      	nop
	...

0800b5b0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800b5b0:	f3ef 8009 	mrs	r0, PSP
 800b5b4:	f01e 0f10 	tst.w	lr, #16
 800b5b8:	bf08      	it	eq
 800b5ba:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5be:	f3ef 820b 	mrs	r2, PSPLIM
 800b5c2:	4673      	mov	r3, lr
 800b5c4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800b5c8:	4a11      	ldr	r2, [pc, #68]	; (800b610 <pxCurrentTCBConst>)
 800b5ca:	6811      	ldr	r1, [r2, #0]
 800b5cc:	6008      	str	r0, [r1, #0]
 800b5ce:	f04f 0080 	mov.w	r0, #128	; 0x80
 800b5d2:	f380 8811 	msr	BASEPRI, r0
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f7fe ff31 	bl	800a444 <vTaskSwitchContext>
 800b5e2:	f04f 0000 	mov.w	r0, #0
 800b5e6:	f380 8811 	msr	BASEPRI, r0
 800b5ea:	4a09      	ldr	r2, [pc, #36]	; (800b610 <pxCurrentTCBConst>)
 800b5ec:	6811      	ldr	r1, [r2, #0]
 800b5ee:	6808      	ldr	r0, [r1, #0]
 800b5f0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800b5f4:	f013 0f10 	tst.w	r3, #16
 800b5f8:	bf08      	it	eq
 800b5fa:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b5fe:	f382 880b 	msr	PSPLIM, r2
 800b602:	f380 8809 	msr	PSP, r0
 800b606:	4718      	bx	r3
 800b608:	f3af 8000 	nop.w
 800b60c:	f3af 8000 	nop.w

0800b610 <pxCurrentTCBConst>:
 800b610:	2000079c 	.word	0x2000079c
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop
	...

0800b620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800b620:	f01e 0f04 	tst.w	lr, #4
 800b624:	bf0c      	ite	eq
 800b626:	f3ef 8008 	mrseq	r0, MSP
 800b62a:	f3ef 8009 	mrsne	r0, PSP
 800b62e:	4904      	ldr	r1, [pc, #16]	; (800b640 <svchandler_address_const>)
 800b630:	4708      	bx	r1
 800b632:	bf00      	nop
 800b634:	f3af 8000 	nop.w
 800b638:	f3af 8000 	nop.w
 800b63c:	f3af 8000 	nop.w

0800b640 <svchandler_address_const>:
 800b640:	0800b395 	.word	0x0800b395
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop

0800b648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b650:	2300      	movs	r3, #0
 800b652:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800b654:	f7fe fd98 	bl	800a188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b658:	4b4f      	ldr	r3, [pc, #316]	; (800b798 <pvPortMalloc+0x150>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b660:	f000 f8f8 	bl	800b854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b664:	4b4d      	ldr	r3, [pc, #308]	; (800b79c <pvPortMalloc+0x154>)
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4013      	ands	r3, r2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f040 8083 	bne.w	800b778 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d015      	beq.n	800b6a4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800b678:	2208      	movs	r2, #8
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f003 0307 	and.w	r3, r3, #7
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00c      	beq.n	800b6a4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f023 0307 	bic.w	r3, r3, #7
 800b690:	3308      	adds	r3, #8
 800b692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f003 0307 	and.w	r3, r3, #7
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d002      	beq.n	800b6a4 <pvPortMalloc+0x5c>
 800b69e:	f7ff ff6b 	bl	800b578 <ulSetInterruptMask>
 800b6a2:	e7fe      	b.n	800b6a2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d066      	beq.n	800b778 <pvPortMalloc+0x130>
 800b6aa:	4b3d      	ldr	r3, [pc, #244]	; (800b7a0 <pvPortMalloc+0x158>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d861      	bhi.n	800b778 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6b4:	4b3b      	ldr	r3, [pc, #236]	; (800b7a4 <pvPortMalloc+0x15c>)
 800b6b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800b6b8:	4b3a      	ldr	r3, [pc, #232]	; (800b7a4 <pvPortMalloc+0x15c>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6be:	e004      	b.n	800b6ca <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d903      	bls.n	800b6dc <pvPortMalloc+0x94>
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1f1      	bne.n	800b6c0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6dc:	4b2e      	ldr	r3, [pc, #184]	; (800b798 <pvPortMalloc+0x150>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d048      	beq.n	800b778 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2208      	movs	r2, #8
 800b6ec:	4413      	add	r3, r2
 800b6ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	1ad2      	subs	r2, r2, r3
 800b700:	2308      	movs	r3, #8
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	429a      	cmp	r2, r3
 800b706:	d917      	bls.n	800b738 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4413      	add	r3, r2
 800b70e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f003 0307 	and.w	r3, r3, #7
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <pvPortMalloc+0xd8>
 800b71a:	f7ff ff2d 	bl	800b578 <ulSetInterruptMask>
 800b71e:	e7fe      	b.n	800b71e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	1ad2      	subs	r2, r2, r3
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b732:	68b8      	ldr	r0, [r7, #8]
 800b734:	f000 f8f0 	bl	800b918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b738:	4b19      	ldr	r3, [pc, #100]	; (800b7a0 <pvPortMalloc+0x158>)
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	4a17      	ldr	r2, [pc, #92]	; (800b7a0 <pvPortMalloc+0x158>)
 800b744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b746:	4b16      	ldr	r3, [pc, #88]	; (800b7a0 <pvPortMalloc+0x158>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	4b17      	ldr	r3, [pc, #92]	; (800b7a8 <pvPortMalloc+0x160>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d203      	bcs.n	800b75a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b752:	4b13      	ldr	r3, [pc, #76]	; (800b7a0 <pvPortMalloc+0x158>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a14      	ldr	r2, [pc, #80]	; (800b7a8 <pvPortMalloc+0x160>)
 800b758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <pvPortMalloc+0x154>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	431a      	orrs	r2, r3
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b76e:	4b0f      	ldr	r3, [pc, #60]	; (800b7ac <pvPortMalloc+0x164>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	3301      	adds	r3, #1
 800b774:	4a0d      	ldr	r2, [pc, #52]	; (800b7ac <pvPortMalloc+0x164>)
 800b776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b778:	f7fe fd14 	bl	800a1a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f003 0307 	and.w	r3, r3, #7
 800b782:	2b00      	cmp	r3, #0
 800b784:	d002      	beq.n	800b78c <pvPortMalloc+0x144>
 800b786:	f7ff fef7 	bl	800b578 <ulSetInterruptMask>
 800b78a:	e7fe      	b.n	800b78a <pvPortMalloc+0x142>
	return pvReturn;
 800b78c:	68fb      	ldr	r3, [r7, #12]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3718      	adds	r7, #24
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	200074e8 	.word	0x200074e8
 800b79c:	200074fc 	.word	0x200074fc
 800b7a0:	200074ec 	.word	0x200074ec
 800b7a4:	200074e0 	.word	0x200074e0
 800b7a8:	200074f0 	.word	0x200074f0
 800b7ac:	200074f4 	.word	0x200074f4

0800b7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d03d      	beq.n	800b83e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7c2:	2308      	movs	r3, #8
 800b7c4:	425b      	negs	r3, r3
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	4b1c      	ldr	r3, [pc, #112]	; (800b848 <vPortFree+0x98>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4013      	ands	r3, r2
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <vPortFree+0x34>
 800b7de:	f7ff fecb 	bl	800b578 <ulSetInterruptMask>
 800b7e2:	e7fe      	b.n	800b7e2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <vPortFree+0x42>
 800b7ec:	f7ff fec4 	bl	800b578 <ulSetInterruptMask>
 800b7f0:	e7fe      	b.n	800b7f0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	4b14      	ldr	r3, [pc, #80]	; (800b848 <vPortFree+0x98>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01e      	beq.n	800b83e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d11a      	bne.n	800b83e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	4b0e      	ldr	r3, [pc, #56]	; (800b848 <vPortFree+0x98>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	43db      	mvns	r3, r3
 800b812:	401a      	ands	r2, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b818:	f7fe fcb6 	bl	800a188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	685a      	ldr	r2, [r3, #4]
 800b820:	4b0a      	ldr	r3, [pc, #40]	; (800b84c <vPortFree+0x9c>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4413      	add	r3, r2
 800b826:	4a09      	ldr	r2, [pc, #36]	; (800b84c <vPortFree+0x9c>)
 800b828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b82a:	68b8      	ldr	r0, [r7, #8]
 800b82c:	f000 f874 	bl	800b918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b830:	4b07      	ldr	r3, [pc, #28]	; (800b850 <vPortFree+0xa0>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3301      	adds	r3, #1
 800b836:	4a06      	ldr	r2, [pc, #24]	; (800b850 <vPortFree+0xa0>)
 800b838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b83a:	f7fe fcb3 	bl	800a1a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b83e:	bf00      	nop
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	200074fc 	.word	0x200074fc
 800b84c:	200074ec 	.word	0x200074ec
 800b850:	200074f8 	.word	0x200074f8

0800b854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b85a:	f246 7310 	movw	r3, #26384	; 0x6710
 800b85e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b860:	4b27      	ldr	r3, [pc, #156]	; (800b900 <prvHeapInit+0xac>)
 800b862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00c      	beq.n	800b888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3307      	adds	r3, #7
 800b872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f023 0307 	bic.w	r3, r3, #7
 800b87a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	4a1f      	ldr	r2, [pc, #124]	; (800b900 <prvHeapInit+0xac>)
 800b884:	4413      	add	r3, r2
 800b886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b88c:	4a1d      	ldr	r2, [pc, #116]	; (800b904 <prvHeapInit+0xb0>)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b892:	4b1c      	ldr	r3, [pc, #112]	; (800b904 <prvHeapInit+0xb0>)
 800b894:	2200      	movs	r2, #0
 800b896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	4413      	add	r3, r2
 800b89e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8a0:	2208      	movs	r2, #8
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	1a9b      	subs	r3, r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f023 0307 	bic.w	r3, r3, #7
 800b8ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4a15      	ldr	r2, [pc, #84]	; (800b908 <prvHeapInit+0xb4>)
 800b8b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8b6:	4b14      	ldr	r3, [pc, #80]	; (800b908 <prvHeapInit+0xb4>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8be:	4b12      	ldr	r3, [pc, #72]	; (800b908 <prvHeapInit+0xb4>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	1ad2      	subs	r2, r2, r3
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8d4:	4b0c      	ldr	r3, [pc, #48]	; (800b908 <prvHeapInit+0xb4>)
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4a0a      	ldr	r2, [pc, #40]	; (800b90c <prvHeapInit+0xb8>)
 800b8e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	4a09      	ldr	r2, [pc, #36]	; (800b910 <prvHeapInit+0xbc>)
 800b8ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8ec:	4b09      	ldr	r3, [pc, #36]	; (800b914 <prvHeapInit+0xc0>)
 800b8ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8f2:	601a      	str	r2, [r3, #0]
}
 800b8f4:	bf00      	nop
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	20000dd0 	.word	0x20000dd0
 800b904:	200074e0 	.word	0x200074e0
 800b908:	200074e8 	.word	0x200074e8
 800b90c:	200074f0 	.word	0x200074f0
 800b910:	200074ec 	.word	0x200074ec
 800b914:	200074fc 	.word	0x200074fc

0800b918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b920:	4b28      	ldr	r3, [pc, #160]	; (800b9c4 <prvInsertBlockIntoFreeList+0xac>)
 800b922:	60fb      	str	r3, [r7, #12]
 800b924:	e002      	b.n	800b92c <prvInsertBlockIntoFreeList+0x14>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	429a      	cmp	r2, r3
 800b934:	d8f7      	bhi.n	800b926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	4413      	add	r3, r2
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	429a      	cmp	r2, r3
 800b946:	d108      	bne.n	800b95a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	441a      	add	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	441a      	add	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d118      	bne.n	800b9a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4b15      	ldr	r3, [pc, #84]	; (800b9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d00d      	beq.n	800b996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	441a      	add	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	e008      	b.n	800b9a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b996:	4b0c      	ldr	r3, [pc, #48]	; (800b9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	601a      	str	r2, [r3, #0]
 800b99e:	e003      	b.n	800b9a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d002      	beq.n	800b9b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9b6:	bf00      	nop
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	200074e0 	.word	0x200074e0
 800b9c8:	200074e8 	.word	0x200074e8

0800b9cc <__errno>:
 800b9cc:	4b01      	ldr	r3, [pc, #4]	; (800b9d4 <__errno+0x8>)
 800b9ce:	6818      	ldr	r0, [r3, #0]
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	20000010 	.word	0x20000010

0800b9d8 <__libc_init_array>:
 800b9d8:	b570      	push	{r4, r5, r6, lr}
 800b9da:	4d0d      	ldr	r5, [pc, #52]	; (800ba10 <__libc_init_array+0x38>)
 800b9dc:	2600      	movs	r6, #0
 800b9de:	4c0d      	ldr	r4, [pc, #52]	; (800ba14 <__libc_init_array+0x3c>)
 800b9e0:	1b64      	subs	r4, r4, r5
 800b9e2:	10a4      	asrs	r4, r4, #2
 800b9e4:	42a6      	cmp	r6, r4
 800b9e6:	d109      	bne.n	800b9fc <__libc_init_array+0x24>
 800b9e8:	4d0b      	ldr	r5, [pc, #44]	; (800ba18 <__libc_init_array+0x40>)
 800b9ea:	2600      	movs	r6, #0
 800b9ec:	4c0b      	ldr	r4, [pc, #44]	; (800ba1c <__libc_init_array+0x44>)
 800b9ee:	f000 fc79 	bl	800c2e4 <_init>
 800b9f2:	1b64      	subs	r4, r4, r5
 800b9f4:	10a4      	asrs	r4, r4, #2
 800b9f6:	42a6      	cmp	r6, r4
 800b9f8:	d105      	bne.n	800ba06 <__libc_init_array+0x2e>
 800b9fa:	bd70      	pop	{r4, r5, r6, pc}
 800b9fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba00:	3601      	adds	r6, #1
 800ba02:	4798      	blx	r3
 800ba04:	e7ee      	b.n	800b9e4 <__libc_init_array+0xc>
 800ba06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba0a:	3601      	adds	r6, #1
 800ba0c:	4798      	blx	r3
 800ba0e:	e7f2      	b.n	800b9f6 <__libc_init_array+0x1e>
 800ba10:	0800c4bc 	.word	0x0800c4bc
 800ba14:	0800c4bc 	.word	0x0800c4bc
 800ba18:	0800c4bc 	.word	0x0800c4bc
 800ba1c:	0800c4c4 	.word	0x0800c4c4

0800ba20 <free>:
 800ba20:	4b02      	ldr	r3, [pc, #8]	; (800ba2c <free+0xc>)
 800ba22:	4601      	mov	r1, r0
 800ba24:	6818      	ldr	r0, [r3, #0]
 800ba26:	f000 b819 	b.w	800ba5c <_free_r>
 800ba2a:	bf00      	nop
 800ba2c:	20000010 	.word	0x20000010

0800ba30 <memcpy>:
 800ba30:	440a      	add	r2, r1
 800ba32:	1e43      	subs	r3, r0, #1
 800ba34:	4291      	cmp	r1, r2
 800ba36:	d100      	bne.n	800ba3a <memcpy+0xa>
 800ba38:	4770      	bx	lr
 800ba3a:	b510      	push	{r4, lr}
 800ba3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba40:	4291      	cmp	r1, r2
 800ba42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba46:	d1f9      	bne.n	800ba3c <memcpy+0xc>
 800ba48:	bd10      	pop	{r4, pc}

0800ba4a <memset>:
 800ba4a:	4402      	add	r2, r0
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d100      	bne.n	800ba54 <memset+0xa>
 800ba52:	4770      	bx	lr
 800ba54:	f803 1b01 	strb.w	r1, [r3], #1
 800ba58:	e7f9      	b.n	800ba4e <memset+0x4>
	...

0800ba5c <_free_r>:
 800ba5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba5e:	2900      	cmp	r1, #0
 800ba60:	d047      	beq.n	800baf2 <_free_r+0x96>
 800ba62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba66:	1f0c      	subs	r4, r1, #4
 800ba68:	9001      	str	r0, [sp, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	bfb8      	it	lt
 800ba6e:	18e4      	addlt	r4, r4, r3
 800ba70:	f000 f8e2 	bl	800bc38 <__malloc_lock>
 800ba74:	4a20      	ldr	r2, [pc, #128]	; (800baf8 <_free_r+0x9c>)
 800ba76:	9801      	ldr	r0, [sp, #4]
 800ba78:	6813      	ldr	r3, [r2, #0]
 800ba7a:	4615      	mov	r5, r2
 800ba7c:	b933      	cbnz	r3, 800ba8c <_free_r+0x30>
 800ba7e:	6063      	str	r3, [r4, #4]
 800ba80:	6014      	str	r4, [r2, #0]
 800ba82:	b003      	add	sp, #12
 800ba84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba88:	f000 b8dc 	b.w	800bc44 <__malloc_unlock>
 800ba8c:	42a3      	cmp	r3, r4
 800ba8e:	d90b      	bls.n	800baa8 <_free_r+0x4c>
 800ba90:	6821      	ldr	r1, [r4, #0]
 800ba92:	1862      	adds	r2, r4, r1
 800ba94:	4293      	cmp	r3, r2
 800ba96:	bf02      	ittt	eq
 800ba98:	681a      	ldreq	r2, [r3, #0]
 800ba9a:	685b      	ldreq	r3, [r3, #4]
 800ba9c:	1852      	addeq	r2, r2, r1
 800ba9e:	6063      	str	r3, [r4, #4]
 800baa0:	bf08      	it	eq
 800baa2:	6022      	streq	r2, [r4, #0]
 800baa4:	602c      	str	r4, [r5, #0]
 800baa6:	e7ec      	b.n	800ba82 <_free_r+0x26>
 800baa8:	461a      	mov	r2, r3
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	b10b      	cbz	r3, 800bab2 <_free_r+0x56>
 800baae:	42a3      	cmp	r3, r4
 800bab0:	d9fa      	bls.n	800baa8 <_free_r+0x4c>
 800bab2:	6811      	ldr	r1, [r2, #0]
 800bab4:	1855      	adds	r5, r2, r1
 800bab6:	42a5      	cmp	r5, r4
 800bab8:	d10b      	bne.n	800bad2 <_free_r+0x76>
 800baba:	6824      	ldr	r4, [r4, #0]
 800babc:	4421      	add	r1, r4
 800babe:	1854      	adds	r4, r2, r1
 800bac0:	6011      	str	r1, [r2, #0]
 800bac2:	42a3      	cmp	r3, r4
 800bac4:	d1dd      	bne.n	800ba82 <_free_r+0x26>
 800bac6:	681c      	ldr	r4, [r3, #0]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	4421      	add	r1, r4
 800bacc:	6053      	str	r3, [r2, #4]
 800bace:	6011      	str	r1, [r2, #0]
 800bad0:	e7d7      	b.n	800ba82 <_free_r+0x26>
 800bad2:	d902      	bls.n	800bada <_free_r+0x7e>
 800bad4:	230c      	movs	r3, #12
 800bad6:	6003      	str	r3, [r0, #0]
 800bad8:	e7d3      	b.n	800ba82 <_free_r+0x26>
 800bada:	6825      	ldr	r5, [r4, #0]
 800badc:	1961      	adds	r1, r4, r5
 800bade:	428b      	cmp	r3, r1
 800bae0:	bf02      	ittt	eq
 800bae2:	6819      	ldreq	r1, [r3, #0]
 800bae4:	685b      	ldreq	r3, [r3, #4]
 800bae6:	1949      	addeq	r1, r1, r5
 800bae8:	6063      	str	r3, [r4, #4]
 800baea:	bf08      	it	eq
 800baec:	6021      	streq	r1, [r4, #0]
 800baee:	6054      	str	r4, [r2, #4]
 800baf0:	e7c7      	b.n	800ba82 <_free_r+0x26>
 800baf2:	b003      	add	sp, #12
 800baf4:	bd30      	pop	{r4, r5, pc}
 800baf6:	bf00      	nop
 800baf8:	20007500 	.word	0x20007500

0800bafc <_malloc_r>:
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafe:	1ccd      	adds	r5, r1, #3
 800bb00:	4606      	mov	r6, r0
 800bb02:	f025 0503 	bic.w	r5, r5, #3
 800bb06:	3508      	adds	r5, #8
 800bb08:	2d0c      	cmp	r5, #12
 800bb0a:	bf38      	it	cc
 800bb0c:	250c      	movcc	r5, #12
 800bb0e:	2d00      	cmp	r5, #0
 800bb10:	db01      	blt.n	800bb16 <_malloc_r+0x1a>
 800bb12:	42a9      	cmp	r1, r5
 800bb14:	d903      	bls.n	800bb1e <_malloc_r+0x22>
 800bb16:	230c      	movs	r3, #12
 800bb18:	6033      	str	r3, [r6, #0]
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb1e:	f000 f88b 	bl	800bc38 <__malloc_lock>
 800bb22:	4921      	ldr	r1, [pc, #132]	; (800bba8 <_malloc_r+0xac>)
 800bb24:	680a      	ldr	r2, [r1, #0]
 800bb26:	4614      	mov	r4, r2
 800bb28:	b99c      	cbnz	r4, 800bb52 <_malloc_r+0x56>
 800bb2a:	4f20      	ldr	r7, [pc, #128]	; (800bbac <_malloc_r+0xb0>)
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	b923      	cbnz	r3, 800bb3a <_malloc_r+0x3e>
 800bb30:	4621      	mov	r1, r4
 800bb32:	4630      	mov	r0, r6
 800bb34:	f000 f83c 	bl	800bbb0 <_sbrk_r>
 800bb38:	6038      	str	r0, [r7, #0]
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	f000 f837 	bl	800bbb0 <_sbrk_r>
 800bb42:	1c43      	adds	r3, r0, #1
 800bb44:	d123      	bne.n	800bb8e <_malloc_r+0x92>
 800bb46:	230c      	movs	r3, #12
 800bb48:	4630      	mov	r0, r6
 800bb4a:	6033      	str	r3, [r6, #0]
 800bb4c:	f000 f87a 	bl	800bc44 <__malloc_unlock>
 800bb50:	e7e3      	b.n	800bb1a <_malloc_r+0x1e>
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	1b5b      	subs	r3, r3, r5
 800bb56:	d417      	bmi.n	800bb88 <_malloc_r+0x8c>
 800bb58:	2b0b      	cmp	r3, #11
 800bb5a:	d903      	bls.n	800bb64 <_malloc_r+0x68>
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	441c      	add	r4, r3
 800bb60:	6025      	str	r5, [r4, #0]
 800bb62:	e004      	b.n	800bb6e <_malloc_r+0x72>
 800bb64:	6863      	ldr	r3, [r4, #4]
 800bb66:	42a2      	cmp	r2, r4
 800bb68:	bf0c      	ite	eq
 800bb6a:	600b      	streq	r3, [r1, #0]
 800bb6c:	6053      	strne	r3, [r2, #4]
 800bb6e:	4630      	mov	r0, r6
 800bb70:	f000 f868 	bl	800bc44 <__malloc_unlock>
 800bb74:	f104 000b 	add.w	r0, r4, #11
 800bb78:	1d23      	adds	r3, r4, #4
 800bb7a:	f020 0007 	bic.w	r0, r0, #7
 800bb7e:	1ac2      	subs	r2, r0, r3
 800bb80:	d0cc      	beq.n	800bb1c <_malloc_r+0x20>
 800bb82:	1a1b      	subs	r3, r3, r0
 800bb84:	50a3      	str	r3, [r4, r2]
 800bb86:	e7c9      	b.n	800bb1c <_malloc_r+0x20>
 800bb88:	4622      	mov	r2, r4
 800bb8a:	6864      	ldr	r4, [r4, #4]
 800bb8c:	e7cc      	b.n	800bb28 <_malloc_r+0x2c>
 800bb8e:	1cc4      	adds	r4, r0, #3
 800bb90:	f024 0403 	bic.w	r4, r4, #3
 800bb94:	42a0      	cmp	r0, r4
 800bb96:	d0e3      	beq.n	800bb60 <_malloc_r+0x64>
 800bb98:	1a21      	subs	r1, r4, r0
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f000 f808 	bl	800bbb0 <_sbrk_r>
 800bba0:	3001      	adds	r0, #1
 800bba2:	d1dd      	bne.n	800bb60 <_malloc_r+0x64>
 800bba4:	e7cf      	b.n	800bb46 <_malloc_r+0x4a>
 800bba6:	bf00      	nop
 800bba8:	20007500 	.word	0x20007500
 800bbac:	20007504 	.word	0x20007504

0800bbb0 <_sbrk_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	4d05      	ldr	r5, [pc, #20]	; (800bbcc <_sbrk_r+0x1c>)
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	602b      	str	r3, [r5, #0]
 800bbbc:	f7f5 fad8 	bl	8001170 <_sbrk>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_sbrk_r+0x1a>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_sbrk_r+0x1a>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	200078cc 	.word	0x200078cc

0800bbd0 <sniprintf>:
 800bbd0:	b40c      	push	{r2, r3}
 800bbd2:	4b18      	ldr	r3, [pc, #96]	; (800bc34 <sniprintf+0x64>)
 800bbd4:	b530      	push	{r4, r5, lr}
 800bbd6:	1e0c      	subs	r4, r1, #0
 800bbd8:	b09d      	sub	sp, #116	; 0x74
 800bbda:	681d      	ldr	r5, [r3, #0]
 800bbdc:	da08      	bge.n	800bbf0 <sniprintf+0x20>
 800bbde:	238b      	movs	r3, #139	; 0x8b
 800bbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe4:	602b      	str	r3, [r5, #0]
 800bbe6:	b01d      	add	sp, #116	; 0x74
 800bbe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbec:	b002      	add	sp, #8
 800bbee:	4770      	bx	lr
 800bbf0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bbf4:	9002      	str	r0, [sp, #8]
 800bbf6:	9006      	str	r0, [sp, #24]
 800bbf8:	a902      	add	r1, sp, #8
 800bbfa:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bbfe:	bf14      	ite	ne
 800bc00:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bc04:	4623      	moveq	r3, r4
 800bc06:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bc08:	4628      	mov	r0, r5
 800bc0a:	9304      	str	r3, [sp, #16]
 800bc0c:	9307      	str	r3, [sp, #28]
 800bc0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc12:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc16:	ab21      	add	r3, sp, #132	; 0x84
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	f000 f875 	bl	800bd08 <_svfiprintf_r>
 800bc1e:	1c43      	adds	r3, r0, #1
 800bc20:	bfbc      	itt	lt
 800bc22:	238b      	movlt	r3, #139	; 0x8b
 800bc24:	602b      	strlt	r3, [r5, #0]
 800bc26:	2c00      	cmp	r4, #0
 800bc28:	d0dd      	beq.n	800bbe6 <sniprintf+0x16>
 800bc2a:	9b02      	ldr	r3, [sp, #8]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	701a      	strb	r2, [r3, #0]
 800bc30:	e7d9      	b.n	800bbe6 <sniprintf+0x16>
 800bc32:	bf00      	nop
 800bc34:	20000010 	.word	0x20000010

0800bc38 <__malloc_lock>:
 800bc38:	4801      	ldr	r0, [pc, #4]	; (800bc40 <__malloc_lock+0x8>)
 800bc3a:	f000 bafb 	b.w	800c234 <__retarget_lock_acquire_recursive>
 800bc3e:	bf00      	nop
 800bc40:	200078d4 	.word	0x200078d4

0800bc44 <__malloc_unlock>:
 800bc44:	4801      	ldr	r0, [pc, #4]	; (800bc4c <__malloc_unlock+0x8>)
 800bc46:	f000 baf6 	b.w	800c236 <__retarget_lock_release_recursive>
 800bc4a:	bf00      	nop
 800bc4c:	200078d4 	.word	0x200078d4

0800bc50 <__ssputs_r>:
 800bc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc54:	688e      	ldr	r6, [r1, #8]
 800bc56:	4682      	mov	sl, r0
 800bc58:	460c      	mov	r4, r1
 800bc5a:	4690      	mov	r8, r2
 800bc5c:	429e      	cmp	r6, r3
 800bc5e:	461f      	mov	r7, r3
 800bc60:	d838      	bhi.n	800bcd4 <__ssputs_r+0x84>
 800bc62:	898a      	ldrh	r2, [r1, #12]
 800bc64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc68:	d032      	beq.n	800bcd0 <__ssputs_r+0x80>
 800bc6a:	6825      	ldr	r5, [r4, #0]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	6909      	ldr	r1, [r1, #16]
 800bc70:	eba5 0901 	sub.w	r9, r5, r1
 800bc74:	6965      	ldr	r5, [r4, #20]
 800bc76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc7a:	444b      	add	r3, r9
 800bc7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc80:	106d      	asrs	r5, r5, #1
 800bc82:	429d      	cmp	r5, r3
 800bc84:	bf38      	it	cc
 800bc86:	461d      	movcc	r5, r3
 800bc88:	0553      	lsls	r3, r2, #21
 800bc8a:	d531      	bpl.n	800bcf0 <__ssputs_r+0xa0>
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	f7ff ff35 	bl	800bafc <_malloc_r>
 800bc92:	4606      	mov	r6, r0
 800bc94:	b950      	cbnz	r0, 800bcac <__ssputs_r+0x5c>
 800bc96:	230c      	movs	r3, #12
 800bc98:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9c:	f8ca 3000 	str.w	r3, [sl]
 800bca0:	89a3      	ldrh	r3, [r4, #12]
 800bca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bca6:	81a3      	strh	r3, [r4, #12]
 800bca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcac:	464a      	mov	r2, r9
 800bcae:	6921      	ldr	r1, [r4, #16]
 800bcb0:	f7ff febe 	bl	800ba30 <memcpy>
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcbe:	81a3      	strh	r3, [r4, #12]
 800bcc0:	6126      	str	r6, [r4, #16]
 800bcc2:	444e      	add	r6, r9
 800bcc4:	6165      	str	r5, [r4, #20]
 800bcc6:	eba5 0509 	sub.w	r5, r5, r9
 800bcca:	6026      	str	r6, [r4, #0]
 800bccc:	463e      	mov	r6, r7
 800bcce:	60a5      	str	r5, [r4, #8]
 800bcd0:	42be      	cmp	r6, r7
 800bcd2:	d900      	bls.n	800bcd6 <__ssputs_r+0x86>
 800bcd4:	463e      	mov	r6, r7
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	4641      	mov	r1, r8
 800bcda:	6820      	ldr	r0, [r4, #0]
 800bcdc:	f000 faba 	bl	800c254 <memmove>
 800bce0:	68a3      	ldr	r3, [r4, #8]
 800bce2:	6822      	ldr	r2, [r4, #0]
 800bce4:	2000      	movs	r0, #0
 800bce6:	1b9b      	subs	r3, r3, r6
 800bce8:	4432      	add	r2, r6
 800bcea:	60a3      	str	r3, [r4, #8]
 800bcec:	6022      	str	r2, [r4, #0]
 800bcee:	e7db      	b.n	800bca8 <__ssputs_r+0x58>
 800bcf0:	462a      	mov	r2, r5
 800bcf2:	f000 fac9 	bl	800c288 <_realloc_r>
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d1e1      	bne.n	800bcc0 <__ssputs_r+0x70>
 800bcfc:	6921      	ldr	r1, [r4, #16]
 800bcfe:	4650      	mov	r0, sl
 800bd00:	f7ff feac 	bl	800ba5c <_free_r>
 800bd04:	e7c7      	b.n	800bc96 <__ssputs_r+0x46>
	...

0800bd08 <_svfiprintf_r>:
 800bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	4698      	mov	r8, r3
 800bd0e:	898b      	ldrh	r3, [r1, #12]
 800bd10:	b09d      	sub	sp, #116	; 0x74
 800bd12:	4607      	mov	r7, r0
 800bd14:	061b      	lsls	r3, r3, #24
 800bd16:	460d      	mov	r5, r1
 800bd18:	4614      	mov	r4, r2
 800bd1a:	d50e      	bpl.n	800bd3a <_svfiprintf_r+0x32>
 800bd1c:	690b      	ldr	r3, [r1, #16]
 800bd1e:	b963      	cbnz	r3, 800bd3a <_svfiprintf_r+0x32>
 800bd20:	2140      	movs	r1, #64	; 0x40
 800bd22:	f7ff feeb 	bl	800bafc <_malloc_r>
 800bd26:	6028      	str	r0, [r5, #0]
 800bd28:	6128      	str	r0, [r5, #16]
 800bd2a:	b920      	cbnz	r0, 800bd36 <_svfiprintf_r+0x2e>
 800bd2c:	230c      	movs	r3, #12
 800bd2e:	603b      	str	r3, [r7, #0]
 800bd30:	f04f 30ff 	mov.w	r0, #4294967295
 800bd34:	e0d1      	b.n	800beda <_svfiprintf_r+0x1d2>
 800bd36:	2340      	movs	r3, #64	; 0x40
 800bd38:	616b      	str	r3, [r5, #20]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd40:	f04f 0901 	mov.w	r9, #1
 800bd44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800bef4 <_svfiprintf_r+0x1ec>
 800bd48:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4a:	2320      	movs	r3, #32
 800bd4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd50:	2330      	movs	r3, #48	; 0x30
 800bd52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd56:	4623      	mov	r3, r4
 800bd58:	469a      	mov	sl, r3
 800bd5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd5e:	b10a      	cbz	r2, 800bd64 <_svfiprintf_r+0x5c>
 800bd60:	2a25      	cmp	r2, #37	; 0x25
 800bd62:	d1f9      	bne.n	800bd58 <_svfiprintf_r+0x50>
 800bd64:	ebba 0b04 	subs.w	fp, sl, r4
 800bd68:	d00b      	beq.n	800bd82 <_svfiprintf_r+0x7a>
 800bd6a:	465b      	mov	r3, fp
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	4629      	mov	r1, r5
 800bd70:	4638      	mov	r0, r7
 800bd72:	f7ff ff6d 	bl	800bc50 <__ssputs_r>
 800bd76:	3001      	adds	r0, #1
 800bd78:	f000 80aa 	beq.w	800bed0 <_svfiprintf_r+0x1c8>
 800bd7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd7e:	445a      	add	r2, fp
 800bd80:	9209      	str	r2, [sp, #36]	; 0x24
 800bd82:	f89a 3000 	ldrb.w	r3, [sl]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 80a2 	beq.w	800bed0 <_svfiprintf_r+0x1c8>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd92:	f10a 0a01 	add.w	sl, sl, #1
 800bd96:	9304      	str	r3, [sp, #16]
 800bd98:	9307      	str	r3, [sp, #28]
 800bd9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd9e:	931a      	str	r3, [sp, #104]	; 0x68
 800bda0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda4:	4654      	mov	r4, sl
 800bda6:	2205      	movs	r2, #5
 800bda8:	4852      	ldr	r0, [pc, #328]	; (800bef4 <_svfiprintf_r+0x1ec>)
 800bdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdae:	f000 fa43 	bl	800c238 <memchr>
 800bdb2:	9a04      	ldr	r2, [sp, #16]
 800bdb4:	b9d8      	cbnz	r0, 800bdee <_svfiprintf_r+0xe6>
 800bdb6:	06d0      	lsls	r0, r2, #27
 800bdb8:	bf44      	itt	mi
 800bdba:	2320      	movmi	r3, #32
 800bdbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdc0:	0711      	lsls	r1, r2, #28
 800bdc2:	bf44      	itt	mi
 800bdc4:	232b      	movmi	r3, #43	; 0x2b
 800bdc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdca:	f89a 3000 	ldrb.w	r3, [sl]
 800bdce:	2b2a      	cmp	r3, #42	; 0x2a
 800bdd0:	d015      	beq.n	800bdfe <_svfiprintf_r+0xf6>
 800bdd2:	9a07      	ldr	r2, [sp, #28]
 800bdd4:	4654      	mov	r4, sl
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	f04f 0c0a 	mov.w	ip, #10
 800bddc:	4621      	mov	r1, r4
 800bdde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bde2:	3b30      	subs	r3, #48	; 0x30
 800bde4:	2b09      	cmp	r3, #9
 800bde6:	d94e      	bls.n	800be86 <_svfiprintf_r+0x17e>
 800bde8:	b1b0      	cbz	r0, 800be18 <_svfiprintf_r+0x110>
 800bdea:	9207      	str	r2, [sp, #28]
 800bdec:	e014      	b.n	800be18 <_svfiprintf_r+0x110>
 800bdee:	eba0 0308 	sub.w	r3, r0, r8
 800bdf2:	46a2      	mov	sl, r4
 800bdf4:	fa09 f303 	lsl.w	r3, r9, r3
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	9304      	str	r3, [sp, #16]
 800bdfc:	e7d2      	b.n	800bda4 <_svfiprintf_r+0x9c>
 800bdfe:	9b03      	ldr	r3, [sp, #12]
 800be00:	1d19      	adds	r1, r3, #4
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	9103      	str	r1, [sp, #12]
 800be08:	bfbb      	ittet	lt
 800be0a:	425b      	neglt	r3, r3
 800be0c:	f042 0202 	orrlt.w	r2, r2, #2
 800be10:	9307      	strge	r3, [sp, #28]
 800be12:	9307      	strlt	r3, [sp, #28]
 800be14:	bfb8      	it	lt
 800be16:	9204      	strlt	r2, [sp, #16]
 800be18:	7823      	ldrb	r3, [r4, #0]
 800be1a:	2b2e      	cmp	r3, #46	; 0x2e
 800be1c:	d10c      	bne.n	800be38 <_svfiprintf_r+0x130>
 800be1e:	7863      	ldrb	r3, [r4, #1]
 800be20:	2b2a      	cmp	r3, #42	; 0x2a
 800be22:	d135      	bne.n	800be90 <_svfiprintf_r+0x188>
 800be24:	9b03      	ldr	r3, [sp, #12]
 800be26:	3402      	adds	r4, #2
 800be28:	1d1a      	adds	r2, r3, #4
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	9203      	str	r2, [sp, #12]
 800be30:	bfb8      	it	lt
 800be32:	f04f 33ff 	movlt.w	r3, #4294967295
 800be36:	9305      	str	r3, [sp, #20]
 800be38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf04 <_svfiprintf_r+0x1fc>
 800be3c:	2203      	movs	r2, #3
 800be3e:	7821      	ldrb	r1, [r4, #0]
 800be40:	4650      	mov	r0, sl
 800be42:	f000 f9f9 	bl	800c238 <memchr>
 800be46:	b140      	cbz	r0, 800be5a <_svfiprintf_r+0x152>
 800be48:	2340      	movs	r3, #64	; 0x40
 800be4a:	eba0 000a 	sub.w	r0, r0, sl
 800be4e:	3401      	adds	r4, #1
 800be50:	fa03 f000 	lsl.w	r0, r3, r0
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	4303      	orrs	r3, r0
 800be58:	9304      	str	r3, [sp, #16]
 800be5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be5e:	2206      	movs	r2, #6
 800be60:	4825      	ldr	r0, [pc, #148]	; (800bef8 <_svfiprintf_r+0x1f0>)
 800be62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be66:	f000 f9e7 	bl	800c238 <memchr>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d038      	beq.n	800bee0 <_svfiprintf_r+0x1d8>
 800be6e:	4b23      	ldr	r3, [pc, #140]	; (800befc <_svfiprintf_r+0x1f4>)
 800be70:	bb1b      	cbnz	r3, 800beba <_svfiprintf_r+0x1b2>
 800be72:	9b03      	ldr	r3, [sp, #12]
 800be74:	3307      	adds	r3, #7
 800be76:	f023 0307 	bic.w	r3, r3, #7
 800be7a:	3308      	adds	r3, #8
 800be7c:	9303      	str	r3, [sp, #12]
 800be7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be80:	4433      	add	r3, r6
 800be82:	9309      	str	r3, [sp, #36]	; 0x24
 800be84:	e767      	b.n	800bd56 <_svfiprintf_r+0x4e>
 800be86:	fb0c 3202 	mla	r2, ip, r2, r3
 800be8a:	460c      	mov	r4, r1
 800be8c:	2001      	movs	r0, #1
 800be8e:	e7a5      	b.n	800bddc <_svfiprintf_r+0xd4>
 800be90:	2300      	movs	r3, #0
 800be92:	3401      	adds	r4, #1
 800be94:	f04f 0c0a 	mov.w	ip, #10
 800be98:	4619      	mov	r1, r3
 800be9a:	9305      	str	r3, [sp, #20]
 800be9c:	4620      	mov	r0, r4
 800be9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bea2:	3a30      	subs	r2, #48	; 0x30
 800bea4:	2a09      	cmp	r2, #9
 800bea6:	d903      	bls.n	800beb0 <_svfiprintf_r+0x1a8>
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d0c5      	beq.n	800be38 <_svfiprintf_r+0x130>
 800beac:	9105      	str	r1, [sp, #20]
 800beae:	e7c3      	b.n	800be38 <_svfiprintf_r+0x130>
 800beb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800beb4:	4604      	mov	r4, r0
 800beb6:	2301      	movs	r3, #1
 800beb8:	e7f0      	b.n	800be9c <_svfiprintf_r+0x194>
 800beba:	ab03      	add	r3, sp, #12
 800bebc:	462a      	mov	r2, r5
 800bebe:	a904      	add	r1, sp, #16
 800bec0:	4638      	mov	r0, r7
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	4b0e      	ldr	r3, [pc, #56]	; (800bf00 <_svfiprintf_r+0x1f8>)
 800bec6:	e000      	b.n	800beca <_svfiprintf_r+0x1c2>
 800bec8:	bf00      	nop
 800beca:	1c42      	adds	r2, r0, #1
 800becc:	4606      	mov	r6, r0
 800bece:	d1d6      	bne.n	800be7e <_svfiprintf_r+0x176>
 800bed0:	89ab      	ldrh	r3, [r5, #12]
 800bed2:	065b      	lsls	r3, r3, #25
 800bed4:	f53f af2c 	bmi.w	800bd30 <_svfiprintf_r+0x28>
 800bed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beda:	b01d      	add	sp, #116	; 0x74
 800bedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee0:	ab03      	add	r3, sp, #12
 800bee2:	462a      	mov	r2, r5
 800bee4:	a904      	add	r1, sp, #16
 800bee6:	4638      	mov	r0, r7
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <_svfiprintf_r+0x1f8>)
 800beec:	f000 f87c 	bl	800bfe8 <_printf_i>
 800bef0:	e7eb      	b.n	800beca <_svfiprintf_r+0x1c2>
 800bef2:	bf00      	nop
 800bef4:	0800c480 	.word	0x0800c480
 800bef8:	0800c48a 	.word	0x0800c48a
 800befc:	00000000 	.word	0x00000000
 800bf00:	0800bc51 	.word	0x0800bc51
 800bf04:	0800c486 	.word	0x0800c486

0800bf08 <_printf_common>:
 800bf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	4699      	mov	r9, r3
 800bf10:	688a      	ldr	r2, [r1, #8]
 800bf12:	4607      	mov	r7, r0
 800bf14:	690b      	ldr	r3, [r1, #16]
 800bf16:	460c      	mov	r4, r1
 800bf18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	bfb8      	it	lt
 800bf20:	4613      	movlt	r3, r2
 800bf22:	6033      	str	r3, [r6, #0]
 800bf24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf28:	b10a      	cbz	r2, 800bf2e <_printf_common+0x26>
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	6033      	str	r3, [r6, #0]
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	0699      	lsls	r1, r3, #26
 800bf32:	bf42      	ittt	mi
 800bf34:	6833      	ldrmi	r3, [r6, #0]
 800bf36:	3302      	addmi	r3, #2
 800bf38:	6033      	strmi	r3, [r6, #0]
 800bf3a:	6825      	ldr	r5, [r4, #0]
 800bf3c:	f015 0506 	ands.w	r5, r5, #6
 800bf40:	d106      	bne.n	800bf50 <_printf_common+0x48>
 800bf42:	f104 0a19 	add.w	sl, r4, #25
 800bf46:	68e3      	ldr	r3, [r4, #12]
 800bf48:	6832      	ldr	r2, [r6, #0]
 800bf4a:	1a9b      	subs	r3, r3, r2
 800bf4c:	42ab      	cmp	r3, r5
 800bf4e:	dc29      	bgt.n	800bfa4 <_printf_common+0x9c>
 800bf50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf54:	1e13      	subs	r3, r2, #0
 800bf56:	6822      	ldr	r2, [r4, #0]
 800bf58:	bf18      	it	ne
 800bf5a:	2301      	movne	r3, #1
 800bf5c:	0692      	lsls	r2, r2, #26
 800bf5e:	d42e      	bmi.n	800bfbe <_printf_common+0xb6>
 800bf60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf64:	4649      	mov	r1, r9
 800bf66:	4638      	mov	r0, r7
 800bf68:	47c0      	blx	r8
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	d021      	beq.n	800bfb2 <_printf_common+0xaa>
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	341a      	adds	r4, #26
 800bf72:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800bf76:	f003 0306 	and.w	r3, r3, #6
 800bf7a:	6832      	ldr	r2, [r6, #0]
 800bf7c:	2600      	movs	r6, #0
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bf84:	bf08      	it	eq
 800bf86:	1aad      	subeq	r5, r5, r2
 800bf88:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800bf8c:	bf14      	ite	ne
 800bf8e:	2500      	movne	r5, #0
 800bf90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf94:	4293      	cmp	r3, r2
 800bf96:	bfc4      	itt	gt
 800bf98:	1a9b      	subgt	r3, r3, r2
 800bf9a:	18ed      	addgt	r5, r5, r3
 800bf9c:	42b5      	cmp	r5, r6
 800bf9e:	d11a      	bne.n	800bfd6 <_printf_common+0xce>
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	e008      	b.n	800bfb6 <_printf_common+0xae>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	4652      	mov	r2, sl
 800bfa8:	4649      	mov	r1, r9
 800bfaa:	4638      	mov	r0, r7
 800bfac:	47c0      	blx	r8
 800bfae:	3001      	adds	r0, #1
 800bfb0:	d103      	bne.n	800bfba <_printf_common+0xb2>
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfba:	3501      	adds	r5, #1
 800bfbc:	e7c3      	b.n	800bf46 <_printf_common+0x3e>
 800bfbe:	18e1      	adds	r1, r4, r3
 800bfc0:	1c5a      	adds	r2, r3, #1
 800bfc2:	2030      	movs	r0, #48	; 0x30
 800bfc4:	3302      	adds	r3, #2
 800bfc6:	4422      	add	r2, r4
 800bfc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfd4:	e7c4      	b.n	800bf60 <_printf_common+0x58>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	4622      	mov	r2, r4
 800bfda:	4649      	mov	r1, r9
 800bfdc:	4638      	mov	r0, r7
 800bfde:	47c0      	blx	r8
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	d0e6      	beq.n	800bfb2 <_printf_common+0xaa>
 800bfe4:	3601      	adds	r6, #1
 800bfe6:	e7d9      	b.n	800bf9c <_printf_common+0x94>

0800bfe8 <_printf_i>:
 800bfe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfec:	460c      	mov	r4, r1
 800bfee:	4691      	mov	r9, r2
 800bff0:	4680      	mov	r8, r0
 800bff2:	469a      	mov	sl, r3
 800bff4:	7e27      	ldrb	r7, [r4, #24]
 800bff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bffa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bffc:	2f78      	cmp	r7, #120	; 0x78
 800bffe:	d807      	bhi.n	800c010 <_printf_i+0x28>
 800c000:	2f62      	cmp	r7, #98	; 0x62
 800c002:	d80a      	bhi.n	800c01a <_printf_i+0x32>
 800c004:	2f00      	cmp	r7, #0
 800c006:	f000 80d8 	beq.w	800c1ba <_printf_i+0x1d2>
 800c00a:	2f58      	cmp	r7, #88	; 0x58
 800c00c:	f000 80a3 	beq.w	800c156 <_printf_i+0x16e>
 800c010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c018:	e03a      	b.n	800c090 <_printf_i+0xa8>
 800c01a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c01e:	2b15      	cmp	r3, #21
 800c020:	d8f6      	bhi.n	800c010 <_printf_i+0x28>
 800c022:	a001      	add	r0, pc, #4	; (adr r0, 800c028 <_printf_i+0x40>)
 800c024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c028:	0800c081 	.word	0x0800c081
 800c02c:	0800c095 	.word	0x0800c095
 800c030:	0800c011 	.word	0x0800c011
 800c034:	0800c011 	.word	0x0800c011
 800c038:	0800c011 	.word	0x0800c011
 800c03c:	0800c011 	.word	0x0800c011
 800c040:	0800c095 	.word	0x0800c095
 800c044:	0800c011 	.word	0x0800c011
 800c048:	0800c011 	.word	0x0800c011
 800c04c:	0800c011 	.word	0x0800c011
 800c050:	0800c011 	.word	0x0800c011
 800c054:	0800c1a1 	.word	0x0800c1a1
 800c058:	0800c0c5 	.word	0x0800c0c5
 800c05c:	0800c183 	.word	0x0800c183
 800c060:	0800c011 	.word	0x0800c011
 800c064:	0800c011 	.word	0x0800c011
 800c068:	0800c1c3 	.word	0x0800c1c3
 800c06c:	0800c011 	.word	0x0800c011
 800c070:	0800c0c5 	.word	0x0800c0c5
 800c074:	0800c011 	.word	0x0800c011
 800c078:	0800c011 	.word	0x0800c011
 800c07c:	0800c18b 	.word	0x0800c18b
 800c080:	680b      	ldr	r3, [r1, #0]
 800c082:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c086:	1d1a      	adds	r2, r3, #4
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	600a      	str	r2, [r1, #0]
 800c08c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c090:	2301      	movs	r3, #1
 800c092:	e0a3      	b.n	800c1dc <_printf_i+0x1f4>
 800c094:	6825      	ldr	r5, [r4, #0]
 800c096:	6808      	ldr	r0, [r1, #0]
 800c098:	062e      	lsls	r6, r5, #24
 800c09a:	f100 0304 	add.w	r3, r0, #4
 800c09e:	d50a      	bpl.n	800c0b6 <_printf_i+0xce>
 800c0a0:	6805      	ldr	r5, [r0, #0]
 800c0a2:	600b      	str	r3, [r1, #0]
 800c0a4:	2d00      	cmp	r5, #0
 800c0a6:	da03      	bge.n	800c0b0 <_printf_i+0xc8>
 800c0a8:	232d      	movs	r3, #45	; 0x2d
 800c0aa:	426d      	negs	r5, r5
 800c0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0b0:	485e      	ldr	r0, [pc, #376]	; (800c22c <_printf_i+0x244>)
 800c0b2:	230a      	movs	r3, #10
 800c0b4:	e019      	b.n	800c0ea <_printf_i+0x102>
 800c0b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c0ba:	6805      	ldr	r5, [r0, #0]
 800c0bc:	600b      	str	r3, [r1, #0]
 800c0be:	bf18      	it	ne
 800c0c0:	b22d      	sxthne	r5, r5
 800c0c2:	e7ef      	b.n	800c0a4 <_printf_i+0xbc>
 800c0c4:	680b      	ldr	r3, [r1, #0]
 800c0c6:	6825      	ldr	r5, [r4, #0]
 800c0c8:	1d18      	adds	r0, r3, #4
 800c0ca:	6008      	str	r0, [r1, #0]
 800c0cc:	0628      	lsls	r0, r5, #24
 800c0ce:	d501      	bpl.n	800c0d4 <_printf_i+0xec>
 800c0d0:	681d      	ldr	r5, [r3, #0]
 800c0d2:	e002      	b.n	800c0da <_printf_i+0xf2>
 800c0d4:	0669      	lsls	r1, r5, #25
 800c0d6:	d5fb      	bpl.n	800c0d0 <_printf_i+0xe8>
 800c0d8:	881d      	ldrh	r5, [r3, #0]
 800c0da:	2f6f      	cmp	r7, #111	; 0x6f
 800c0dc:	4853      	ldr	r0, [pc, #332]	; (800c22c <_printf_i+0x244>)
 800c0de:	bf0c      	ite	eq
 800c0e0:	2308      	moveq	r3, #8
 800c0e2:	230a      	movne	r3, #10
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0ea:	6866      	ldr	r6, [r4, #4]
 800c0ec:	2e00      	cmp	r6, #0
 800c0ee:	60a6      	str	r6, [r4, #8]
 800c0f0:	bfa2      	ittt	ge
 800c0f2:	6821      	ldrge	r1, [r4, #0]
 800c0f4:	f021 0104 	bicge.w	r1, r1, #4
 800c0f8:	6021      	strge	r1, [r4, #0]
 800c0fa:	b90d      	cbnz	r5, 800c100 <_printf_i+0x118>
 800c0fc:	2e00      	cmp	r6, #0
 800c0fe:	d04d      	beq.n	800c19c <_printf_i+0x1b4>
 800c100:	4616      	mov	r6, r2
 800c102:	fbb5 f1f3 	udiv	r1, r5, r3
 800c106:	fb03 5711 	mls	r7, r3, r1, r5
 800c10a:	5dc7      	ldrb	r7, [r0, r7]
 800c10c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c110:	462f      	mov	r7, r5
 800c112:	460d      	mov	r5, r1
 800c114:	42bb      	cmp	r3, r7
 800c116:	d9f4      	bls.n	800c102 <_printf_i+0x11a>
 800c118:	2b08      	cmp	r3, #8
 800c11a:	d10b      	bne.n	800c134 <_printf_i+0x14c>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	07df      	lsls	r7, r3, #31
 800c120:	d508      	bpl.n	800c134 <_printf_i+0x14c>
 800c122:	6923      	ldr	r3, [r4, #16]
 800c124:	6861      	ldr	r1, [r4, #4]
 800c126:	4299      	cmp	r1, r3
 800c128:	bfde      	ittt	le
 800c12a:	2330      	movle	r3, #48	; 0x30
 800c12c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c130:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c134:	1b92      	subs	r2, r2, r6
 800c136:	6122      	str	r2, [r4, #16]
 800c138:	464b      	mov	r3, r9
 800c13a:	aa03      	add	r2, sp, #12
 800c13c:	4621      	mov	r1, r4
 800c13e:	4640      	mov	r0, r8
 800c140:	f8cd a000 	str.w	sl, [sp]
 800c144:	f7ff fee0 	bl	800bf08 <_printf_common>
 800c148:	3001      	adds	r0, #1
 800c14a:	d14c      	bne.n	800c1e6 <_printf_i+0x1fe>
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295
 800c150:	b004      	add	sp, #16
 800c152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c156:	4835      	ldr	r0, [pc, #212]	; (800c22c <_printf_i+0x244>)
 800c158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	680e      	ldr	r6, [r1, #0]
 800c160:	061f      	lsls	r7, r3, #24
 800c162:	f856 5b04 	ldr.w	r5, [r6], #4
 800c166:	600e      	str	r6, [r1, #0]
 800c168:	d514      	bpl.n	800c194 <_printf_i+0x1ac>
 800c16a:	07d9      	lsls	r1, r3, #31
 800c16c:	bf44      	itt	mi
 800c16e:	f043 0320 	orrmi.w	r3, r3, #32
 800c172:	6023      	strmi	r3, [r4, #0]
 800c174:	b91d      	cbnz	r5, 800c17e <_printf_i+0x196>
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	f023 0320 	bic.w	r3, r3, #32
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	2310      	movs	r3, #16
 800c180:	e7b0      	b.n	800c0e4 <_printf_i+0xfc>
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	f043 0320 	orr.w	r3, r3, #32
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	2378      	movs	r3, #120	; 0x78
 800c18c:	4828      	ldr	r0, [pc, #160]	; (800c230 <_printf_i+0x248>)
 800c18e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c192:	e7e3      	b.n	800c15c <_printf_i+0x174>
 800c194:	065e      	lsls	r6, r3, #25
 800c196:	bf48      	it	mi
 800c198:	b2ad      	uxthmi	r5, r5
 800c19a:	e7e6      	b.n	800c16a <_printf_i+0x182>
 800c19c:	4616      	mov	r6, r2
 800c19e:	e7bb      	b.n	800c118 <_printf_i+0x130>
 800c1a0:	680b      	ldr	r3, [r1, #0]
 800c1a2:	6826      	ldr	r6, [r4, #0]
 800c1a4:	1d1d      	adds	r5, r3, #4
 800c1a6:	6960      	ldr	r0, [r4, #20]
 800c1a8:	600d      	str	r5, [r1, #0]
 800c1aa:	0635      	lsls	r5, r6, #24
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	d501      	bpl.n	800c1b4 <_printf_i+0x1cc>
 800c1b0:	6018      	str	r0, [r3, #0]
 800c1b2:	e002      	b.n	800c1ba <_printf_i+0x1d2>
 800c1b4:	0671      	lsls	r1, r6, #25
 800c1b6:	d5fb      	bpl.n	800c1b0 <_printf_i+0x1c8>
 800c1b8:	8018      	strh	r0, [r3, #0]
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4616      	mov	r6, r2
 800c1be:	6123      	str	r3, [r4, #16]
 800c1c0:	e7ba      	b.n	800c138 <_printf_i+0x150>
 800c1c2:	680b      	ldr	r3, [r1, #0]
 800c1c4:	1d1a      	adds	r2, r3, #4
 800c1c6:	600a      	str	r2, [r1, #0]
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	681e      	ldr	r6, [r3, #0]
 800c1cc:	6862      	ldr	r2, [r4, #4]
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f000 f832 	bl	800c238 <memchr>
 800c1d4:	b108      	cbz	r0, 800c1da <_printf_i+0x1f2>
 800c1d6:	1b80      	subs	r0, r0, r6
 800c1d8:	6060      	str	r0, [r4, #4]
 800c1da:	6863      	ldr	r3, [r4, #4]
 800c1dc:	6123      	str	r3, [r4, #16]
 800c1de:	2300      	movs	r3, #0
 800c1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1e4:	e7a8      	b.n	800c138 <_printf_i+0x150>
 800c1e6:	6923      	ldr	r3, [r4, #16]
 800c1e8:	4632      	mov	r2, r6
 800c1ea:	4649      	mov	r1, r9
 800c1ec:	4640      	mov	r0, r8
 800c1ee:	47d0      	blx	sl
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	d0ab      	beq.n	800c14c <_printf_i+0x164>
 800c1f4:	6823      	ldr	r3, [r4, #0]
 800c1f6:	079b      	lsls	r3, r3, #30
 800c1f8:	d413      	bmi.n	800c222 <_printf_i+0x23a>
 800c1fa:	68e0      	ldr	r0, [r4, #12]
 800c1fc:	9b03      	ldr	r3, [sp, #12]
 800c1fe:	4298      	cmp	r0, r3
 800c200:	bfb8      	it	lt
 800c202:	4618      	movlt	r0, r3
 800c204:	e7a4      	b.n	800c150 <_printf_i+0x168>
 800c206:	2301      	movs	r3, #1
 800c208:	4632      	mov	r2, r6
 800c20a:	4649      	mov	r1, r9
 800c20c:	4640      	mov	r0, r8
 800c20e:	47d0      	blx	sl
 800c210:	3001      	adds	r0, #1
 800c212:	d09b      	beq.n	800c14c <_printf_i+0x164>
 800c214:	3501      	adds	r5, #1
 800c216:	68e3      	ldr	r3, [r4, #12]
 800c218:	9903      	ldr	r1, [sp, #12]
 800c21a:	1a5b      	subs	r3, r3, r1
 800c21c:	42ab      	cmp	r3, r5
 800c21e:	dcf2      	bgt.n	800c206 <_printf_i+0x21e>
 800c220:	e7eb      	b.n	800c1fa <_printf_i+0x212>
 800c222:	2500      	movs	r5, #0
 800c224:	f104 0619 	add.w	r6, r4, #25
 800c228:	e7f5      	b.n	800c216 <_printf_i+0x22e>
 800c22a:	bf00      	nop
 800c22c:	0800c491 	.word	0x0800c491
 800c230:	0800c4a2 	.word	0x0800c4a2

0800c234 <__retarget_lock_acquire_recursive>:
 800c234:	4770      	bx	lr

0800c236 <__retarget_lock_release_recursive>:
 800c236:	4770      	bx	lr

0800c238 <memchr>:
 800c238:	b2c9      	uxtb	r1, r1
 800c23a:	4402      	add	r2, r0
 800c23c:	b510      	push	{r4, lr}
 800c23e:	4290      	cmp	r0, r2
 800c240:	4603      	mov	r3, r0
 800c242:	d101      	bne.n	800c248 <memchr+0x10>
 800c244:	2300      	movs	r3, #0
 800c246:	e003      	b.n	800c250 <memchr+0x18>
 800c248:	781c      	ldrb	r4, [r3, #0]
 800c24a:	3001      	adds	r0, #1
 800c24c:	428c      	cmp	r4, r1
 800c24e:	d1f6      	bne.n	800c23e <memchr+0x6>
 800c250:	4618      	mov	r0, r3
 800c252:	bd10      	pop	{r4, pc}

0800c254 <memmove>:
 800c254:	4288      	cmp	r0, r1
 800c256:	b510      	push	{r4, lr}
 800c258:	eb01 0402 	add.w	r4, r1, r2
 800c25c:	d902      	bls.n	800c264 <memmove+0x10>
 800c25e:	4284      	cmp	r4, r0
 800c260:	4623      	mov	r3, r4
 800c262:	d807      	bhi.n	800c274 <memmove+0x20>
 800c264:	1e43      	subs	r3, r0, #1
 800c266:	42a1      	cmp	r1, r4
 800c268:	d008      	beq.n	800c27c <memmove+0x28>
 800c26a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c26e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c272:	e7f8      	b.n	800c266 <memmove+0x12>
 800c274:	4402      	add	r2, r0
 800c276:	4601      	mov	r1, r0
 800c278:	428a      	cmp	r2, r1
 800c27a:	d100      	bne.n	800c27e <memmove+0x2a>
 800c27c:	bd10      	pop	{r4, pc}
 800c27e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c286:	e7f7      	b.n	800c278 <memmove+0x24>

0800c288 <_realloc_r>:
 800c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28a:	4607      	mov	r7, r0
 800c28c:	4614      	mov	r4, r2
 800c28e:	460e      	mov	r6, r1
 800c290:	b921      	cbnz	r1, 800c29c <_realloc_r+0x14>
 800c292:	4611      	mov	r1, r2
 800c294:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c298:	f7ff bc30 	b.w	800bafc <_malloc_r>
 800c29c:	b922      	cbnz	r2, 800c2a8 <_realloc_r+0x20>
 800c29e:	4625      	mov	r5, r4
 800c2a0:	f7ff fbdc 	bl	800ba5c <_free_r>
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a8:	f000 f814 	bl	800c2d4 <_malloc_usable_size_r>
 800c2ac:	42a0      	cmp	r0, r4
 800c2ae:	d20f      	bcs.n	800c2d0 <_realloc_r+0x48>
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	f7ff fc22 	bl	800bafc <_malloc_r>
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d0f2      	beq.n	800c2a4 <_realloc_r+0x1c>
 800c2be:	4631      	mov	r1, r6
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	f7ff fbb5 	bl	800ba30 <memcpy>
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	4638      	mov	r0, r7
 800c2ca:	f7ff fbc7 	bl	800ba5c <_free_r>
 800c2ce:	e7e9      	b.n	800c2a4 <_realloc_r+0x1c>
 800c2d0:	4635      	mov	r5, r6
 800c2d2:	e7e7      	b.n	800c2a4 <_realloc_r+0x1c>

0800c2d4 <_malloc_usable_size_r>:
 800c2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2d8:	1f18      	subs	r0, r3, #4
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	bfbc      	itt	lt
 800c2de:	580b      	ldrlt	r3, [r1, r0]
 800c2e0:	18c0      	addlt	r0, r0, r3
 800c2e2:	4770      	bx	lr

0800c2e4 <_init>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	bf00      	nop
 800c2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ea:	bc08      	pop	{r3}
 800c2ec:	469e      	mov	lr, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_fini>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr
