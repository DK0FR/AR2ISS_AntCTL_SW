
AR2ISS_AntCTL_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800abb8  0800abb8  0001abb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad60  0800ad60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad60  0800ad60  0001ad60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad68  0800ad68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad68  0800ad68  0001ad68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad6c  0800ad6c  0001ad6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ad70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005114  20000010  0800ad80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005124  0800ad80  00025124  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030da4  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a4d  00000000  00000000  00050dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024e0  00000000  00000000  00056838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002268  00000000  00000000  00058d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032108  00000000  00000000  0005af80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b6e9  00000000  00000000  0008d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012be73  00000000  00000000  000b8771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e45e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a60  00000000  00000000  001e4638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aba0 	.word	0x0800aba0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	0800aba0 	.word	0x0800aba0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b980 	b.w	8000558 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8084 	bne.w	8000388 <__udivmoddi4+0x118>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d943      	bls.n	800030e <__udivmoddi4+0x9e>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	4091      	lsls	r1, r2
 8000292:	4097      	lsls	r7, r2
 8000294:	fa24 f000 	lsr.w	r0, r4, r0
 8000298:	4094      	lsls	r4, r2
 800029a:	ea40 0801 	orr.w	r8, r0, r1
 800029e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fa1f fe87 	uxth.w	lr, r7
 80002a8:	fbb8 f6fc 	udiv	r6, r8, ip
 80002ac:	fb0c 8116 	mls	r1, ip, r6, r8
 80002b0:	fb06 f00e 	mul.w	r0, r6, lr
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	4298      	cmp	r0, r3
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0x5c>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 31ff 	add.w	r1, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x5a>
 80002c4:	4298      	cmp	r0, r3
 80002c6:	f200 8131 	bhi.w	800052c <__udivmoddi4+0x2bc>
 80002ca:	460e      	mov	r6, r1
 80002cc:	1a19      	subs	r1, r3, r0
 80002ce:	b2a3      	uxth	r3, r4
 80002d0:	fbb1 f0fc 	udiv	r0, r1, ip
 80002d4:	fb0c 1110 	mls	r1, ip, r0, r1
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0x84>
 80002e4:	193c      	adds	r4, r7, r4
 80002e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x82>
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	f200 811a 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80002f2:	4618      	mov	r0, r3
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0x98>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xa2>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d152      	bne.n	80003c0 <__udivmoddi4+0x150>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	0c21      	lsrs	r1, r4, #16
 8000328:	fbb3 fcfe 	udiv	ip, r3, lr
 800032c:	fb0e 301c 	mls	r0, lr, ip, r3
 8000330:	fb08 f90c 	mul.w	r9, r8, ip
 8000334:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000338:	4589      	cmp	r9, r1
 800033a:	d90b      	bls.n	8000354 <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000342:	bf2c      	ite	cs
 8000344:	2001      	movcs	r0, #1
 8000346:	2000      	movcc	r0, #0
 8000348:	4589      	cmp	r9, r1
 800034a:	d902      	bls.n	8000352 <__udivmoddi4+0xe2>
 800034c:	2800      	cmp	r0, #0
 800034e:	f000 80f0 	beq.w	8000532 <__udivmoddi4+0x2c2>
 8000352:	469c      	mov	ip, r3
 8000354:	eba1 0109 	sub.w	r1, r1, r9
 8000358:	b2a3      	uxth	r3, r4
 800035a:	fbb1 f0fe 	udiv	r0, r1, lr
 800035e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000362:	fb08 f800 	mul.w	r8, r8, r0
 8000366:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036a:	45a0      	cmp	r8, r4
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x10e>
 800036e:	193c      	adds	r4, r7, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x10c>
 8000376:	45a0      	cmp	r8, r4
 8000378:	f200 80d2 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 800037c:	4618      	mov	r0, r3
 800037e:	eba4 0408 	sub.w	r4, r4, r8
 8000382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000386:	e7ba      	b.n	80002fe <__udivmoddi4+0x8e>
 8000388:	428b      	cmp	r3, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x130>
 800038c:	2d00      	cmp	r5, #0
 800038e:	f000 80be 	beq.w	800050e <__udivmoddi4+0x29e>
 8000392:	2600      	movs	r6, #0
 8000394:	e9c5 0100 	strd	r0, r1, [r5]
 8000398:	4630      	mov	r0, r6
 800039a:	4631      	mov	r1, r6
 800039c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003a0:	fab3 f683 	clz	r6, r3
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d14d      	bne.n	8000444 <__udivmoddi4+0x1d4>
 80003a8:	428b      	cmp	r3, r1
 80003aa:	f0c0 80b3 	bcc.w	8000514 <__udivmoddi4+0x2a4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f240 80b0 	bls.w	8000514 <__udivmoddi4+0x2a4>
 80003b4:	4630      	mov	r0, r6
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0a6      	beq.n	8000308 <__udivmoddi4+0x98>
 80003ba:	e9c5 4800 	strd	r4, r8, [r5]
 80003be:	e7a3      	b.n	8000308 <__udivmoddi4+0x98>
 80003c0:	4097      	lsls	r7, r2
 80003c2:	f1c2 0320 	rsb	r3, r2, #32
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	fa24 f303 	lsr.w	r3, r4, r3
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	4094      	lsls	r4, r2
 80003da:	4303      	orrs	r3, r0
 80003dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e0:	0c1e      	lsrs	r6, r3, #16
 80003e2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ea:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80003ee:	458c      	cmp	ip, r1
 80003f0:	d90e      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003f2:	1879      	adds	r1, r7, r1
 80003f4:	f100 36ff 	add.w	r6, r0, #4294967295
 80003f8:	bf2c      	ite	cs
 80003fa:	f04f 0901 	movcs.w	r9, #1
 80003fe:	f04f 0900 	movcc.w	r9, #0
 8000402:	458c      	cmp	ip, r1
 8000404:	d903      	bls.n	800040e <__udivmoddi4+0x19e>
 8000406:	f1b9 0f00 	cmp.w	r9, #0
 800040a:	f000 8096 	beq.w	800053a <__udivmoddi4+0x2ca>
 800040e:	4630      	mov	r0, r6
 8000410:	eba1 010c 	sub.w	r1, r1, ip
 8000414:	b29b      	uxth	r3, r3
 8000416:	fbb1 f6fe 	udiv	r6, r1, lr
 800041a:	fb0e 1116 	mls	r1, lr, r6, r1
 800041e:	fb06 fc08 	mul.w	ip, r6, r8
 8000422:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000426:	458c      	cmp	ip, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1ca>
 800042a:	1879      	adds	r1, r7, r1
 800042c:	f106 33ff 	add.w	r3, r6, #4294967295
 8000430:	d202      	bcs.n	8000438 <__udivmoddi4+0x1c8>
 8000432:	458c      	cmp	ip, r1
 8000434:	f200 8088 	bhi.w	8000548 <__udivmoddi4+0x2d8>
 8000438:	461e      	mov	r6, r3
 800043a:	eba1 030c 	sub.w	r3, r1, ip
 800043e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000442:	e770      	b.n	8000326 <__udivmoddi4+0xb6>
 8000444:	f1c6 0720 	rsb	r7, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa02 fc06 	lsl.w	ip, r2, r6
 8000450:	fa01 fe06 	lsl.w	lr, r1, r6
 8000454:	40fa      	lsrs	r2, r7
 8000456:	fa20 f807 	lsr.w	r8, r0, r7
 800045a:	40f9      	lsrs	r1, r7
 800045c:	fa00 f306 	lsl.w	r3, r0, r6
 8000460:	4322      	orrs	r2, r4
 8000462:	ea48 040e 	orr.w	r4, r8, lr
 8000466:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800046a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800046e:	fa1f f982 	uxth.w	r9, r2
 8000472:	fbb1 faf8 	udiv	sl, r1, r8
 8000476:	fb08 111a 	mls	r1, r8, sl, r1
 800047a:	fb0a f009 	mul.w	r0, sl, r9
 800047e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000482:	4570      	cmp	r0, lr
 8000484:	d90e      	bls.n	80004a4 <__udivmoddi4+0x234>
 8000486:	eb12 0e0e 	adds.w	lr, r2, lr
 800048a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800048e:	bf2c      	ite	cs
 8000490:	f04f 0b01 	movcs.w	fp, #1
 8000494:	f04f 0b00 	movcc.w	fp, #0
 8000498:	4570      	cmp	r0, lr
 800049a:	d902      	bls.n	80004a2 <__udivmoddi4+0x232>
 800049c:	f1bb 0f00 	cmp.w	fp, #0
 80004a0:	d04e      	beq.n	8000540 <__udivmoddi4+0x2d0>
 80004a2:	468a      	mov	sl, r1
 80004a4:	ebae 0e00 	sub.w	lr, lr, r0
 80004a8:	b2a4      	uxth	r4, r4
 80004aa:	fbbe f0f8 	udiv	r0, lr, r8
 80004ae:	fb08 ee10 	mls	lr, r8, r0, lr
 80004b2:	fb00 f909 	mul.w	r9, r0, r9
 80004b6:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004ba:	45f1      	cmp	r9, lr
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x25e>
 80004be:	eb12 0e0e 	adds.w	lr, r2, lr
 80004c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80004c6:	d201      	bcs.n	80004cc <__udivmoddi4+0x25c>
 80004c8:	45f1      	cmp	r9, lr
 80004ca:	d840      	bhi.n	800054e <__udivmoddi4+0x2de>
 80004cc:	4608      	mov	r0, r1
 80004ce:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80004d2:	ebae 0e09 	sub.w	lr, lr, r9
 80004d6:	fba0 890c 	umull	r8, r9, r0, ip
 80004da:	45ce      	cmp	lr, r9
 80004dc:	4641      	mov	r1, r8
 80004de:	464c      	mov	r4, r9
 80004e0:	d302      	bcc.n	80004e8 <__udivmoddi4+0x278>
 80004e2:	d106      	bne.n	80004f2 <__udivmoddi4+0x282>
 80004e4:	4543      	cmp	r3, r8
 80004e6:	d204      	bcs.n	80004f2 <__udivmoddi4+0x282>
 80004e8:	3801      	subs	r0, #1
 80004ea:	ebb8 010c 	subs.w	r1, r8, ip
 80004ee:	eb69 0402 	sbc.w	r4, r9, r2
 80004f2:	b37d      	cbz	r5, 8000554 <__udivmoddi4+0x2e4>
 80004f4:	1a5a      	subs	r2, r3, r1
 80004f6:	eb6e 0e04 	sbc.w	lr, lr, r4
 80004fa:	40f2      	lsrs	r2, r6
 80004fc:	fa0e f707 	lsl.w	r7, lr, r7
 8000500:	fa2e f306 	lsr.w	r3, lr, r6
 8000504:	2600      	movs	r6, #0
 8000506:	4317      	orrs	r7, r2
 8000508:	e9c5 7300 	strd	r7, r3, [r5]
 800050c:	e6fc      	b.n	8000308 <__udivmoddi4+0x98>
 800050e:	462e      	mov	r6, r5
 8000510:	4628      	mov	r0, r5
 8000512:	e6f9      	b.n	8000308 <__udivmoddi4+0x98>
 8000514:	1a84      	subs	r4, r0, r2
 8000516:	eb61 0103 	sbc.w	r1, r1, r3
 800051a:	2001      	movs	r0, #1
 800051c:	4688      	mov	r8, r1
 800051e:	e74a      	b.n	80003b6 <__udivmoddi4+0x146>
 8000520:	3802      	subs	r0, #2
 8000522:	443c      	add	r4, r7
 8000524:	e72b      	b.n	800037e <__udivmoddi4+0x10e>
 8000526:	3802      	subs	r0, #2
 8000528:	443c      	add	r4, r7
 800052a:	e6e3      	b.n	80002f4 <__udivmoddi4+0x84>
 800052c:	3e02      	subs	r6, #2
 800052e:	443b      	add	r3, r7
 8000530:	e6cc      	b.n	80002cc <__udivmoddi4+0x5c>
 8000532:	f1ac 0c02 	sub.w	ip, ip, #2
 8000536:	4439      	add	r1, r7
 8000538:	e70c      	b.n	8000354 <__udivmoddi4+0xe4>
 800053a:	3802      	subs	r0, #2
 800053c:	4439      	add	r1, r7
 800053e:	e767      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000540:	f1aa 0a02 	sub.w	sl, sl, #2
 8000544:	4496      	add	lr, r2
 8000546:	e7ad      	b.n	80004a4 <__udivmoddi4+0x234>
 8000548:	3e02      	subs	r6, #2
 800054a:	4439      	add	r1, r7
 800054c:	e775      	b.n	800043a <__udivmoddi4+0x1ca>
 800054e:	3802      	subs	r0, #2
 8000550:	4496      	add	lr, r2
 8000552:	e7bc      	b.n	80004ce <__udivmoddi4+0x25e>
 8000554:	462e      	mov	r6, r5
 8000556:	e6d7      	b.n	8000308 <__udivmoddi4+0x98>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800057e:	4b2f      	ldr	r3, [pc, #188]	; (800063c <MX_ADC1_Init+0xe0>)
 8000580:	4a2f      	ldr	r2, [pc, #188]	; (8000640 <MX_ADC1_Init+0xe4>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000584:	4b2d      	ldr	r3, [pc, #180]	; (800063c <MX_ADC1_Init+0xe0>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058a:	4b2c      	ldr	r3, [pc, #176]	; (800063c <MX_ADC1_Init+0xe0>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b2a      	ldr	r3, [pc, #168]	; (800063c <MX_ADC1_Init+0xe0>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <MX_ADC1_Init+0xe0>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <MX_ADC1_Init+0xe0>)
 800059e:	2204      	movs	r2, #4
 80005a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <MX_ADC1_Init+0xe0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <MX_ADC1_Init+0xe0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_ADC1_Init+0xe0>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0xe0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <MX_ADC1_Init+0xe0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0xe0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <MX_ADC1_Init+0xe0>)
 80005e0:	f001 fb36 	bl	8001c50 <HAL_ADC_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005ea:	f000 fbc1 	bl	8000d70 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	4810      	ldr	r0, [pc, #64]	; (800063c <MX_ADC1_Init+0xe0>)
 80005fa:	f002 f88b 	bl	8002714 <HAL_ADCEx_MultiModeConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000604:	f000 fbb4 	bl	8000d70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_ADC1_Init+0xe8>)
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060c:	2306      	movs	r3, #6
 800060e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000614:	237f      	movs	r3, #127	; 0x7f
 8000616:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000618:	2304      	movs	r3, #4
 800061a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0xe0>)
 8000626:	f001 fc65 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000630:	f000 fb9e 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20004d44 	.word	0x20004d44
 8000640:	42028000 	.word	0x42028000
 8000644:	14f00020 	.word	0x14f00020

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b0ae      	sub	sp, #184	; 0xb8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2294      	movs	r2, #148	; 0x94
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f00a fa90 	bl	800ab8e <memset>
  if(adcHandle->Instance==ADC1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a27      	ldr	r2, [pc, #156]	; (8000710 <HAL_ADC_MspInit+0xc8>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d146      	bne.n	8000706 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000678:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800067c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800067e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSE;
 8000686:	2303      	movs	r3, #3
 8000688:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800068e:	2308      	movs	r3, #8
 8000690:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000692:	2307      	movs	r3, #7
 8000694:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800069e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 fe9d 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006b4:	f000 fb5c 	bl	8000d70 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_ADC_MspInit+0xcc>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80006e8:	233b      	movs	r3, #59	; 0x3b
 80006ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <HAL_ADC_MspInit+0xd0>)
 8000702:	f002 fd79 	bl	80031f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	37b8      	adds	r7, #184	; 0xb8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	42028000 	.word	0x42028000
 8000714:	40021000 	.word	0x40021000
 8000718:	42020000 	.word	0x42020000

0800071c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	xQueueUART3RX = xQueueCreate(3,UARTRXBUFFERSIZE*sizeof(uint8_t));
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000746:	2003      	movs	r0, #3
 8000748:	f008 f886 	bl	8008858 <xQueueGenericCreate>
 800074c:	4603      	mov	r3, r0
 800074e:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <MX_FREERTOS_Init+0x94>)
 8000750:	6013      	str	r3, [r2, #0]
	xQueueUART3TX = xQueueCreate(10,sizeof(UartTXStruct));
 8000752:	2200      	movs	r2, #0
 8000754:	2108      	movs	r1, #8
 8000756:	200a      	movs	r0, #10
 8000758:	f008 f87e 	bl	8008858 <xQueueGenericCreate>
 800075c:	4603      	mov	r3, r0
 800075e:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <MX_FREERTOS_Init+0x98>)
 8000760:	6013      	str	r3, [r2, #0]

	vQueueAddToRegistry(xQueueUART3RX, (const char*) "Q_UART3RX");
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_FREERTOS_Init+0x94>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	491c      	ldr	r1, [pc, #112]	; (80007d8 <MX_FREERTOS_Init+0x9c>)
 8000768:	4618      	mov	r0, r3
 800076a:	f008 fbcd 	bl	8008f08 <vQueueAddToRegistry>
	vQueueAddToRegistry(xQueueUART3TX, (const char*) "Q_UART3TX");
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_FREERTOS_Init+0x98>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	491a      	ldr	r1, [pc, #104]	; (80007dc <MX_FREERTOS_Init+0xa0>)
 8000774:	4618      	mov	r0, r3
 8000776:	f008 fbc7 	bl	8008f08 <vQueueAddToRegistry>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <MX_FREERTOS_Init+0xa4>)
 800077c:	2100      	movs	r1, #0
 800077e:	4819      	ldr	r0, [pc, #100]	; (80007e4 <MX_FREERTOS_Init+0xa8>)
 8000780:	f007 fe2c 	bl	80083dc <osThreadNew>
 8000784:	4603      	mov	r3, r0
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_FREERTOS_Init+0xac>)
 8000788:	6013      	str	r3, [r2, #0]

  /* creation of uartRxTask */
  uartRxTaskHandle = osThreadNew(uartRx, NULL, &uartRxTask_attributes);
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <MX_FREERTOS_Init+0xb0>)
 800078c:	2100      	movs	r1, #0
 800078e:	4818      	ldr	r0, [pc, #96]	; (80007f0 <MX_FREERTOS_Init+0xb4>)
 8000790:	f007 fe24 	bl	80083dc <osThreadNew>
 8000794:	4603      	mov	r3, r0
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <MX_FREERTOS_Init+0xb8>)
 8000798:	6013      	str	r3, [r2, #0]

  /* creation of uartTxTask */
  uartTxTaskHandle = osThreadNew(uartTx, NULL, &uartTxTask_attributes);
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <MX_FREERTOS_Init+0xbc>)
 800079c:	2100      	movs	r1, #0
 800079e:	4817      	ldr	r0, [pc, #92]	; (80007fc <MX_FREERTOS_Init+0xc0>)
 80007a0:	f007 fe1c 	bl	80083dc <osThreadNew>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <MX_FREERTOS_Init+0xc4>)
 80007a8:	6013      	str	r3, [r2, #0]

  /* creation of rotorControlTas */
  rotorControlTasHandle = osThreadNew(rotorControl, NULL, &rotorControlTas_attributes);
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MX_FREERTOS_Init+0xc8>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <MX_FREERTOS_Init+0xcc>)
 80007b0:	f007 fe14 	bl	80083dc <osThreadNew>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_FREERTOS_Init+0xd0>)
 80007b8:	6013      	str	r3, [r2, #0]

  /* creation of pttControlTask */
  pttControlTaskHandle = osThreadNew(pttControl, NULL, &pttControlTask_attributes);
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_FREERTOS_Init+0xd4>)
 80007bc:	2100      	movs	r1, #0
 80007be:	4815      	ldr	r0, [pc, #84]	; (8000814 <MX_FREERTOS_Init+0xd8>)
 80007c0:	f007 fe0c 	bl	80083dc <osThreadNew>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <MX_FREERTOS_Init+0xdc>)
 80007c8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20004db4 	.word	0x20004db4
 80007d4:	20004db0 	.word	0x20004db0
 80007d8:	0800abfc 	.word	0x0800abfc
 80007dc:	0800ac08 	.word	0x0800ac08
 80007e0:	0800ac2c 	.word	0x0800ac2c
 80007e4:	0800081d 	.word	0x0800081d
 80007e8:	20004dac 	.word	0x20004dac
 80007ec:	0800ac50 	.word	0x0800ac50
 80007f0:	0800082d 	.word	0x0800082d
 80007f4:	20004db8 	.word	0x20004db8
 80007f8:	0800ac74 	.word	0x0800ac74
 80007fc:	0800083d 	.word	0x0800083d
 8000800:	20004dbc 	.word	0x20004dbc
 8000804:	0800ac98 	.word	0x0800ac98
 8000808:	0800084d 	.word	0x0800084d
 800080c:	20004dc4 	.word	0x20004dc4
 8000810:	0800acbc 	.word	0x0800acbc
 8000814:	0800085d 	.word	0x0800085d
 8000818:	20004dc0 	.word	0x20004dc0

0800081c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f007 fe6b 	bl	8008500 <osDelay>
 800082a:	e7fb      	b.n	8000824 <StartDefaultTask+0x8>

0800082c <uartRx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartRx */
__weak void uartRx(void *argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartRx */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f007 fe63 	bl	8008500 <osDelay>
 800083a:	e7fb      	b.n	8000834 <uartRx+0x8>

0800083c <uartTx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartTx */
__weak void uartTx(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartTx */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f007 fe5b 	bl	8008500 <osDelay>
 800084a:	e7fb      	b.n	8000844 <uartTx+0x8>

0800084c <rotorControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rotorControl */
__weak void rotorControl(void *argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rotorControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f007 fe53 	bl	8008500 <osDelay>
 800085a:	e7fb      	b.n	8000854 <rotorControl+0x8>

0800085c <pttControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pttControl */
__weak void pttControl(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pttControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f007 fe4b 	bl	8008500 <osDelay>
 800086a:	e7fb      	b.n	8000864 <pttControl+0x8>

0800086c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_CRC_Init+0x3c>)
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <MX_CRC_Init+0x40>)
 8000874:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_CRC_Init+0x3c>)
 8000878:	2200      	movs	r2, #0
 800087a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_CRC_Init+0x3c>)
 800087e:	2200      	movs	r2, #0
 8000880:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_CRC_Init+0x3c>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_CRC_Init+0x3c>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_CRC_Init+0x3c>)
 8000890:	2201      	movs	r2, #1
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_CRC_Init+0x3c>)
 8000896:	f002 f8c1 	bl	8002a1c <HAL_CRC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008a0:	f000 fa66 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20004dc8 	.word	0x20004dc8
 80008ac:	40023000 	.word	0x40023000

080008b0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_CRC_MspInit+0x38>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d10b      	bne.n	80008da <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_CRC_MspInit+0x3c>)
 80008c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008c6:	4a09      	ldr	r2, [pc, #36]	; (80008ec <HAL_CRC_MspInit+0x3c>)
 80008c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008cc:	6493      	str	r3, [r2, #72]	; 0x48
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <HAL_CRC_MspInit+0x3c>)
 80008d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023000 	.word	0x40023000
 80008ec:	40021000 	.word	0x40021000

080008f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_DMA_Init+0x60>)
 80008f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008fa:	4a15      	ldr	r2, [pc, #84]	; (8000950 <MX_DMA_Init+0x60>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6493      	str	r3, [r2, #72]	; 0x48
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_DMA_Init+0x60>)
 8000904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_DMA_Init+0x60>)
 8000910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <MX_DMA_Init+0x60>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6493      	str	r3, [r2, #72]	; 0x48
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_DMA_Init+0x60>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2105      	movs	r1, #5
 800092a:	201d      	movs	r0, #29
 800092c:	f002 f84e 	bl	80029cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000930:	201d      	movs	r0, #29
 8000932:	f002 f865 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	201e      	movs	r0, #30
 800093c:	f002 f846 	bl	80029cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000940:	201e      	movs	r0, #30
 8000942:	f002 f85d 	bl	8002a00 <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <MX_GPIO_Init+0x12c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a44      	ldr	r2, [pc, #272]	; (8000a80 <MX_GPIO_Init+0x12c>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <MX_GPIO_Init+0x12c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	4b3f      	ldr	r3, [pc, #252]	; (8000a80 <MX_GPIO_Init+0x12c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a3e      	ldr	r2, [pc, #248]	; (8000a80 <MX_GPIO_Init+0x12c>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <MX_GPIO_Init+0x12c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b39      	ldr	r3, [pc, #228]	; (8000a80 <MX_GPIO_Init+0x12c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a38      	ldr	r2, [pc, #224]	; (8000a80 <MX_GPIO_Init+0x12c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <MX_GPIO_Init+0x12c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <MX_GPIO_Init+0x12c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <MX_GPIO_Init+0x12c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <MX_GPIO_Init+0x12c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Rj45_LED1_Pin|RJ45_LED2_Pin|PreAmp_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80009d0:	482c      	ldr	r0, [pc, #176]	; (8000a84 <MX_GPIO_Init+0x130>)
 80009d2:	f002 fd91 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LDC_EN_Pin|LCD_SEL_Pin|ROT_RIGHT_Pin|ROT_LEFT_Pin
 80009d6:	2200      	movs	r2, #0
 80009d8:	f647 0183 	movw	r1, #30851	; 0x7883
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <MX_GPIO_Init+0x134>)
 80009de:	f002 fd8b 	bl	80034f8 <HAL_GPIO_WritePin>
                          |ROT_LEFTB13_Pin|ROT_RIGHTB14_Pin|AMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay_SwitchB_Pin|Relay_SwitchA_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80009e8:	4828      	ldr	r0, [pc, #160]	; (8000a8c <MX_GPIO_Init+0x138>)
 80009ea:	f002 fd85 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Rj45_LED1_Pin|RJ45_LED2_Pin|PreAmp_Pin;
 80009ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	481f      	ldr	r0, [pc, #124]	; (8000a84 <MX_GPIO_Init+0x130>)
 8000a08:	f002 fbf6 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PTT_Main_Pin|PTT_Sub_Pin;
 8000a0c:	23c0      	movs	r3, #192	; 0xc0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481b      	ldr	r0, [pc, #108]	; (8000a8c <MX_GPIO_Init+0x138>)
 8000a20:	f002 fbea 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LDC_EN_Pin|LCD_SEL_Pin|ROT_RIGHT_Pin|ROT_LEFT_Pin
 8000a24:	f647 0383 	movw	r3, #30851	; 0x7883
 8000a28:	617b      	str	r3, [r7, #20]
                          |ROT_LEFTB13_Pin|ROT_RIGHTB14_Pin|AMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_GPIO_Init+0x134>)
 8000a3e:	f002 fbdb 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Relay_SwitchB_Pin|Relay_SwitchA_Pin;
 8000a42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_GPIO_Init+0x138>)
 8000a5c:	f002 fbcc 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Coax_NC_Pin|Coax_NO_Pin;
 8000a60:	2330      	movs	r3, #48	; 0x30
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0x134>)
 8000a74:	f002 fbc0 	bl	80031f8 <HAL_GPIO_Init>

}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	42020800 	.word	0x42020800
 8000a88:	42020400 	.word	0x42020400
 8000a8c:	42020000 	.word	0x42020000

08000a90 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <MX_I2C1_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <MX_I2C1_Init+0x7c>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aca:	480e      	ldr	r0, [pc, #56]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000acc:	f002 fd2c 	bl	8003528 <HAL_I2C_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ad6:	f000 f94b 	bl	8000d70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ada:	2100      	movs	r1, #0
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ade:	f003 fb4a 	bl	8004176 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ae8:	f000 f942 	bl	8000d70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000af0:	f003 fb8c 	bl	800420c <HAL_I2CEx_ConfigDigitalFilter>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f000 f939 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20004e54 	.word	0x20004e54
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	009034b6 	.word	0x009034b6

08000b10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0ae      	sub	sp, #184	; 0xb8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2294      	movs	r2, #148	; 0x94
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00a f82c 	bl	800ab8e <memset>
  if(i2cHandle->Instance==I2C1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a42      	ldr	r2, [pc, #264]	; (8000c44 <HAL_I2C_MspInit+0x134>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d17d      	bne.n	8000c3c <HAL_I2C_MspInit+0x12c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 fc4b 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b58:	f000 f90a 	bl	8000d70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <HAL_I2C_MspInit+0x138>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b60:	4a39      	ldr	r2, [pc, #228]	; (8000c48 <HAL_I2C_MspInit+0x138>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <HAL_I2C_MspInit+0x138>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7c:	2312      	movs	r3, #18
 8000b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	482c      	ldr	r0, [pc, #176]	; (8000c4c <HAL_I2C_MspInit+0x13c>)
 8000b9c:	f002 fb2c 	bl	80031f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <HAL_I2C_MspInit+0x138>)
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <HAL_I2C_MspInit+0x138>)
 8000ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000baa:	6593      	str	r3, [r2, #88]	; 0x58
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <HAL_I2C_MspInit+0x138>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000bba:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_I2C_MspInit+0x144>)
 8000bbc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000bc0:	2212      	movs	r2, #18
 8000bc2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000bf0:	f001 fffe 	bl	8002bf0 <HAL_DMA_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8000bfa:	f000 f8b9 	bl	8000d70 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_i2c1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000bfe:	2110      	movs	r1, #16
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000c02:	f002 fa66 	bl	80030d2 <HAL_DMA_ConfigChannelAttributes>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8000c0c:	f000 f8b0 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000c14:	639a      	str	r2, [r3, #56]	; 0x38
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_I2C_MspInit+0x140>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2105      	movs	r1, #5
 8000c20:	2037      	movs	r0, #55	; 0x37
 8000c22:	f001 fed3 	bl	80029cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c26:	2037      	movs	r0, #55	; 0x37
 8000c28:	f001 feea 	bl	8002a00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2105      	movs	r1, #5
 8000c30:	2038      	movs	r0, #56	; 0x38
 8000c32:	f001 fecb 	bl	80029cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c36:	2038      	movs	r0, #56	; 0x38
 8000c38:	f001 fee2 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	37b8      	adds	r7, #184	; 0xb8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40005400 	.word	0x40005400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	42020400 	.word	0x42020400
 8000c50:	20004dec 	.word	0x20004dec
 8000c54:	4002001c 	.word	0x4002001c

08000c58 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c5c:	f003 fb22 	bl	80042a4 <HAL_ICACHE_Enable>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000c66:	f000 f883 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f000 fd9e 	bl	80017b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 f81b 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f7ff fe6b 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c7e:	f7ff fe37 	bl	80008f0 <MX_DMA_Init>
  MX_CRC_Init();
 8000c82:	f7ff fdf3 	bl	800086c <MX_CRC_Init>
  MX_SPI2_Init();
 8000c86:	f000 f879 	bl	8000d7c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000c8a:	f000 fc83 	bl	8001594 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000c8e:	f7ff fc65 	bl	800055c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c92:	f7ff fefd 	bl	8000a90 <MX_I2C1_Init>
  MX_ICACHE_Init();
 8000c96:	f7ff ffdf 	bl	8000c58 <MX_ICACHE_Init>
  MX_TIM1_Init();
 8000c9a:	f000 fafb 	bl	8001294 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c9e:	f000 fb53 	bl	8001348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ca2:	f007 fb51 	bl	8008348 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ca6:	f7ff fd49 	bl	800073c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000caa:	f007 fb71 	bl	8008390 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <main+0x40>

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b098      	sub	sp, #96	; 0x60
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	2248      	movs	r2, #72	; 0x48
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f009 ff65 	bl	800ab8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f003 fb04 	bl	80042e0 <HAL_PWREx_ControlVoltageScaling>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000cde:	f000 f847 	bl	8000d70 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cec:	2302      	movs	r3, #2
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000cf8:	2332      	movs	r3, #50	; 0x32
 8000cfa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0318 	add.w	r3, r7, #24
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fb77 	bl	8004400 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d18:	f000 f82a 	bl	8000d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2303      	movs	r3, #3
 8000d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2104      	movs	r1, #4
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 f845 	bl	8004dc4 <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d40:	f000 f816 	bl	8000d70 <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3760      	adds	r7, #96	; 0x60
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5e:	f000 fd43 	bl	80017e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40014800 	.word	0x40014800

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <MX_SPI2_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000d96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000db2:	2210      	movs	r2, #16
 8000db4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000dca:	2207      	movs	r2, #7
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_SPI2_Init+0x74>)
 8000ddc:	f005 f81a 	bl	8005e14 <HAL_SPI_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f7ff ffc3 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20004ea0 	.word	0x20004ea0
 8000df4:	40003800 	.word	0x40003800

08000df8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a34      	ldr	r2, [pc, #208]	; (8000ee8 <HAL_SPI_MspInit+0xf0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d162      	bne.n	8000ee0 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1a:	4b34      	ldr	r3, [pc, #208]	; (8000eec <HAL_SPI_MspInit+0xf4>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	4a33      	ldr	r2, [pc, #204]	; (8000eec <HAL_SPI_MspInit+0xf4>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6593      	str	r3, [r2, #88]	; 0x58
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_SPI_MspInit+0xf4>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HAL_SPI_MspInit+0xf4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <HAL_SPI_MspInit+0xf4>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <HAL_SPI_MspInit+0xf4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000e4a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4822      	ldr	r0, [pc, #136]	; (8000ef0 <HAL_SPI_MspInit+0xf8>)
 8000e68:	f002 f9c6 	bl	80031f8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <HAL_SPI_MspInit+0x100>)
 8000e70:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000e74:	220e      	movs	r2, #14
 8000e76:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ea2:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000ea4:	f001 fea4 	bl	8002bf0 <HAL_DMA_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000eae:	f7ff ff5f 	bl	8000d70 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000eb6:	f002 f90c 	bl	80030d2 <HAL_DMA_ConfigChannelAttributes>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000ec0:	f7ff ff56 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_SPI_MspInit+0xfc>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2105      	movs	r1, #5
 8000ed4:	203c      	movs	r0, #60	; 0x3c
 8000ed6:	f001 fd79 	bl	80029cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000eda:	203c      	movs	r0, #60	; 0x3c
 8000edc:	f001 fd90 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3728      	adds	r7, #40	; 0x28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40003800 	.word	0x40003800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	42020400 	.word	0x42020400
 8000ef4:	20004f04 	.word	0x20004f04
 8000ef8:	40020008 	.word	0x40020008

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_MspInit+0x60>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <HAL_MspInit+0x60>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_MspInit+0x60>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_MspInit+0x60>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_MspInit+0x60>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6593      	str	r3, [r2, #88]	; 0x58
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_MspInit+0x60>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2107      	movs	r1, #7
 8000f36:	f06f 0001 	mvn.w	r0, #1
 8000f3a:	f001 fd47 	bl	80029cc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f3e:	f003 fa2b 	bl	8004398 <HAL_PWREx_DisableUCPDDeadBattery>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8000f42:	2004      	movs	r0, #4
 8000f44:	f000 fc70 	bl	8001828 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000f48:	f000 fcbe 	bl	80018c8 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 fc93 	bl	8001878 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	2047      	movs	r0, #71	; 0x47
 8000f76:	f001 fd29 	bl	80029cc <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000f7a:	2047      	movs	r0, #71	; 0x47
 8000f7c:	f001 fd40 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_InitTick+0x9c>)
 8000f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f84:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <HAL_InitTick+0x9c>)
 8000f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_InitTick+0x9c>)
 8000f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f98:	f107 0210 	add.w	r2, r7, #16
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f004 f910 	bl	80051c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fa8:	f004 f8fa 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8000fac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb0:	4a13      	ldr	r2, [pc, #76]	; (8001000 <HAL_InitTick+0xa0>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0c9b      	lsrs	r3, r3, #18
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_InitTick+0xa4>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <HAL_InitTick+0xa8>)
 8000fc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_InitTick+0xa4>)
 8000fc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fc8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_InitTick+0xa4>)
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_InitTick+0xa4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_InitTick+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <HAL_InitTick+0xa4>)
 8000fde:	f005 f8dc 	bl	800619a <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d104      	bne.n	8000ff2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <HAL_InitTick+0xa4>)
 8000fea:	f005 f937 	bl	800625c <HAL_TIM_Base_Start_IT>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000
 8001000:	431bde83 	.word	0x431bde83
 8001004:	20004f6c 	.word	0x20004f6c
 8001008:	40014800 	.word	0x40014800

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <DMA1_Channel1_IRQHandler+0x10>)
 800103e:	f001 ff3a 	bl	8002eb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20004f04 	.word	0x20004f04

0800104c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <DMA1_Channel2_IRQHandler+0x10>)
 8001052:	f001 ff30 	bl	8002eb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20004dec 	.word	0x20004dec

08001060 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <I2C1_EV_IRQHandler+0x10>)
 8001066:	f002 faee 	bl	8003646 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20004e54 	.word	0x20004e54

08001074 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <I2C1_ER_IRQHandler+0x10>)
 800107a:	f002 fafe 	bl	800367a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20004e54 	.word	0x20004e54

08001088 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <SPI2_IRQHandler+0x10>)
 800108e:	f004 ff65 	bl	8005f5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20004ea0 	.word	0x20004ea0

0800109c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <USART1_IRQHandler+0x10>)
 80010a2:	f006 f905 	bl	80072b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20005050 	.word	0x20005050

080010b0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <TIM17_IRQHandler+0x10>)
 80010b6:	f005 fa3e 	bl	8006536 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20004f6c 	.word	0x20004f6c

080010c4 <HAL_UART_TxCpltCallback>:

	  }
//	 SEGGER_SYSVIEW_RecordExitISR();
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
//	SEGGER_SYSVIEW_RecordEnterISR();
	if(huart->Instance==USART3) // Is it the USB-Com port?
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <HAL_UART_TxCpltCallback+0x44>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d111      	bne.n	80010fe <HAL_UART_TxCpltCallback+0x3a>
	{
//		uartRXHandler(NULL);

		vTaskNotifyGiveFromISR((TaskHandle_t)uartTxTaskHandle, &xHigherPriorityTaskWoken); // wake UART send task, when transfer is done
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_UART_TxCpltCallback+0x48>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f107 020c 	add.w	r2, r7, #12
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f008 fd87 	bl	8009bf8 <vTaskNotifyGiveFromISR>
		/* Actual macro used here is port specific. */

		if (xHigherPriorityTaskWoken == pdTRUE) {							   // context switch
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d106      	bne.n	80010fe <HAL_UART_TxCpltCallback+0x3a>
//			SEGGER_SYSVIEW_RecordExitISRToScheduler();
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_UART_TxCpltCallback+0x3a>
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_UART_TxCpltCallback+0x4c>)
 80010f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010fc:	601a      	str	r2, [r3, #0]
		}
	}
//	SEGGER_SYSVIEW_RecordExitISR();

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40004800 	.word	0x40004800
 800110c:	20004dbc 	.word	0x20004dbc
 8001110:	e000ed04 	.word	0xe000ed04

08001114 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800113e:	4b4f      	ldr	r3, [pc, #316]	; (800127c <SystemCoreClockUpdate+0x144>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d107      	bne.n	800115a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800114a:	4b4c      	ldr	r3, [pc, #304]	; (800127c <SystemCoreClockUpdate+0x144>)
 800114c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e005      	b.n	8001166 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <SystemCoreClockUpdate+0x144>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001166:	4a46      	ldr	r2, [pc, #280]	; (8001280 <SystemCoreClockUpdate+0x148>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001170:	4b42      	ldr	r3, [pc, #264]	; (800127c <SystemCoreClockUpdate+0x144>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	2b0c      	cmp	r3, #12
 800117a:	d866      	bhi.n	800124a <SystemCoreClockUpdate+0x112>
 800117c:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <SystemCoreClockUpdate+0x4c>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	080011b9 	.word	0x080011b9
 8001188:	0800124b 	.word	0x0800124b
 800118c:	0800124b 	.word	0x0800124b
 8001190:	0800124b 	.word	0x0800124b
 8001194:	080011c1 	.word	0x080011c1
 8001198:	0800124b 	.word	0x0800124b
 800119c:	0800124b 	.word	0x0800124b
 80011a0:	0800124b 	.word	0x0800124b
 80011a4:	080011c9 	.word	0x080011c9
 80011a8:	0800124b 	.word	0x0800124b
 80011ac:	0800124b 	.word	0x0800124b
 80011b0:	0800124b 	.word	0x0800124b
 80011b4:	080011d1 	.word	0x080011d1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80011b8:	4a32      	ldr	r2, [pc, #200]	; (8001284 <SystemCoreClockUpdate+0x14c>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	6013      	str	r3, [r2, #0]
      break;
 80011be:	e048      	b.n	8001252 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80011c0:	4b30      	ldr	r3, [pc, #192]	; (8001284 <SystemCoreClockUpdate+0x14c>)
 80011c2:	4a31      	ldr	r2, [pc, #196]	; (8001288 <SystemCoreClockUpdate+0x150>)
 80011c4:	601a      	str	r2, [r3, #0]
      break;
 80011c6:	e044      	b.n	8001252 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <SystemCoreClockUpdate+0x14c>)
 80011ca:	4a30      	ldr	r2, [pc, #192]	; (800128c <SystemCoreClockUpdate+0x154>)
 80011cc:	601a      	str	r2, [r3, #0]
      break;
 80011ce:	e040      	b.n	8001252 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <SystemCoreClockUpdate+0x144>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <SystemCoreClockUpdate+0x144>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f003 030f 	and.w	r3, r3, #15
 80011e4:	3301      	adds	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d003      	beq.n	80011f6 <SystemCoreClockUpdate+0xbe>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d006      	beq.n	8001202 <SystemCoreClockUpdate+0xca>
 80011f4:	e00b      	b.n	800120e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80011f6:	4a24      	ldr	r2, [pc, #144]	; (8001288 <SystemCoreClockUpdate+0x150>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	613b      	str	r3, [r7, #16]
          break;
 8001200:	e00b      	b.n	800121a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001202:	4a22      	ldr	r2, [pc, #136]	; (800128c <SystemCoreClockUpdate+0x154>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	613b      	str	r3, [r7, #16]
          break;
 800120c:	e005      	b.n	800121a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	613b      	str	r3, [r7, #16]
          break;
 8001218:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <SystemCoreClockUpdate+0x144>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <SystemCoreClockUpdate+0x144>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0e5b      	lsrs	r3, r3, #25
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	3301      	adds	r3, #1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <SystemCoreClockUpdate+0x14c>)
 8001246:	6013      	str	r3, [r2, #0]
      break;
 8001248:	e003      	b.n	8001252 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <SystemCoreClockUpdate+0x14c>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	6013      	str	r3, [r2, #0]
      break;
 8001250:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <SystemCoreClockUpdate+0x144>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <SystemCoreClockUpdate+0x158>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <SystemCoreClockUpdate+0x14c>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <SystemCoreClockUpdate+0x14c>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	0800acf8 	.word	0x0800acf8
 8001284:	20000000 	.word	0x20000000
 8001288:	00f42400 	.word	0x00f42400
 800128c:	007a1200 	.word	0x007a1200
 8001290:	0800ace0 	.word	0x0800ace0

08001294 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2224      	movs	r2, #36	; 0x24
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f009 fc73 	bl	800ab8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <MX_TIM1_Init+0xac>)
 80012b4:	4a23      	ldr	r2, [pc, #140]	; (8001344 <MX_TIM1_Init+0xb0>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_TIM1_Init+0xac>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_TIM1_Init+0xac>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_TIM1_Init+0xac>)
 80012c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_TIM1_Init+0xac>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_TIM1_Init+0xac>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_TIM1_Init+0xac>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012de:	2301      	movs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012e6:	2301      	movs	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012f6:	2301      	movs	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_TIM1_Init+0xac>)
 800130a:	f005 f86e 	bl	80063ea <HAL_TIM_Encoder_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001314:	f7ff fd2c 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_TIM1_Init+0xac>)
 800132a:	f005 fecb 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001334:	f7ff fd1c 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20004fb8 	.word	0x20004fb8
 8001344:	40012c00 	.word	0x40012c00

08001348 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135a:	463b      	mov	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <MX_TIM2_Init+0xb0>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <MX_TIM2_Init+0xb0>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <MX_TIM2_Init+0xb0>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_TIM2_Init+0xb0>)
 8001382:	f04f 32ff 	mov.w	r2, #4294967295
 8001386:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_TIM2_Init+0xb0>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_TIM2_Init+0xb0>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001394:	4818      	ldr	r0, [pc, #96]	; (80013f8 <MX_TIM2_Init+0xb0>)
 8001396:	f004 ffd1 	bl	800633c <HAL_TIM_PWM_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013a0:	f7ff fce6 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <MX_TIM2_Init+0xb0>)
 80013b4:	f005 fe86 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013be:	f7ff fcd7 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c2:	2360      	movs	r3, #96	; 0x60
 80013c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	4807      	ldr	r0, [pc, #28]	; (80013f8 <MX_TIM2_Init+0xb0>)
 80013da:	f005 f9cb 	bl	8006774 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80013e4:	f7ff fcc4 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <MX_TIM2_Init+0xb0>)
 80013ea:	f000 f869 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20005004 	.word	0x20005004

080013fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_TIM_Encoder_MspInit+0x7c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d128      	bne.n	8001470 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_TIM_Encoder_MspInit+0x80>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <HAL_TIM_Encoder_MspInit+0x80>)
 8001424:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001428:	6613      	str	r3, [r2, #96]	; 0x60
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_TIM_Encoder_MspInit+0x80>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_TIM_Encoder_MspInit+0x80>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_TIM_Encoder_MspInit+0x80>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_Encoder_MspInit+0x80>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800144e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001460:	2301      	movs	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_TIM_Encoder_MspInit+0x84>)
 800146c:	f001 fec4 	bl	80031f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40012c00 	.word	0x40012c00
 800147c:	40021000 	.word	0x40021000
 8001480:	42020000 	.word	0x42020000

08001484 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001494:	d10b      	bne.n	80014ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_TIM_PWM_MspInit+0x38>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <HAL_TIM_PWM_MspInit+0x38>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6593      	str	r3, [r2, #88]	; 0x58
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_TIM_PWM_MspInit+0x38>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d11c      	bne.n	800151c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_TIM_MspPostInit+0x64>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_TIM_MspPostInit+0x64>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_TIM_MspPostInit+0x64>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	4804      	ldr	r0, [pc, #16]	; (8001528 <HAL_TIM_MspPostInit+0x68>)
 8001518:	f001 fe6e 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000
 8001528:	42020000 	.word	0x42020000

0800152c <LL_USART_EnableRxTimeout>:
  * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	605a      	str	r2, [r3, #4]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_USART_SetRxTimeout>:
  * @param  USARTx USART Instance
  * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	615a      	str	r2, [r3, #20]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_USART_EnableIT_RTO>:
  * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_USART1_UART_Init+0x90>)
 800159a:	4a23      	ldr	r2, [pc, #140]	; (8001628 <MX_USART1_UART_Init+0x94>)
 800159c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015de:	f005 fe17 	bl	8007210 <HAL_UART_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015e8:	f7ff fbc2 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ec:	2100      	movs	r1, #0
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_USART1_UART_Init+0x90>)
 80015f0:	f006 fd9c 	bl	800812c <HAL_UARTEx_SetTxFifoThreshold>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015fa:	f7ff fbb9 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015fe:	2100      	movs	r1, #0
 8001600:	4808      	ldr	r0, [pc, #32]	; (8001624 <MX_USART1_UART_Init+0x90>)
 8001602:	f006 fdd1 	bl	80081a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800160c:	f7ff fbb0 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_USART1_UART_Init+0x90>)
 8001612:	f006 fd52 	bl	80080ba <HAL_UARTEx_DisableFifoMode>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800161c:	f7ff fba8 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20005050 	.word	0x20005050
 8001628:	40013800 	.word	0x40013800

0800162c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0b0      	sub	sp, #192	; 0xc0
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	2294      	movs	r2, #148	; 0x94
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f009 fa9e 	bl	800ab8e <memset>
  if(uartHandle->Instance==USART1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a3e      	ldr	r2, [pc, #248]	; (8001750 <HAL_UART_MspInit+0x124>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d174      	bne.n	8001746 <HAL_UART_MspInit+0x11a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001660:	2300      	movs	r3, #0
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4618      	mov	r0, r3
 800166a:	f003 febd 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001674:	f7ff fb7c 	bl	8000d70 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001678:	4b36      	ldr	r3, [pc, #216]	; (8001754 <HAL_UART_MspInit+0x128>)
 800167a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167c:	4a35      	ldr	r2, [pc, #212]	; (8001754 <HAL_UART_MspInit+0x128>)
 800167e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001682:	6613      	str	r3, [r2, #96]	; 0x60
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_UART_MspInit+0x128>)
 8001686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_UART_MspInit+0x128>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <HAL_UART_MspInit+0x128>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_UART_MspInit+0x128>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_UART_MspInit+0x128>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	4a29      	ldr	r2, [pc, #164]	; (8001754 <HAL_UART_MspInit+0x128>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <HAL_UART_MspInit+0x128>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016da:	2307      	movs	r3, #7
 80016dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e4:	4619      	mov	r1, r3
 80016e6:	481c      	ldr	r0, [pc, #112]	; (8001758 <HAL_UART_MspInit+0x12c>)
 80016e8:	f001 fd86 	bl	80031f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001704:	2307      	movs	r3, #7
 8001706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800170e:	4619      	mov	r1, r3
 8001710:	4812      	ldr	r0, [pc, #72]	; (800175c <HAL_UART_MspInit+0x130>)
 8001712:	f001 fd71 	bl	80031f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2105      	movs	r1, #5
 800171a:	203d      	movs	r0, #61	; 0x3d
 800171c:	f001 f956 	bl	80029cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001720:	203d      	movs	r0, #61	; 0x3d
 8001722:	f001 f96d 	bl	8002a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    LL_USART_EnableRxTimeout(uartHandle->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fefe 	bl	800152c <LL_USART_EnableRxTimeout>
    LL_USART_SetRxTimeout(uartHandle->Instance, 0xFF);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	21ff      	movs	r1, #255	; 0xff
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff08 	bl	800154c <LL_USART_SetRxTimeout>
    LL_USART_EnableIT_RTO(uartHandle->Instance);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff16 	bl	8001572 <LL_USART_EnableIT_RTO>

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001746:	bf00      	nop
 8001748:	37c0      	adds	r7, #192	; 0xc0
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40013800 	.word	0x40013800
 8001754:	40021000 	.word	0x40021000
 8001758:	42020000 	.word	0x42020000
 800175c:	42020400 	.word	0x42020400

08001760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001764:	f7ff fcd6 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001768:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800176a:	e003      	b.n	8001774 <LoopCopyDataInit>

0800176c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800176e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001770:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001772:	3104      	adds	r1, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001774:	480a      	ldr	r0, [pc, #40]	; (80017a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001778:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800177a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800177c:	d3f6      	bcc.n	800176c <CopyDataInit>
	ldr	r2, =_sbss
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001780:	e002      	b.n	8001788 <LoopFillZerobss>

08001782 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001782:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001784:	f842 3b04 	str.w	r3, [r2], #4

08001788 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <LoopForever+0x16>)
	cmp	r2, r3
 800178a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800178c:	d3f9      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800178e:	f009 f9cd 	bl	800ab2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001792:	f7ff fa6c 	bl	8000c6e <main>

08001796 <LoopForever>:

LoopForever:
    b LoopForever
 8001796:	e7fe      	b.n	8001796 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001798:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800179c:	0800ad70 	.word	0x0800ad70
	ldr	r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017a4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80017a8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80017ac:	20005124 	.word	0x20005124

080017b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC1_2_IRQHandler>

080017b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80017bc:	2004      	movs	r0, #4
 80017be:	f001 f8fa 	bl	80029b6 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80017c2:	f7ff fcb9 	bl	8001138 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff fbca 	bl	8000f60 <HAL_InitTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	71fb      	strb	r3, [r7, #7]
 80017d6:	e001      	b.n	80017dc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017d8:	f7ff fb90 	bl	8000efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017dc:	79fb      	ldrb	r3, [r7, #7]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008
 800180c:	200050e0 	.word	0x200050e0

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200050e0 	.word	0x200050e0

08001828 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  * @note   Retrieve the TrimmingValue from factory located at
  *         VREFBUF_SC0_CAL_ADDR or VREFBUF_SC1_CAL_ADDR addresses.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t TrimmingValue;

  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x44>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 0204 	bic.w	r2, r3, #4
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x44>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]

  /* Restrieve Calibration data and store them into trimming field */
  if (VoltageScaling == SYSCFG_VREFBUF_VOLTAGE_SCALE0)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x2a>
  {
    TrimmingValue = ((uint32_t) *VREFBUF_SC0_CAL_ADDR) & 0x3FU;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x48>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e004      	b.n	800185c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x34>
  }
  else
  {
    TrimmingValue = ((uint32_t) *VREFBUF_SC1_CAL_ADDR) & 0x3FU;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x4c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185a:	60fb      	str	r3, [r7, #12]
  }
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  HAL_SYSCFG_VREFBUF_TrimmingConfig(TrimmingValue);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 f81f 	bl	80018a0 <HAL_SYSCFG_VREFBUF_TrimmingConfig>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40010100 	.word	0x40010100
 8001870:	0bfa0579 	.word	0x0bfa0579
 8001874:	0bfa0530 	.word	0x0bfa0530

08001878 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 0202 	bic.w	r2, r3, #2
 8001888:	4904      	ldr	r1, [pc, #16]	; (800189c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40010100 	.word	0x40010100

080018a0 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80018b0:	4904      	ldr	r1, [pc, #16]	; (80018c4 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40010100 	.word	0x40010100

080018c8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80018da:	f7ff ff99 	bl	8001810 <HAL_GetTick>
 80018de:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80018e2:	f7ff ff95 	bl	8001810 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b0a      	cmp	r3, #10
 80018ee:	d901      	bls.n	80018f4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e006      	b.n	8001902 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40010100 	.word	0x40010100

08001910 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3360      	adds	r3, #96	; 0x60
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <LL_ADC_SetOffset+0x44>)
 800199a:	4013      	ands	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4313      	orrs	r3, r2
 80019a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	03fff000 	.word	0x03fff000

080019c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3360      	adds	r3, #96	; 0x60
 80019ce:	461a      	mov	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3360      	adds	r3, #96	; 0x60
 80019fc:	461a      	mov	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	615a      	str	r2, [r3, #20]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3330      	adds	r3, #48	; 0x30
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	4413      	add	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	211f      	movs	r1, #31
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0e9b      	lsrs	r3, r3, #26
 8001a80:	f003 011f 	and.w	r1, r3, #31
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3314      	adds	r3, #20
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	0e5b      	lsrs	r3, r3, #25
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	0d1b      	lsrs	r3, r3, #20
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2107      	movs	r1, #7
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0d1b      	lsrs	r3, r3, #20
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aea:	bf00      	nop
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	43db      	mvns	r3, r3
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0318 	and.w	r3, r3, #24
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b1c:	40d9      	lsrs	r1, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	400b      	ands	r3, r1
 8001b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b26:	431a      	orrs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	0007ffff 	.word	0x0007ffff

08001b40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6093      	str	r3, [r2, #8]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b78:	d101      	bne.n	8001b7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bc8:	d101      	bne.n	8001bce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <LL_ADC_IsEnabled+0x18>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <LL_ADC_IsEnabled+0x1a>
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d101      	bne.n	8001c40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e134      	b.n	8001ed4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7fe fce5 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff67 	bl	8001b64 <LL_ADC_IsDeepPowerDownEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff4d 	bl	8001b40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff82 	bl	8001bb4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff66 	bl	8001b8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc0:	4b86      	ldr	r3, [pc, #536]	; (8001edc <HAL_ADC_Init+0x28c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	4a86      	ldr	r2, [pc, #536]	; (8001ee0 <HAL_ADC_Init+0x290>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	099b      	lsrs	r3, r3, #6
 8001cce:	3301      	adds	r3, #1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff64 	bl	8001bb4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10d      	bne.n	8001d0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	f043 0210 	orr.w	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff75 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 8001d18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 80cd 	bne.w	8001ec2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 80c9 	bne.w	8001ec2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d38:	f043 0202 	orr.w	r2, r3, #2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff49 	bl	8001bdc <LL_ADC_IsEnabled>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d110      	bne.n	8001d72 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d50:	4864      	ldr	r0, [pc, #400]	; (8001ee4 <HAL_ADC_Init+0x294>)
 8001d52:	f7ff ff43 	bl	8001bdc <LL_ADC_IsEnabled>
 8001d56:	4604      	mov	r4, r0
 8001d58:	4863      	ldr	r0, [pc, #396]	; (8001ee8 <HAL_ADC_Init+0x298>)
 8001d5a:	f7ff ff3f 	bl	8001bdc <LL_ADC_IsEnabled>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4323      	orrs	r3, r4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	485f      	ldr	r0, [pc, #380]	; (8001eec <HAL_ADC_Init+0x29c>)
 8001d6e:	f7ff fdcf 	bl	8001910 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e5b      	ldrb	r3, [r3, #25]
 8001d76:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d7c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d82:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d88:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d90:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d106      	bne.n	8001dae <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	3b01      	subs	r3, #1
 8001da6:	045b      	lsls	r3, r3, #17
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_ADC_Init+0x2a0>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	69b9      	ldr	r1, [r7, #24]
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff0d 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 8001de8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff1a 	bl	8001c28 <LL_ADC_INJ_IsConversionOngoing>
 8001df4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d140      	bne.n	8001e7e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d13d      	bne.n	8001e7e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7e1b      	ldrb	r3, [r3, #24]
 8001e0a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e0c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e14:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e24:	f023 0306 	bic.w	r3, r3, #6
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	69b9      	ldr	r1, [r7, #24]
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d118      	bne.n	8001e6e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	e007      	b.n	8001e7e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10c      	bne.n	8001ea0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f023 010f 	bic.w	r1, r3, #15
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9e:	e007      	b.n	8001eb0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 020f 	bic.w	r2, r2, #15
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f023 0303 	bic.w	r3, r3, #3
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58
 8001ec0:	e007      	b.n	8001ed2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	f043 0210 	orr.w	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3724      	adds	r7, #36	; 0x24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	053e2d63 	.word	0x053e2d63
 8001ee4:	42028000 	.word	0x42028000
 8001ee8:	42028100 	.word	0x42028100
 8001eec:	42028300 	.word	0x42028300
 8001ef0:	fff0c007 	.word	0xfff0c007

08001ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b0b7      	sub	sp, #220	; 0xdc
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x22>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e3c1      	b.n	800269a <HAL_ADC_ConfigChannel+0x7a6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fe6d 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 83a6 	bne.w	800267c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f7ff fd83 	bl	8001a48 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fe5b 	bl	8001c02 <LL_ADC_REG_IsConversionOngoing>
 8001f4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fe67 	bl	8001c28 <LL_ADC_INJ_IsConversionOngoing>
 8001f5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 81c1 	bne.w	80022ea <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 81bc 	bne.w	80022ea <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f7a:	d10f      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7ff fd8a 	bl	8001aa0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fd44 	bl	8001a22 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f9a:	e00e      	b.n	8001fba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f7ff fd79 	bl	8001aa0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fd34 	bl	8001a22 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d00a      	beq.n	8001ff2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6919      	ldr	r1, [r3, #16]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fec:	f7ff fcc4 	bl	8001978 <LL_ADC_SetOffset>
 8001ff0:	e17b      	b.n	80022ea <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fce1 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x12a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fcd6 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	e01e      	b.n	800205c <HAL_ADC_ConfigChannel+0x168>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fccb 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800203c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002044:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e004      	b.n	800205a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x180>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	e018      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x1b2>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800208c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e004      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 800209c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d106      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fc9a 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fc7e 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10a      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x1f0>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fc73 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	f003 021f 	and.w	r2, r3, #31
 80020e2:	e01e      	b.n	8002122 <HAL_ADC_ConfigChannel+0x22e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fc68 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800210a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e004      	b.n	8002120 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <HAL_ADC_ConfigChannel+0x246>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	e018      	b.n	800216c <HAL_ADC_ConfigChannel+0x278>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800214e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e004      	b.n	800216c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	2101      	movs	r1, #1
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fc37 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2102      	movs	r1, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fc1b 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x2b6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2102      	movs	r1, #2
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fc10 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	e01e      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x2f4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2102      	movs	r1, #2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fc05 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e004      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80021dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x30c>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	e016      	b.n	800222e <HAL_ADC_ConfigChannel+0x33a>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002212:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e004      	b.n	800222e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800222e:	429a      	cmp	r2, r3
 8002230:	d106      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	2102      	movs	r1, #2
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fbd6 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2103      	movs	r1, #3
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fbba 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <HAL_ADC_ConfigChannel+0x378>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2103      	movs	r1, #3
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fbaf 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	f003 021f 	and.w	r2, r3, #31
 800226a:	e017      	b.n	800229c <HAL_ADC_ConfigChannel+0x3a8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2103      	movs	r1, #3
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fba4 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002286:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e003      	b.n	800229a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x3c0>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	e011      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x3e4>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e003      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022d8:	429a      	cmp	r2, r3
 80022da:	d106      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2200      	movs	r2, #0
 80022e2:	2103      	movs	r1, #3
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fb81 	bl	80019ec <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fc74 	bl	8001bdc <LL_ADC_IsEnabled>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 81c9 	bne.w	800268e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	461a      	mov	r2, r3
 800230a:	f7ff fbf5 	bl	8001af8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4a8f      	ldr	r2, [pc, #572]	; (8002550 <HAL_ADC_ConfigChannel+0x65c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	f040 8131 	bne.w	800257c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10b      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x44e>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	3301      	adds	r3, #1
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2b09      	cmp	r3, #9
 8002338:	bf94      	ite	ls
 800233a:	2301      	movls	r3, #1
 800233c:	2300      	movhi	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	e019      	b.n	8002376 <HAL_ADC_ConfigChannel+0x482>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002352:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800235a:	2320      	movs	r3, #32
 800235c:	e003      	b.n	8002366 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800235e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	2b09      	cmp	r3, #9
 800236e:	bf94      	ite	ls
 8002370:	2301      	movls	r3, #1
 8002372:	2300      	movhi	r3, #0
 8002374:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002376:	2b00      	cmp	r3, #0
 8002378:	d079      	beq.n	800246e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002382:	2b00      	cmp	r3, #0
 8002384:	d107      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x4a2>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0e9b      	lsrs	r3, r3, #26
 800238c:	3301      	adds	r3, #1
 800238e:	069b      	lsls	r3, r3, #26
 8002390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002394:	e015      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x4ce>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80023ae:	2320      	movs	r3, #32
 80023b0:	e003      	b.n	80023ba <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80023b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	069b      	lsls	r3, r3, #26
 80023be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x4ee>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	3301      	adds	r3, #1
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	e017      	b.n	8002412 <HAL_ADC_ConfigChannel+0x51e>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e003      	b.n	8002406 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80023fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	ea42 0103 	orr.w	r1, r2, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x544>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	3301      	adds	r3, #1
 800242a:	f003 021f 	and.w	r2, r3, #31
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	051b      	lsls	r3, r3, #20
 8002436:	e018      	b.n	800246a <HAL_ADC_ConfigChannel+0x576>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800244a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002450:	2320      	movs	r3, #32
 8002452:	e003      	b.n	800245c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	3301      	adds	r3, #1
 800245e:	f003 021f 	and.w	r2, r3, #31
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800246a:	430b      	orrs	r3, r1
 800246c:	e081      	b.n	8002572 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002476:	2b00      	cmp	r3, #0
 8002478:	d107      	bne.n	800248a <HAL_ADC_ConfigChannel+0x596>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0e9b      	lsrs	r3, r3, #26
 8002480:	3301      	adds	r3, #1
 8002482:	069b      	lsls	r3, r3, #26
 8002484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002488:	e015      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x5c2>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e003      	b.n	80024ae <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	069b      	lsls	r3, r3, #26
 80024b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x5e2>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	3301      	adds	r3, #1
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	e017      	b.n	8002506 <HAL_ADC_ConfigChannel+0x612>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	61fb      	str	r3, [r7, #28]
  return result;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80024ee:	2320      	movs	r3, #32
 80024f0:	e003      	b.n	80024fa <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	ea42 0103 	orr.w	r1, r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x63e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	3301      	adds	r3, #1
 800251e:	f003 021f 	and.w	r2, r3, #31
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	3b1e      	subs	r3, #30
 800252a:	051b      	lsls	r3, r3, #20
 800252c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002530:	e01e      	b.n	8002570 <HAL_ADC_ConfigChannel+0x67c>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	613b      	str	r3, [r7, #16]
  return result;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e006      	b.n	800255c <HAL_ADC_ConfigChannel+0x668>
 800254e:	bf00      	nop
 8002550:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f003 021f 	and.w	r2, r3, #31
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	3b1e      	subs	r3, #30
 800256a:	051b      	lsls	r3, r3, #20
 800256c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002570:	430b      	orrs	r3, r1
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	6892      	ldr	r2, [r2, #8]
 8002576:	4619      	mov	r1, r3
 8002578:	f7ff fa92 	bl	8001aa0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b48      	ldr	r3, [pc, #288]	; (80026a4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8082 	beq.w	800268e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800258a:	4847      	ldr	r0, [pc, #284]	; (80026a8 <HAL_ADC_ConfigChannel+0x7b4>)
 800258c:	f7ff f9e6 	bl	800195c <LL_ADC_GetCommonPathInternalCh>
 8002590:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002594:	4845      	ldr	r0, [pc, #276]	; (80026ac <HAL_ADC_ConfigChannel+0x7b8>)
 8002596:	f7ff fb21 	bl	8001bdc <LL_ADC_IsEnabled>
 800259a:	4604      	mov	r4, r0
 800259c:	4844      	ldr	r0, [pc, #272]	; (80026b0 <HAL_ADC_ConfigChannel+0x7bc>)
 800259e:	f7ff fb1d 	bl	8001bdc <LL_ADC_IsEnabled>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4323      	orrs	r3, r4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d15e      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a41      	ldr	r2, [pc, #260]	; (80026b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d127      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d121      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a39      	ldr	r2, [pc, #228]	; (80026ac <HAL_ADC_ConfigChannel+0x7b8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d161      	bne.n	800268e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025d2:	4619      	mov	r1, r3
 80025d4:	4834      	ldr	r0, [pc, #208]	; (80026a8 <HAL_ADC_ConfigChannel+0x7b4>)
 80025d6:	f7ff f9ae 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025da:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	4a36      	ldr	r2, [pc, #216]	; (80026bc <HAL_ADC_ConfigChannel+0x7c8>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80025f4:	e002      	b.n	80025fc <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002602:	e044      	b.n	800268e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <HAL_ADC_ConfigChannel+0x7cc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d113      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x742>
 800260e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_ADC_ConfigChannel+0x7b8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d134      	bne.n	800268e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002624:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262c:	4619      	mov	r1, r3
 800262e:	481e      	ldr	r0, [pc, #120]	; (80026a8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002630:	f7ff f981 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002634:	e02b      	b.n	800268e <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <HAL_ADC_ConfigChannel+0x7d0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d126      	bne.n	800268e <HAL_ADC_ConfigChannel+0x79a>
 8002640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d120      	bne.n	800268e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_ADC_ConfigChannel+0x7b8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d11b      	bne.n	800268e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002656:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800265a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800265e:	4619      	mov	r1, r3
 8002660:	4811      	ldr	r0, [pc, #68]	; (80026a8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002662:	f7ff f968 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
 8002666:	e012      	b.n	800268e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800267a:	e008      	b.n	800268e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002696:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800269a:	4618      	mov	r0, r3
 800269c:	37dc      	adds	r7, #220	; 0xdc
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	80080000 	.word	0x80080000
 80026a8:	42028300 	.word	0x42028300
 80026ac:	42028000 	.word	0x42028000
 80026b0:	42028100 	.word	0x42028100
 80026b4:	c7520000 	.word	0xc7520000
 80026b8:	20000000 	.word	0x20000000
 80026bc:	053e2d63 	.word	0x053e2d63
 80026c0:	cb840000 	.word	0xcb840000
 80026c4:	80000001 	.word	0x80000001

080026c8 <LL_ADC_IsEnabled>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <LL_ADC_IsEnabled+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_ADC_IsEnabled+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_REG_IsConversionOngoing>:
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d101      	bne.n	8002706 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b0a1      	sub	sp, #132	; 0x84
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800272e:	2302      	movs	r3, #2
 8002730:	e089      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800273a:	2300      	movs	r3, #0
 800273c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800273e:	2300      	movs	r3, #0
 8002740:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d102      	bne.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800274c:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e001      	b.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e068      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ffb9 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 800277c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffb3 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d14a      	bne.n	8002824 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800278e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002790:	2b00      	cmp	r3, #0
 8002792:	d147      	bne.n	8002824 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002796:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d027      	beq.n	80027f0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027b2:	035b      	lsls	r3, r3, #13
 80027b4:	430b      	orrs	r3, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027bc:	4824      	ldr	r0, [pc, #144]	; (8002850 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80027be:	f7ff ff83 	bl	80026c8 <LL_ADC_IsEnabled>
 80027c2:	4604      	mov	r4, r0
 80027c4:	4823      	ldr	r0, [pc, #140]	; (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80027c6:	f7ff ff7f 	bl	80026c8 <LL_ADC_IsEnabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4323      	orrs	r3, r4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d132      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027da:	f023 030f 	bic.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	6811      	ldr	r1, [r2, #0]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	6892      	ldr	r2, [r2, #8]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ec:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ee:	e023      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027fc:	4814      	ldr	r0, [pc, #80]	; (8002850 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80027fe:	f7ff ff63 	bl	80026c8 <LL_ADC_IsEnabled>
 8002802:	4604      	mov	r4, r0
 8002804:	4813      	ldr	r0, [pc, #76]	; (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002806:	f7ff ff5f 	bl	80026c8 <LL_ADC_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	4323      	orrs	r3, r4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d112      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800281a:	f023 030f 	bic.w	r3, r3, #15
 800281e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002820:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002822:	e009      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002836:	e000      	b.n	800283a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002838:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002842:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002846:	4618      	mov	r0, r3
 8002848:	3784      	adds	r7, #132	; 0x84
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}
 800284e:	bf00      	nop
 8002850:	42028000 	.word	0x42028000
 8002854:	42028100 	.word	0x42028100
 8002858:	42028300 	.word	0x42028300

0800285c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288e:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	60d3      	str	r3, [r2, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <__NVIC_GetPriorityGrouping+0x18>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f003 0307 	and.w	r3, r3, #7
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	db0b      	blt.n	80028ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <__NVIC_EnableIRQ+0x38>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2001      	movs	r0, #1
 80028e2:	fa00 f202 	lsl.w	r2, r0, r2
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	; (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0152      	lsls	r2, r2, #5
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0152      	lsls	r2, r2, #5
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b03      	cmp	r3, #3
 800296c:	bf28      	it	cs
 800296e:	2303      	movcs	r3, #3
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3303      	adds	r3, #3
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b04      	subs	r3, #4
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
         );
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ff4c 	bl	800285c <__NVIC_SetPriorityGrouping>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029da:	f7ff ff63 	bl	80028a4 <__NVIC_GetPriorityGrouping>
 80029de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	6978      	ldr	r0, [r7, #20]
 80029e6:	f7ff ffb3 	bl	8002950 <NVIC_EncodePriority>
 80029ea:	4602      	mov	r2, r0
 80029ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff82 	bl	80028fc <__NVIC_SetPriority>
}
 80029f8:	bf00      	nop
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff56 	bl	80028c0 <__NVIC_EnableIRQ>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e054      	b.n	8002ad8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7f5b      	ldrb	r3, [r3, #29]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd ff36 	bl	80008b0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	791b      	ldrb	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <HAL_CRC_Init+0xc4>)
 8002a58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0218 	bic.w	r2, r2, #24
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	e00c      	b.n	8002a86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	461a      	mov	r2, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f834 	bl	8002ae4 <HAL_CRCEx_Polynomial_Set>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e028      	b.n	8002ad8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	795b      	ldrb	r3, [r3, #5]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d105      	bne.n	8002a9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f04f 32ff 	mov.w	r2, #4294967295
 8002a96:	611a      	str	r2, [r3, #16]
 8002a98:	e004      	b.n	8002aa4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6912      	ldr	r2, [r2, #16]
 8002aa2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	04c11db7 	.word	0x04c11db7

08002ae4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002af4:	231f      	movs	r3, #31
 8002af6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002af8:	bf00      	nop
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	613a      	str	r2, [r7, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <HAL_CRCEx_Polynomial_Set+0x34>
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_CRCEx_Polynomial_Set+0x16>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b18      	cmp	r3, #24
 8002b1c:	d846      	bhi.n	8002bac <HAL_CRCEx_Polynomial_Set+0xc8>
 8002b1e:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002bb3 	.word	0x08002bb3
 8002b28:	08002bad 	.word	0x08002bad
 8002b2c:	08002bad 	.word	0x08002bad
 8002b30:	08002bad 	.word	0x08002bad
 8002b34:	08002bad 	.word	0x08002bad
 8002b38:	08002bad 	.word	0x08002bad
 8002b3c:	08002bad 	.word	0x08002bad
 8002b40:	08002bad 	.word	0x08002bad
 8002b44:	08002ba1 	.word	0x08002ba1
 8002b48:	08002bad 	.word	0x08002bad
 8002b4c:	08002bad 	.word	0x08002bad
 8002b50:	08002bad 	.word	0x08002bad
 8002b54:	08002bad 	.word	0x08002bad
 8002b58:	08002bad 	.word	0x08002bad
 8002b5c:	08002bad 	.word	0x08002bad
 8002b60:	08002bad 	.word	0x08002bad
 8002b64:	08002b95 	.word	0x08002b95
 8002b68:	08002bad 	.word	0x08002bad
 8002b6c:	08002bad 	.word	0x08002bad
 8002b70:	08002bad 	.word	0x08002bad
 8002b74:	08002bad 	.word	0x08002bad
 8002b78:	08002bad 	.word	0x08002bad
 8002b7c:	08002bad 	.word	0x08002bad
 8002b80:	08002bad 	.word	0x08002bad
 8002b84:	08002b89 	.word	0x08002b89
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d913      	bls.n	8002bb6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b92:	e010      	b.n	8002bb6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b07      	cmp	r3, #7
 8002b98:	d90f      	bls.n	8002bba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b9e:	e00c      	b.n	8002bba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	d90b      	bls.n	8002bbe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002baa:	e008      	b.n	8002bbe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	75fb      	strb	r3, [r7, #23]
      break;
 8002bb0:	e006      	b.n	8002bc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e004      	b.n	8002bc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e002      	b.n	8002bc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002bbe:	bf00      	nop
  }
  if (status == HAL_OK)
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 0118 	bic.w	r1, r3, #24
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	371c      	adds	r7, #28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e08d      	b.n	8002d1e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_DMA_Init+0x138>)
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d80f      	bhi.n	8002c2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <HAL_DMA_Init+0x13c>)
 8002c16:	4413      	add	r3, r2
 8002c18:	4a45      	ldr	r2, [pc, #276]	; (8002d30 <HAL_DMA_Init+0x140>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_DMA_Init+0x144>)
 8002c2a:	649a      	str	r2, [r3, #72]	; 0x48
 8002c2c:	e00e      	b.n	8002c4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <HAL_DMA_Init+0x148>)
 8002c36:	4413      	add	r3, r2
 8002c38:	4a3d      	ldr	r2, [pc, #244]	; (8002d30 <HAL_DMA_Init+0x140>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a3c      	ldr	r2, [pc, #240]	; (8002d3c <HAL_DMA_Init+0x14c>)
 8002c4a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002c62:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002c66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa48 	bl	8003134 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cac:	d102      	bne.n	8002cb4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002cc8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_DMA_Init+0x104>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d80c      	bhi.n	8002cf4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa68 	bl	80031b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	e008      	b.n	8002d06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40020407 	.word	0x40020407
 8002d2c:	bffdfff8 	.word	0xbffdfff8
 8002d30:	cccccccd 	.word	0xcccccccd
 8002d34:	40020000 	.word	0x40020000
 8002d38:	bffdfbf8 	.word	0xbffdfbf8
 8002d3c:	40020400 	.word	0x40020400

08002d40 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d008      	beq.n	8002d6a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e040      	b.n	8002dec <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 020e 	bic.w	r2, r2, #14
 8002d78:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9e:	f003 021c 	and.w	r2, r3, #28
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002db6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00c      	beq.n	8002dda <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002dd8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d005      	beq.n	8002e1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2204      	movs	r2, #4
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
 8002e1a:	e047      	b.n	8002eac <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 020e 	bic.w	r2, r2, #14
 8002e2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e50:	f003 021c 	and.w	r2, r3, #28
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002e8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	4798      	blx	r3
    }
  }
  return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	f003 031c 	and.w	r3, r3, #28
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d053      	beq.n	8002f8a <HAL_DMA_IRQHandler+0xd4>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d04e      	beq.n	8002f8a <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d024      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	f003 021c 	and.w	r2, r3, #28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f06:	2104      	movs	r1, #4
 8002f08:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0c:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80c0 	beq.w	80030a6 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f2e:	e0ba      	b.n	80030a6 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80b6 	beq.w	80030a6 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f42:	e0b0      	b.n	80030a6 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d107      	bne.n	8002f62 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0204 	bic.w	r2, r2, #4
 8002f60:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	f003 021c 	and.w	r2, r3, #28
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6e:	2104      	movs	r1, #4
 8002f70:	fa01 f202 	lsl.w	r2, r1, r2
 8002f74:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8093 	beq.w	80030a6 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f88:	e08d      	b.n	80030a6 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	f003 031c 	and.w	r3, r3, #28
 8002f92:	2202      	movs	r2, #2
 8002f94:	409a      	lsls	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d04e      	beq.n	800303c <HAL_DMA_IRQHandler+0x186>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d049      	beq.n	800303c <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d018      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d108      	bne.n	8002fd6 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d06e      	beq.n	80030aa <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002fd4:	e069      	b.n	80030aa <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d065      	beq.n	80030aa <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002fe6:	e060      	b.n	80030aa <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 020a 	bic.w	r2, r2, #10
 8003004:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	f003 021c 	and.w	r2, r3, #28
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301a:	2102      	movs	r1, #2
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03b      	beq.n	80030aa <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800303a:	e036      	b.n	80030aa <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003040:	f003 031c 	and.w	r3, r3, #28
 8003044:	2208      	movs	r2, #8
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02e      	beq.n	80030ae <HAL_DMA_IRQHandler+0x1f8>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d029      	beq.n	80030ae <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 020e 	bic.w	r2, r2, #14
 8003068:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	f003 021c 	and.w	r2, r3, #28
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030a4:	e002      	b.n	80030ac <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80030a6:	bf00      	nop
 80030a8:	e000      	b.n	80030ac <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80030aa:	bf00      	nop
  return;
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
}
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030c4:	b2db      	uxtb	r3, r3
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	72fb      	strb	r3, [r7, #11]
    return status;
 80030ea:	7afb      	ldrb	r3, [r7, #11]
 80030ec:	e01b      	b.n	8003126 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e003      	b.n	800311c <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800311a:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	601a      	str	r2, [r3, #0]

  return status;
 8003124:	7afb      	ldrb	r3, [r7, #11]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003144:	429a      	cmp	r2, r3
 8003146:	d80a      	bhi.n	800315e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003154:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6513      	str	r3, [r2, #80]	; 0x50
 800315c:	e007      	b.n	800316e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	009a      	lsls	r2, r3, #2
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003168:	4413      	add	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3b08      	subs	r3, #8
 8003176:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2201      	movs	r2, #1
 800318e:	409a      	lsls	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40020407 	.word	0x40020407
 80031a4:	40020820 	.word	0x40020820
 80031a8:	cccccccd 	.word	0xcccccccd
 80031ac:	40020880 	.word	0x40020880

080031b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a08      	ldr	r2, [pc, #32]	; (80031f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80031d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2201      	movs	r2, #1
 80031de:	409a      	lsls	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	1000823f 	.word	0x1000823f
 80031f4:	40020940 	.word	0x40020940

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003206:	e158      	b.n	80034ba <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	4013      	ands	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 814a 	beq.w	80034b4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d00b      	beq.n	8003240 <HAL_GPIO_Init+0x48>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d007      	beq.n	8003240 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003234:	2b11      	cmp	r3, #17
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b12      	cmp	r3, #18
 800323e:	d130      	bne.n	80032a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003276:	2201      	movs	r2, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 0201 	and.w	r2, r3, #1
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0xea>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b12      	cmp	r3, #18
 80032e0:	d123      	bne.n	800332a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	6939      	ldr	r1, [r7, #16]
 8003326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0203 	and.w	r2, r3, #3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80a4 	beq.w	80034b4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800336c:	4a5a      	ldr	r2, [pc, #360]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3318      	adds	r3, #24
 8003374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	220f      	movs	r2, #15
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a52      	ldr	r2, [pc, #328]	; (80034dc <HAL_GPIO_Init+0x2e4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d025      	beq.n	80033e4 <HAL_GPIO_Init+0x1ec>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <HAL_GPIO_Init+0x2e8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d01f      	beq.n	80033e0 <HAL_GPIO_Init+0x1e8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_GPIO_Init+0x2ec>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d019      	beq.n	80033dc <HAL_GPIO_Init+0x1e4>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a4f      	ldr	r2, [pc, #316]	; (80034e8 <HAL_GPIO_Init+0x2f0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <HAL_GPIO_Init+0x1e0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a4e      	ldr	r2, [pc, #312]	; (80034ec <HAL_GPIO_Init+0x2f4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00d      	beq.n	80033d4 <HAL_GPIO_Init+0x1dc>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a4d      	ldr	r2, [pc, #308]	; (80034f0 <HAL_GPIO_Init+0x2f8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d007      	beq.n	80033d0 <HAL_GPIO_Init+0x1d8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a4c      	ldr	r2, [pc, #304]	; (80034f4 <HAL_GPIO_Init+0x2fc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_GPIO_Init+0x1d4>
 80033c8:	2306      	movs	r3, #6
 80033ca:	e00c      	b.n	80033e6 <HAL_GPIO_Init+0x1ee>
 80033cc:	2307      	movs	r3, #7
 80033ce:	e00a      	b.n	80033e6 <HAL_GPIO_Init+0x1ee>
 80033d0:	2305      	movs	r3, #5
 80033d2:	e008      	b.n	80033e6 <HAL_GPIO_Init+0x1ee>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e006      	b.n	80033e6 <HAL_GPIO_Init+0x1ee>
 80033d8:	2303      	movs	r3, #3
 80033da:	e004      	b.n	80033e6 <HAL_GPIO_Init+0x1ee>
 80033dc:	2302      	movs	r3, #2
 80033de:	e002      	b.n	80033e6 <HAL_GPIO_Init+0x1ee>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_GPIO_Init+0x1ee>
 80033e4:	2300      	movs	r3, #0
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	f002 0203 	and.w	r2, r2, #3
 80033ec:	00d2      	lsls	r2, r2, #3
 80033ee:	4093      	lsls	r3, r2
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80033f6:	4938      	ldr	r1, [pc, #224]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3318      	adds	r3, #24
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003404:	4b34      	ldr	r3, [pc, #208]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 8003406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	43db      	mvns	r3, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800342a:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003432:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 8003434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003484:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <HAL_GPIO_Init+0x2e0>)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3301      	adds	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f47f ae9f 	bne.w	8003208 <HAL_GPIO_Init+0x10>
  }
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	4002f400 	.word	0x4002f400
 80034dc:	42020000 	.word	0x42020000
 80034e0:	42020400 	.word	0x42020400
 80034e4:	42020800 	.word	0x42020800
 80034e8:	42020c00 	.word	0x42020c00
 80034ec:	42021000 	.word	0x42021000
 80034f0:	42021400 	.word	0x42021400
 80034f4:	42021800 	.word	0x42021800

080034f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
 8003504:	4613      	mov	r3, r2
 8003506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003508:	787b      	ldrb	r3, [r7, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003514:	e002      	b.n	800351c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e081      	b.n	800363e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fade 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2224      	movs	r2, #36	; 0x24
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003578:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003588:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	e006      	b.n	80035b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d104      	bne.n	80035c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	ea42 0103 	orr.w	r1, r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	021a      	lsls	r2, r3, #8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69d9      	ldr	r1, [r3, #28]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	68f9      	ldr	r1, [r7, #12]
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
  }
}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d010      	beq.n	80036c0 <HAL_I2C_ER_IRQHandler+0x46>
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	09db      	lsrs	r3, r3, #7
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d010      	beq.n	80036ee <HAL_I2C_ER_IRQHandler+0x74>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	09db      	lsrs	r3, r3, #7
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	f043 0208 	orr.w	r2, r3, #8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	0a5b      	lsrs	r3, r3, #9
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d010      	beq.n	800371c <HAL_I2C_ER_IRQHandler+0xa2>
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	09db      	lsrs	r3, r3, #7
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0202 	orr.w	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 030b 	and.w	r3, r3, #11
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fb8a 	bl	8003e48 <I2C_ITError>
  }
}
 8003734:	bf00      	nop
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
 8003770:	4613      	mov	r3, r2
 8003772:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <I2C_Slave_ISR_IT+0x24>
 80037dc:	2302      	movs	r3, #2
 80037de:	e0ec      	b.n	80039ba <I2C_Slave_ISR_IT+0x1fe>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <I2C_Slave_ISR_IT+0x4c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003800:	6939      	ldr	r1, [r7, #16]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f9c0 	bl	8003b88 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d04d      	beq.n	80038b0 <I2C_Slave_ISR_IT+0xf4>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d047      	beq.n	80038b0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d128      	bne.n	800387c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b28      	cmp	r3, #40	; 0x28
 8003834:	d108      	bne.n	8003848 <I2C_Slave_ISR_IT+0x8c>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800383c:	d104      	bne.n	8003848 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800383e:	6939      	ldr	r1, [r7, #16]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 faab 	bl	8003d9c <I2C_ITListenCplt>
 8003846:	e032      	b.n	80038ae <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b29      	cmp	r3, #41	; 0x29
 8003852:	d10e      	bne.n	8003872 <I2C_Slave_ISR_IT+0xb6>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800385a:	d00a      	beq.n	8003872 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2210      	movs	r2, #16
 8003862:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fbe6 	bl	8004036 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f92d 	bl	8003aca <I2C_ITSlaveSeqCplt>
 8003870:	e01d      	b.n	80038ae <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2210      	movs	r2, #16
 8003878:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800387a:	e096      	b.n	80039aa <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2210      	movs	r2, #16
 8003882:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <I2C_Slave_ISR_IT+0xe4>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800389c:	f040 8085 	bne.w	80039aa <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	4619      	mov	r1, r3
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 face 	bl	8003e48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80038ac:	e07d      	b.n	80039aa <I2C_Slave_ISR_IT+0x1ee>
 80038ae:	e07c      	b.n	80039aa <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d030      	beq.n	800391e <I2C_Slave_ISR_IT+0x162>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d02a      	beq.n	800391e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d018      	beq.n	8003904 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d14f      	bne.n	80039ae <I2C_Slave_ISR_IT+0x1f2>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003914:	d04b      	beq.n	80039ae <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f8d7 	bl	8003aca <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800391c:	e047      	b.n	80039ae <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	08db      	lsrs	r3, r3, #3
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	08db      	lsrs	r3, r3, #3
 800392e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003936:	6939      	ldr	r1, [r7, #16]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f842 	bl	80039c2 <I2C_ITAddrCplt>
 800393e:	e037      	b.n	80039b0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d031      	beq.n	80039b0 <I2C_Slave_ISR_IT+0x1f4>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02b      	beq.n	80039b0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d018      	beq.n	8003994 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	; 0x28
 8003992:	e00d      	b.n	80039b0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800399a:	d002      	beq.n	80039a2 <I2C_Slave_ISR_IT+0x1e6>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f891 	bl	8003aca <I2C_ITSlaveSeqCplt>
 80039a8:	e002      	b.n	80039b0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80039ae:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039d8:	2b28      	cmp	r3, #40	; 0x28
 80039da:	d16a      	bne.n	8003ab2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	0c1b      	lsrs	r3, r3, #16
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80039fa:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a08:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003a16:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d138      	bne.n	8003a92 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003a20:	897b      	ldrh	r3, [r7, #10]
 8003a22:	09db      	lsrs	r3, r3, #7
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	89bb      	ldrh	r3, [r7, #12]
 8003a28:	4053      	eors	r3, r2
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f003 0306 	and.w	r3, r3, #6
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d11c      	bne.n	8003a6e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003a34:	897b      	ldrh	r3, [r7, #10]
 8003a36:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d13b      	bne.n	8003ac2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2208      	movs	r2, #8
 8003a56:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a60:	89ba      	ldrh	r2, [r7, #12]
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fe7c 	bl	8003764 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a6c:	e029      	b.n	8003ac2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fb1f 	bl	80040ba <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a84:	89ba      	ldrh	r2, [r7, #12]
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff fe6a 	bl	8003764 <HAL_I2C_AddrCallback>
}
 8003a90:	e017      	b.n	8003ac2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fb0f 	bl	80040ba <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003aa4:	89ba      	ldrh	r2, [r7, #12]
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fe5a 	bl	8003764 <HAL_I2C_AddrCallback>
}
 8003ab0:	e007      	b.n	8003ac2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	0b9b      	lsrs	r3, r3, #14
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e00d      	b.n	8003b1c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	0bdb      	lsrs	r3, r3, #15
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b29      	cmp	r3, #41	; 0x29
 8003b26:	d112      	bne.n	8003b4e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2228      	movs	r2, #40	; 0x28
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2221      	movs	r2, #33	; 0x21
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b36:	2101      	movs	r1, #1
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fabe 	bl	80040ba <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fdf8 	bl	800373c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b4c:	e017      	b.n	8003b7e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b2a      	cmp	r3, #42	; 0x2a
 8003b58:	d111      	bne.n	8003b7e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2228      	movs	r2, #40	; 0x28
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2222      	movs	r2, #34	; 0x22
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b68:	2102      	movs	r1, #2
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 faa5 	bl	80040ba <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fde9 	bl	8003750 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2220      	movs	r2, #32
 8003bac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	2b21      	cmp	r3, #33	; 0x21
 8003bb2:	d002      	beq.n	8003bba <I2C_ITSlaveCplt+0x32>
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b29      	cmp	r3, #41	; 0x29
 8003bb8:	d108      	bne.n	8003bcc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003bba:	f248 0101 	movw	r1, #32769	; 0x8001
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa7b 	bl	80040ba <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2221      	movs	r2, #33	; 0x21
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bca:	e00d      	b.n	8003be8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b22      	cmp	r3, #34	; 0x22
 8003bd0:	d002      	beq.n	8003bd8 <I2C_ITSlaveCplt+0x50>
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd6:	d107      	bne.n	8003be8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003bd8:	f248 0102 	movw	r1, #32770	; 0x8002
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fa6c 	bl	80040ba <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2222      	movs	r2, #34	; 0x22
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b64      	ldr	r3, [pc, #400]	; (8003d94 <I2C_ITSlaveCplt+0x20c>)
 8003c04:	400b      	ands	r3, r1
 8003c06:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa14 	bl	8004036 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	0b9b      	lsrs	r3, r3, #14
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d020      	beq.n	8003c74 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c40:	e018      	b.n	8003c74 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	0bdb      	lsrs	r3, r3, #15
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0304 	bic.w	r3, r3, #4
 8003c86:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	f043 0204 	orr.w	r2, r3, #4
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8a7 	bl	8003e48 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b28      	cmp	r3, #40	; 0x28
 8003d04:	d141      	bne.n	8003d8a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d06:	6979      	ldr	r1, [r7, #20]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f847 	bl	8003d9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d0e:	e03c      	b.n	8003d8a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d18:	d014      	beq.n	8003d44 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fed5 	bl	8003aca <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <I2C_ITSlaveCplt+0x210>)
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fd1f 	bl	8003780 <HAL_I2C_ListenCpltCallback>
}
 8003d42:	e022      	b.n	8003d8a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b22      	cmp	r3, #34	; 0x22
 8003d4e:	d10e      	bne.n	8003d6e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff fcf2 	bl	8003750 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d6c:	e00d      	b.n	8003d8a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fcd9 	bl	800373c <HAL_I2C_SlaveTxCpltCallback>
}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	fe00e800 	.word	0xfe00e800
 8003d98:	ffff0000 	.word	0xffff0000

08003d9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <I2C_ITListenCplt+0xa8>)
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d022      	beq.n	8003e1a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f043 0204 	orr.w	r2, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e1a:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f94b 	bl	80040ba <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2210      	movs	r2, #16
 8003e2a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fca3 	bl	8003780 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	ffff0000 	.word	0xffff0000

08003e48 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a5d      	ldr	r2, [pc, #372]	; (8003fdc <I2C_ITError+0x194>)
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b28      	cmp	r3, #40	; 0x28
 8003e7e:	d005      	beq.n	8003e8c <I2C_ITError+0x44>
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b29      	cmp	r3, #41	; 0x29
 8003e84:	d002      	beq.n	8003e8c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b2a      	cmp	r3, #42	; 0x2a
 8003e8a:	d10b      	bne.n	8003ea4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e8c:	2103      	movs	r1, #3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f913 	bl	80040ba <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2228      	movs	r2, #40	; 0x28
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <I2C_ITError+0x198>)
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea2:	e011      	b.n	8003ec8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ea4:	f248 0103 	movw	r1, #32771	; 0x8003
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f906 	bl	80040ba <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b60      	cmp	r3, #96	; 0x60
 8003eb8:	d003      	beq.n	8003ec2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d039      	beq.n	8003f4a <I2C_ITError+0x102>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b11      	cmp	r3, #17
 8003eda:	d002      	beq.n	8003ee2 <I2C_ITError+0x9a>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b21      	cmp	r3, #33	; 0x21
 8003ee0:	d133      	bne.n	8003f4a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef0:	d107      	bne.n	8003f02 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f00:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff f8d5 	bl	80030b6 <HAL_DMA_GetState>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d017      	beq.n	8003f42 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	4a33      	ldr	r2, [pc, #204]	; (8003fe4 <I2C_ITError+0x19c>)
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe ff66 	bl	8002df8 <HAL_DMA_Abort_IT>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d04d      	beq.n	8003fce <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f40:	e045      	b.n	8003fce <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f850 	bl	8003fe8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f48:	e041      	b.n	8003fce <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d039      	beq.n	8003fc6 <I2C_ITError+0x17e>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b12      	cmp	r3, #18
 8003f56:	d002      	beq.n	8003f5e <I2C_ITError+0x116>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b22      	cmp	r3, #34	; 0x22
 8003f5c:	d133      	bne.n	8003fc6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6c:	d107      	bne.n	8003f7e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f7c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f897 	bl	80030b6 <HAL_DMA_GetState>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d017      	beq.n	8003fbe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <I2C_ITError+0x19c>)
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe ff28 	bl	8002df8 <HAL_DMA_Abort_IT>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fbc:	e009      	b.n	8003fd2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f812 	bl	8003fe8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fc4:	e005      	b.n	8003fd2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f80e 	bl	8003fe8 <I2C_TreatErrorCallback>
  }
}
 8003fcc:	e002      	b.n	8003fd4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fd2:	bf00      	nop
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	ffff0000 	.word	0xffff0000
 8003fe0:	080037bd 	.word	0x080037bd
 8003fe4:	0800407f 	.word	0x0800407f

08003fe8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b60      	cmp	r3, #96	; 0x60
 8003ffa:	d10e      	bne.n	800401a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fbc8 	bl	80037a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004018:	e009      	b.n	800402e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fbb3 	bl	8003794 <HAL_I2C_ErrorCallback>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b02      	cmp	r3, #2
 800404a:	d103      	bne.n	8004054 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d007      	beq.n	8004072 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	619a      	str	r2, [r3, #24]
  }
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	2200      	movs	r2, #0
 800409a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7ff ff9b 	bl	8003fe8 <I2C_TreatErrorCallback>
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00f      	beq.n	80040f4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80040da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040e8:	2b28      	cmp	r3, #40	; 0x28
 80040ea:	d003      	beq.n	80040f4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040f2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00f      	beq.n	800411e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004104:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004112:	2b28      	cmp	r3, #40	; 0x28
 8004114:	d003      	beq.n	800411e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800411c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800411e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004122:	2b00      	cmp	r3, #0
 8004124:	da03      	bge.n	800412e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800412c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	2b10      	cmp	r3, #16
 8004132:	d103      	bne.n	800413c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800413a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	2b20      	cmp	r3, #32
 8004140:	d103      	bne.n	800414a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f043 0320 	orr.w	r3, r3, #32
 8004148:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d103      	bne.n	8004158 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004156:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	43da      	mvns	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	400a      	ands	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b20      	cmp	r3, #32
 800418a:	d138      	bne.n	80041fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004196:	2302      	movs	r3, #2
 8004198:	e032      	b.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2224      	movs	r2, #36	; 0x24
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d139      	bne.n	8004296 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800422c:	2302      	movs	r3, #2
 800422e:	e033      	b.n	8004298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800425e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_ICACHE_Enable+0x1c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <HAL_ICACHE_Enable+0x1c>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40030400 	.word	0x40030400

080042c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <HAL_PWREx_GetVoltageRange+0x18>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40007000 	.word	0x40007000

080042e0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80042e8:	4b27      	ldr	r3, [pc, #156]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042f0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80042f2:	f000 f861 	bl	80043b8 <HAL_PWREx_SMPS_GetEffectiveMode>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fc:	d101      	bne.n	8004302 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e03e      	b.n	8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004302:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800430a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430e:	d101      	bne.n	8004314 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e035      	b.n	8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	d101      	bne.n	8004320 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e02f      	b.n	8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004328:	4917      	ldr	r1, [pc, #92]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004330:	4b16      	ldr	r3, [pc, #88]	; (800438c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	4a16      	ldr	r2, [pc, #88]	; (8004390 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	09db      	lsrs	r3, r3, #7
 800433e:	2232      	movs	r2, #50	; 0x32
 8004340:	fb02 f303 	mul.w	r3, r2, r3
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	08db      	lsrs	r3, r3, #3
 800434c:	3301      	adds	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004350:	e002      	b.n	8004358 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3b01      	subs	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004364:	d102      	bne.n	800436c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f2      	bne.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004378:	d101      	bne.n	800437e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e000      	b.n	8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40007000 	.word	0x40007000
 800438c:	20000000 	.word	0x20000000
 8004390:	0a7c5ac5 	.word	0x0a7c5ac5
 8004394:	cccccccd 	.word	0xcccccccd

08004398 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a6:	6093      	str	r3, [r2, #8]
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40007000 	.word	0x40007000

080043b8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80043ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043d2:	607b      	str	r3, [r7, #4]
 80043d4:	e00a      	b.n	80043ec <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d103      	bne.n	80043e8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80043e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	e001      	b.n	80043ec <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80043e8:	2300      	movs	r3, #0
 80043ea:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80043ec:	687b      	ldr	r3, [r7, #4]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40007000 	.word	0x40007000

08004400 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f000 bcd0 	b.w	8004db4 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004414:	4ba3      	ldr	r3, [pc, #652]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
 800441c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800441e:	4ba1      	ldr	r3, [pc, #644]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80e9 	beq.w	8004608 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d006      	beq.n	800444a <HAL_RCC_OscConfig+0x4a>
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b0c      	cmp	r3, #12
 8004440:	f040 8083 	bne.w	800454a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d17f      	bne.n	800454a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800444a:	4b96      	ldr	r3, [pc, #600]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d006      	beq.n	8004464 <HAL_RCC_OscConfig+0x64>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	f000 bca8 	b.w	8004db4 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004468:	4b8e      	ldr	r3, [pc, #568]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d004      	beq.n	800447e <HAL_RCC_OscConfig+0x7e>
 8004474:	4b8b      	ldr	r3, [pc, #556]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447c:	e005      	b.n	800448a <HAL_RCC_OscConfig+0x8a>
 800447e:	4b89      	ldr	r3, [pc, #548]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448a:	4293      	cmp	r3, r2
 800448c:	d224      	bcs.n	80044d8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	4618      	mov	r0, r3
 8004494:	f000 feca 	bl	800522c <RCC_SetFlashLatencyFromMSIRange>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f000 bc88 	b.w	8004db4 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044a4:	4b7f      	ldr	r3, [pc, #508]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a7e      	ldr	r2, [pc, #504]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044aa:	f043 0308 	orr.w	r3, r3, #8
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b7c      	ldr	r3, [pc, #496]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	4979      	ldr	r1, [pc, #484]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c2:	4b78      	ldr	r3, [pc, #480]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	4974      	ldr	r1, [pc, #464]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	604b      	str	r3, [r1, #4]
 80044d6:	e026      	b.n	8004526 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044d8:	4b72      	ldr	r3, [pc, #456]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a71      	ldr	r2, [pc, #452]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044de:	f043 0308 	orr.w	r3, r3, #8
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b6f      	ldr	r3, [pc, #444]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	496c      	ldr	r1, [pc, #432]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f6:	4b6b      	ldr	r3, [pc, #428]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	4967      	ldr	r1, [pc, #412]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004506:	4313      	orrs	r3, r2
 8004508:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fe89 	bl	800522c <RCC_SetFlashLatencyFromMSIRange>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f000 bc47 	b.w	8004db4 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004526:	f000 fe13 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 800452a:	4603      	mov	r3, r0
 800452c:	4a5e      	ldr	r2, [pc, #376]	; (80046a8 <HAL_RCC_OscConfig+0x2a8>)
 800452e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004530:	4b5e      	ldr	r3, [pc, #376]	; (80046ac <HAL_RCC_OscConfig+0x2ac>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc fd13 	bl	8000f60 <HAL_InitTick>
 800453a:	4603      	mov	r3, r0
 800453c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d060      	beq.n	8004606 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	f000 bc35 	b.w	8004db4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d039      	beq.n	80045c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004552:	4b54      	ldr	r3, [pc, #336]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a53      	ldr	r2, [pc, #332]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800455e:	f7fd f957 	bl	8001810 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004564:	e00f      	b.n	8004586 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004566:	f7fd f953 	bl	8001810 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d908      	bls.n	8004586 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004574:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	f000 bc17 	b.w	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0e9      	beq.n	8004566 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004592:	4b44      	ldr	r3, [pc, #272]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a43      	ldr	r2, [pc, #268]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004598:	f043 0308 	orr.w	r3, r3, #8
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	493e      	ldr	r1, [pc, #248]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045b0:	4b3c      	ldr	r3, [pc, #240]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	4939      	ldr	r1, [pc, #228]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	604b      	str	r3, [r1, #4]
 80045c4:	e020      	b.n	8004608 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045c6:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a36      	ldr	r2, [pc, #216]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045d2:	f7fd f91d 	bl	8001810 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045d8:	e00e      	b.n	80045f8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045da:	f7fd f919 	bl	8001810 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d907      	bls.n	80045f8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045e8:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e3dd      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045f8:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ea      	bne.n	80045da <HAL_RCC_OscConfig+0x1da>
 8004604:	e000      	b.n	8004608 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004606:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d07e      	beq.n	8004712 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b08      	cmp	r3, #8
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x226>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b0c      	cmp	r3, #12
 800461e:	d10e      	bne.n	800463e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d10b      	bne.n	800463e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004626:	4b1f      	ldr	r3, [pc, #124]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d06e      	beq.n	8004710 <HAL_RCC_OscConfig+0x310>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d16a      	bne.n	8004710 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e3ba      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004646:	d106      	bne.n	8004656 <HAL_RCC_OscConfig+0x256>
 8004648:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 800464e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	e01d      	b.n	8004692 <HAL_RCC_OscConfig+0x292>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800465e:	d10c      	bne.n	800467a <HAL_RCC_OscConfig+0x27a>
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0c      	ldr	r2, [pc, #48]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e00b      	b.n	8004692 <HAL_RCC_OscConfig+0x292>
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a06      	ldr	r2, [pc, #24]	; (80046a4 <HAL_RCC_OscConfig+0x2a4>)
 800468c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004690:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d020      	beq.n	80046dc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fd f8b9 	bl	8001810 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046a0:	e015      	b.n	80046ce <HAL_RCC_OscConfig+0x2ce>
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000
 80046a8:	20000000 	.word	0x20000000
 80046ac:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fd f8ae 	bl	8001810 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d907      	bls.n	80046ce <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046be:	4b9f      	ldr	r3, [pc, #636]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e372      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ce:	4b9b      	ldr	r3, [pc, #620]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0ea      	beq.n	80046b0 <HAL_RCC_OscConfig+0x2b0>
 80046da:	e01a      	b.n	8004712 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd f898 	bl	8001810 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046e2:	e00e      	b.n	8004702 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fd f894 	bl	8001810 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d907      	bls.n	8004702 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046f2:	4b92      	ldr	r3, [pc, #584]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e358      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004702:	4b8e      	ldr	r3, [pc, #568]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1ea      	bne.n	80046e4 <HAL_RCC_OscConfig+0x2e4>
 800470e:	e000      	b.n	8004712 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d06c      	beq.n	80047f8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d005      	beq.n	8004730 <HAL_RCC_OscConfig+0x330>
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d119      	bne.n	800475e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d116      	bne.n	800475e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004730:	4b82      	ldr	r3, [pc, #520]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_OscConfig+0x348>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e335      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004748:	4b7c      	ldr	r3, [pc, #496]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	4979      	ldr	r1, [pc, #484]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800475c:	e04c      	b.n	80047f8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d029      	beq.n	80047ba <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004766:	4b75      	ldr	r3, [pc, #468]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a74      	ldr	r2, [pc, #464]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fd f84d 	bl	8001810 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004778:	e00e      	b.n	8004798 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477a:	f7fd f849 	bl	8001810 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d907      	bls.n	8004798 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004788:	4b6c      	ldr	r3, [pc, #432]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e30d      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004798:	4b68      	ldr	r3, [pc, #416]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ea      	beq.n	800477a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a4:	4b65      	ldr	r3, [pc, #404]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	4962      	ldr	r1, [pc, #392]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
 80047b8:	e01e      	b.n	80047f8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ba:	4b60      	ldr	r3, [pc, #384]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a5f      	ldr	r2, [pc, #380]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80047c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fd f823 	bl	8001810 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047cc:	e00e      	b.n	80047ec <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ce:	f7fd f81f 	bl	8001810 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d907      	bls.n	80047ec <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047dc:	4b57      	ldr	r3, [pc, #348]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e2e3      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047ec:	4b53      	ldr	r3, [pc, #332]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1ea      	bne.n	80047ce <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d05f      	beq.n	80048c4 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d038      	beq.n	800487e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d108      	bne.n	8004826 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004814:	4b49      	ldr	r3, [pc, #292]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481a:	4a48      	ldr	r2, [pc, #288]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 800481c:	f023 0310 	bic.w	r3, r3, #16
 8004820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004824:	e007      	b.n	8004836 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004826:	4b45      	ldr	r3, [pc, #276]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482c:	4a43      	ldr	r2, [pc, #268]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 800482e:	f043 0310 	orr.w	r3, r3, #16
 8004832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004836:	4b41      	ldr	r3, [pc, #260]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483c:	4a3f      	ldr	r2, [pc, #252]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004846:	f7fc ffe3 	bl	8001810 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800484c:	e00f      	b.n	800486e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484e:	f7fc ffdf 	bl	8001810 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b07      	cmp	r3, #7
 800485a:	d908      	bls.n	800486e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485c:	4b37      	ldr	r3, [pc, #220]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 800485e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e2a2      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800486e:	4b33      	ldr	r3, [pc, #204]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0e8      	beq.n	800484e <HAL_RCC_OscConfig+0x44e>
 800487c:	e022      	b.n	80048c4 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487e:	4b2f      	ldr	r3, [pc, #188]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004884:	4a2d      	ldr	r2, [pc, #180]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488e:	f7fc ffbf 	bl	8001810 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004894:	e00f      	b.n	80048b6 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004896:	f7fc ffbb 	bl	8001810 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b07      	cmp	r3, #7
 80048a2:	d908      	bls.n	80048b6 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a4:	4b25      	ldr	r3, [pc, #148]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80048a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e27e      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b6:	4b21      	ldr	r3, [pc, #132]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80048b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e8      	bne.n	8004896 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8131 	beq.w	8004b34 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048d6:	4b19      	ldr	r3, [pc, #100]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10d      	bne.n	80048fe <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	4a15      	ldr	r2, [pc, #84]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80048e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ec:	6593      	str	r3, [r2, #88]	; 0x58
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_RCC_OscConfig+0x53c>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fa:	2301      	movs	r3, #1
 80048fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_RCC_OscConfig+0x540>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d122      	bne.n	8004950 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <HAL_RCC_OscConfig+0x540>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a0c      	ldr	r2, [pc, #48]	; (8004940 <HAL_RCC_OscConfig+0x540>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004916:	f7fc ff7b 	bl	8001810 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800491c:	e012      	b.n	8004944 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fc ff77 	bl	8001810 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d90b      	bls.n	8004944 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <HAL_RCC_OscConfig+0x540>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e23b      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
 800493c:	40021000 	.word	0x40021000
 8004940:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004944:	4bb8      	ldr	r3, [pc, #736]	; (8004c28 <HAL_RCC_OscConfig+0x828>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0e6      	beq.n	800491e <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01f      	beq.n	800499c <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d010      	beq.n	800498a <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004968:	4bb0      	ldr	r3, [pc, #704]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	4aaf      	ldr	r2, [pc, #700]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004978:	4bac      	ldr	r3, [pc, #688]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	4aab      	ldr	r2, [pc, #684]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004988:	e018      	b.n	80049bc <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800498a:	4ba8      	ldr	r3, [pc, #672]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	4aa6      	ldr	r2, [pc, #664]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800499a:	e00f      	b.n	80049bc <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800499c:	4ba3      	ldr	r3, [pc, #652]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	4aa2      	ldr	r2, [pc, #648]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049ac:	4b9f      	ldr	r3, [pc, #636]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	4a9e      	ldr	r2, [pc, #632]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d068      	beq.n	8004a96 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fc ff24 	bl	8001810 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ca:	e011      	b.n	80049f0 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fc ff20 	bl	8001810 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d908      	bls.n	80049f0 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049de:	4b93      	ldr	r3, [pc, #588]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e1e1      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f0:	4b8e      	ldr	r3, [pc, #568]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0e6      	beq.n	80049cc <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d022      	beq.n	8004a50 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a0a:	4b88      	ldr	r3, [pc, #544]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	4a86      	ldr	r2, [pc, #536]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a1a:	e011      	b.n	8004a40 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1c:	f7fc fef8 	bl	8001810 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d908      	bls.n	8004a40 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a2e:	4b7f      	ldr	r3, [pc, #508]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e1b9      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a40:	4b7a      	ldr	r3, [pc, #488]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0e6      	beq.n	8004a1c <HAL_RCC_OscConfig+0x61c>
 8004a4e:	e068      	b.n	8004b22 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a50:	4b76      	ldr	r3, [pc, #472]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	4a75      	ldr	r2, [pc, #468]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a60:	e011      	b.n	8004a86 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fc fed5 	bl	8001810 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d908      	bls.n	8004a86 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a74:	4b6d      	ldr	r3, [pc, #436]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e196      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a86:	4b69      	ldr	r3, [pc, #420]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e6      	bne.n	8004a62 <HAL_RCC_OscConfig+0x662>
 8004a94:	e045      	b.n	8004b22 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a96:	f7fc febb 	bl	8001810 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a9c:	e011      	b.n	8004ac2 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9e:	f7fc feb7 	bl	8001810 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d908      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ab0:	4b5e      	ldr	r3, [pc, #376]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e178      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ac2:	4b5a      	ldr	r3, [pc, #360]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004ad0:	4b56      	ldr	r3, [pc, #344]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d021      	beq.n	8004b22 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ade:	4b53      	ldr	r3, [pc, #332]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae4:	4a51      	ldr	r2, [pc, #324]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004aee:	e011      	b.n	8004b14 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f7fc fe8e 	bl	8001810 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d908      	bls.n	8004b14 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b02:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e14f      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b14:	4b45      	ldr	r3, [pc, #276]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e6      	bne.n	8004af0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b22:	7ffb      	ldrb	r3, [r7, #31]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d105      	bne.n	8004b34 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b28:	4b40      	ldr	r3, [pc, #256]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	4a3f      	ldr	r2, [pc, #252]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d04a      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d023      	beq.n	8004b90 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b48:	4b38      	ldr	r3, [pc, #224]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4e:	4a37      	ldr	r2, [pc, #220]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fc fe5a 	bl	8001810 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b5e:	e00f      	b.n	8004b80 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b60:	f7fc fe56 	bl	8001810 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d908      	bls.n	8004b80 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b6e:	4b2f      	ldr	r3, [pc, #188]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e119      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b80:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0e8      	beq.n	8004b60 <HAL_RCC_OscConfig+0x760>
 8004b8e:	e022      	b.n	8004bd6 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b90:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b96:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fc fe36 	bl	8001810 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ba6:	e00f      	b.n	8004bc8 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba8:	f7fc fe32 	bl	8001810 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d908      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e0f5      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bc8:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e8      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80e9 	beq.w	8004db2 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be0:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	f000 80a3 	beq.w	8004d34 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d16a      	bne.n	8004ccc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fc fe05 	bl	8001810 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c08:	e012      	b.n	8004c30 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0a:	f7fc fe01 	bl	8001810 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d90b      	bls.n	8004c30 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <HAL_RCC_OscConfig+0x82c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0c5      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
 8004c28:	40007000 	.word	0x40007000
 8004c2c:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c30:	4b62      	ldr	r3, [pc, #392]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e6      	bne.n	8004c0a <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c3c:	4b5f      	ldr	r3, [pc, #380]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	4b5f      	ldr	r3, [pc, #380]	; (8004dc0 <HAL_RCC_OscConfig+0x9c0>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0112      	lsls	r2, r2, #4
 8004c50:	4311      	orrs	r1, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c56:	0212      	lsls	r2, r2, #8
 8004c58:	4311      	orrs	r1, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c5e:	0852      	lsrs	r2, r2, #1
 8004c60:	3a01      	subs	r2, #1
 8004c62:	0552      	lsls	r2, r2, #21
 8004c64:	4311      	orrs	r1, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c6a:	0852      	lsrs	r2, r2, #1
 8004c6c:	3a01      	subs	r2, #1
 8004c6e:	0652      	lsls	r2, r2, #25
 8004c70:	4311      	orrs	r1, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c76:	06d2      	lsls	r2, r2, #27
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	4950      	ldr	r1, [pc, #320]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c80:	4b4e      	ldr	r3, [pc, #312]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a4d      	ldr	r2, [pc, #308]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c8c:	4b4b      	ldr	r3, [pc, #300]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fc fdba 	bl	8001810 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9e:	e00e      	b.n	8004cbe <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca0:	f7fc fdb6 	bl	8001810 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d907      	bls.n	8004cbe <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cae:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e07a      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cbe:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ea      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x8a0>
 8004cca:	e072      	b.n	8004db2 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ccc:	4b3b      	ldr	r3, [pc, #236]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3a      	ldr	r2, [pc, #232]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004cd8:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ce4:	4b35      	ldr	r3, [pc, #212]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a34      	ldr	r2, [pc, #208]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a31      	ldr	r2, [pc, #196]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004cf6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fc fd86 	bl	8001810 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d06:	e00e      	b.n	8004d26 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fc fd82 	bl	8001810 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d907      	bls.n	8004d26 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e046      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d26:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ea      	bne.n	8004d08 <HAL_RCC_OscConfig+0x908>
 8004d32:	e03e      	b.n	8004db2 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e039      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004d40:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <HAL_RCC_OscConfig+0x9bc>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f003 0203 	and.w	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d12c      	bne.n	8004dae <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d123      	bne.n	8004dae <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d11b      	bne.n	8004dae <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d113      	bne.n	8004dae <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	3b01      	subs	r3, #1
 8004d94:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d109      	bne.n	8004dae <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	3b01      	subs	r3, #1
 8004da8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d001      	beq.n	8004db2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	019f800c 	.word	0x019f800c

08004dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e10d      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ddc:	4b88      	ldr	r3, [pc, #544]	; (8005000 <HAL_RCC_ClockConfig+0x23c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d910      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dea:	4b85      	ldr	r3, [pc, #532]	; (8005000 <HAL_RCC_ClockConfig+0x23c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 020f 	bic.w	r2, r3, #15
 8004df2:	4983      	ldr	r1, [pc, #524]	; (8005000 <HAL_RCC_ClockConfig+0x23c>)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	4b81      	ldr	r3, [pc, #516]	; (8005000 <HAL_RCC_ClockConfig+0x23c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0f5      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8094 	beq.w	8004f42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d134      	bne.n	8004e8c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e22:	4b78      	ldr	r3, [pc, #480]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e0e2      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e32:	f000 fa5f 	bl	80052f4 <RCC_GetSysClockFreqFromPLLSource>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4a73      	ldr	r2, [pc, #460]	; (8005008 <HAL_RCC_ClockConfig+0x244>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d956      	bls.n	8004eee <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e40:	4b70      	ldr	r3, [pc, #448]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e4c:	4b6d      	ldr	r3, [pc, #436]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e54:	4a6b      	ldr	r2, [pc, #428]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	e045      	b.n	8004eee <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d03f      	beq.n	8004eee <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13b      	bne.n	8004eee <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e76:	4b63      	ldr	r3, [pc, #396]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e7e:	4a61      	ldr	r2, [pc, #388]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e86:	2380      	movs	r3, #128	; 0x80
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e030      	b.n	8004eee <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e94:	4b5b      	ldr	r3, [pc, #364]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d115      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0a9      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d107      	bne.n	8004ebc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eac:	4b55      	ldr	r3, [pc, #340]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e09d      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ebc:	4b51      	ldr	r3, [pc, #324]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e095      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ecc:	f000 f8a2 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8004ed0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4a4c      	ldr	r2, [pc, #304]	; (8005008 <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d909      	bls.n	8004eee <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eda:	4b4a      	ldr	r3, [pc, #296]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ee2:	4a48      	ldr	r2, [pc, #288]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eee:	4b45      	ldr	r3, [pc, #276]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4942      	ldr	r1, [pc, #264]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f00:	f7fc fc86 	bl	8001810 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	e013      	b.n	8004f30 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f08:	f7fc fc82 	bl	8001810 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d90a      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	4b3a      	ldr	r3, [pc, #232]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 020c 	and.w	r2, r3, #12
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e063      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f30:	4b34      	ldr	r3, [pc, #208]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 020c 	and.w	r2, r3, #12
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d1e2      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4e:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	492a      	ldr	r1, [pc, #168]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	608b      	str	r3, [r1, #8]
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b80      	cmp	r3, #128	; 0x80
 8004f66:	d105      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f68:	4b26      	ldr	r3, [pc, #152]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	4a25      	ldr	r2, [pc, #148]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f72:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f74:	4b22      	ldr	r3, [pc, #136]	; (8005000 <HAL_RCC_ClockConfig+0x23c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d210      	bcs.n	8004fa4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <HAL_RCC_ClockConfig+0x23c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 020f 	bic.w	r2, r3, #15
 8004f8a:	491d      	ldr	r1, [pc, #116]	; (8005000 <HAL_RCC_ClockConfig+0x23c>)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_RCC_ClockConfig+0x23c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e029      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4911      	ldr	r1, [pc, #68]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4909      	ldr	r1, [pc, #36]	; (8005004 <HAL_RCC_ClockConfig+0x240>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004fe2:	f000 f8b5 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4a08      	ldr	r2, [pc, #32]	; (800500c <HAL_RCC_ClockConfig+0x248>)
 8004fea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fec:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_RCC_ClockConfig+0x24c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fb ffb5 	bl	8000f60 <HAL_InitTick>
 8004ff6:	4603      	mov	r3, r0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40022000 	.word	0x40022000
 8005004:	40021000 	.word	0x40021000
 8005008:	04c4b400 	.word	0x04c4b400
 800500c:	20000000 	.word	0x20000000
 8005010:	20000004 	.word	0x20000004

08005014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005014:	b480      	push	{r7}
 8005016:	b089      	sub	sp, #36	; 0x24
 8005018:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005022:	4b47      	ldr	r3, [pc, #284]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800502c:	4b44      	ldr	r3, [pc, #272]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0x34>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d121      	bne.n	8005086 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d11e      	bne.n	8005086 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005048:	4b3d      	ldr	r3, [pc, #244]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d107      	bne.n	8005064 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005054:	4b3a      	ldr	r3, [pc, #232]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	e005      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005064:	4b36      	ldr	r3, [pc, #216]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005070:	4a34      	ldr	r2, [pc, #208]	; (8005144 <HAL_RCC_GetSysClockFreq+0x130>)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005078:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10d      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005084:	e00a      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d102      	bne.n	8005092 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800508c:	4b2e      	ldr	r3, [pc, #184]	; (8005148 <HAL_RCC_GetSysClockFreq+0x134>)
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e004      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d101      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005098:	4b2c      	ldr	r3, [pc, #176]	; (800514c <HAL_RCC_GetSysClockFreq+0x138>)
 800509a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d146      	bne.n	8005130 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80050a2:	4b27      	ldr	r3, [pc, #156]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050ac:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3301      	adds	r3, #1
 80050b8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d003      	beq.n	80050c8 <HAL_RCC_GetSysClockFreq+0xb4>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d00d      	beq.n	80050e2 <HAL_RCC_GetSysClockFreq+0xce>
 80050c6:	e019      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050c8:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <HAL_RCC_GetSysClockFreq+0x134>)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050d2:	68d2      	ldr	r2, [r2, #12]
 80050d4:	0a12      	lsrs	r2, r2, #8
 80050d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	617b      	str	r3, [r7, #20]
        break;
 80050e0:	e019      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e2:	4a1a      	ldr	r2, [pc, #104]	; (800514c <HAL_RCC_GetSysClockFreq+0x138>)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	4a15      	ldr	r2, [pc, #84]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 80050ec:	68d2      	ldr	r2, [r2, #12]
 80050ee:	0a12      	lsrs	r2, r2, #8
 80050f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
        break;
 80050fa:	e00c      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005106:	68d2      	ldr	r2, [r2, #12]
 8005108:	0a12      	lsrs	r2, r2, #8
 800510a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	617b      	str	r3, [r7, #20]
        break;
 8005114:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	0e5b      	lsrs	r3, r3, #25
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	3301      	adds	r3, #1
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005130:	69bb      	ldr	r3, [r7, #24]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3724      	adds	r7, #36	; 0x24
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40021000 	.word	0x40021000
 8005144:	0800acf8 	.word	0x0800acf8
 8005148:	00f42400 	.word	0x00f42400
 800514c:	007a1200 	.word	0x007a1200

08005150 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005154:	f7ff ff5e 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCC_GetHCLKFreq+0x20>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	4903      	ldr	r1, [pc, #12]	; (8005174 <HAL_RCC_GetHCLKFreq+0x24>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	0800ace0 	.word	0x0800ace0

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800517c:	f7ff ffe8 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	; (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	0800acf0 	.word	0x0800acf0

080051a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051a4:	f7ff ffd4 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0adb      	lsrs	r3, r3, #11
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4903      	ldr	r1, [pc, #12]	; (80051c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40021000 	.word	0x40021000
 80051c4:	0800acf0 	.word	0x0800acf0

080051c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	220f      	movs	r2, #15
 80051d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_RCC_GetClockConfig+0x5c>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0203 	and.w	r2, r3, #3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <HAL_RCC_GetClockConfig+0x5c>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <HAL_RCC_GetClockConfig+0x5c>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <HAL_RCC_GetClockConfig+0x5c>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	08db      	lsrs	r3, r3, #3
 8005202:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <HAL_RCC_GetClockConfig+0x60>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 020f 	and.w	r2, r3, #15
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	601a      	str	r2, [r3, #0]
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40021000 	.word	0x40021000
 8005228:	40022000 	.word	0x40022000

0800522c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005238:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005244:	f7ff f83e 	bl	80042c4 <HAL_PWREx_GetVoltageRange>
 8005248:	6138      	str	r0, [r7, #16]
 800524a:	e014      	b.n	8005276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	4a26      	ldr	r2, [pc, #152]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005256:	6593      	str	r3, [r2, #88]	; 0x58
 8005258:	4b24      	ldr	r3, [pc, #144]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005264:	f7ff f82e 	bl	80042c4 <HAL_PWREx_GetVoltageRange>
 8005268:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800526a:	4b20      	ldr	r3, [pc, #128]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005274:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005282:	d10b      	bne.n	800529c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	d919      	bls.n	80052be <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2ba0      	cmp	r3, #160	; 0xa0
 800528e:	d902      	bls.n	8005296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005290:	2302      	movs	r3, #2
 8005292:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005294:	e013      	b.n	80052be <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005296:	2301      	movs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800529a:	e010      	b.n	80052be <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d902      	bls.n	80052a8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052a2:	2303      	movs	r3, #3
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e00a      	b.n	80052be <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b80      	cmp	r3, #128	; 0x80
 80052ac:	d102      	bne.n	80052b4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052ae:	2302      	movs	r3, #2
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	e004      	b.n	80052be <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b70      	cmp	r3, #112	; 0x70
 80052b8:	d101      	bne.n	80052be <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052ba:	2301      	movs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 020f 	bic.w	r2, r3, #15
 80052c6:	490a      	ldr	r1, [pc, #40]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80052ce:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40022000 	.word	0x40022000

080052f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80052fe:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d118      	bne.n	800533c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800530a:	4b33      	ldr	r3, [pc, #204]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d107      	bne.n	8005326 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005316:	4b30      	ldr	r3, [pc, #192]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e005      	b.n	8005332 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005326:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005332:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800533c:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005346:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	3301      	adds	r3, #1
 8005352:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d003      	beq.n	8005362 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d00d      	beq.n	800537c <RCC_GetSysClockFreqFromPLLSource+0x88>
 8005360:	e019      	b.n	8005396 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005362:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800536c:	68d2      	ldr	r2, [r2, #12]
 800536e:	0a12      	lsrs	r2, r2, #8
 8005370:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	613b      	str	r3, [r7, #16]
      break;
 800537a:	e019      	b.n	80053b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8005386:	68d2      	ldr	r2, [r2, #12]
 8005388:	0a12      	lsrs	r2, r2, #8
 800538a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	613b      	str	r3, [r7, #16]
      break;
 8005394:	e00c      	b.n	80053b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4a0e      	ldr	r2, [pc, #56]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80053a0:	68d2      	ldr	r2, [r2, #12]
 80053a2:	0a12      	lsrs	r2, r2, #8
 80053a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
 80053ac:	613b      	str	r3, [r7, #16]
      break;
 80053ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	0e5b      	lsrs	r3, r3, #25
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	3301      	adds	r3, #1
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80053ca:	683b      	ldr	r3, [r7, #0]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40021000 	.word	0x40021000
 80053dc:	0800acf8 	.word	0x0800acf8
 80053e0:	00f42400 	.word	0x00f42400
 80053e4:	007a1200 	.word	0x007a1200

080053e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053f0:	2300      	movs	r3, #0
 80053f2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f4:	2300      	movs	r3, #0
 80053f6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005400:	2b00      	cmp	r3, #0
 8005402:	d040      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005408:	2b80      	cmp	r3, #128	; 0x80
 800540a:	d02a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d825      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005410:	2b60      	cmp	r3, #96	; 0x60
 8005412:	d026      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005414:	2b60      	cmp	r3, #96	; 0x60
 8005416:	d821      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d006      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d81d      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d010      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005428:	e018      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800542a:	4b8f      	ldr	r3, [pc, #572]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	4a8e      	ldr	r2, [pc, #568]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005436:	e015      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3304      	adds	r3, #4
 800543c:	2100      	movs	r1, #0
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fb56 	bl	8005af0 <RCCEx_PLLSAI1_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005448:	e00c      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3320      	adds	r3, #32
 800544e:	2100      	movs	r1, #0
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fc33 	bl	8005cbc <RCCEx_PLLSAI2_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800545a:	e003      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	77fb      	strb	r3, [r7, #31]
        break;
 8005460:	e000      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005464:	7ffb      	ldrb	r3, [r7, #31]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800546a:	4b7f      	ldr	r3, [pc, #508]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800546c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005470:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005478:	497b      	ldr	r1, [pc, #492]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005480:	e001      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	7ffb      	ldrb	r3, [r7, #31]
 8005484:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d047      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549a:	d030      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a0:	d82a      	bhi.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80054a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a6:	d02a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 80054a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ac:	d824      	bhi.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80054ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b2:	d008      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b8:	d81e      	bhi.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80054be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c2:	d010      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80054c4:	e018      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054c6:	4b68      	ldr	r3, [pc, #416]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	4a67      	ldr	r2, [pc, #412]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80054d2:	e015      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	2100      	movs	r1, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fb08 	bl	8005af0 <RCCEx_PLLSAI1_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80054e4:	e00c      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3320      	adds	r3, #32
 80054ea:	2100      	movs	r1, #0
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fbe5 	bl	8005cbc <RCCEx_PLLSAI2_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80054f6:	e003      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	77fb      	strb	r3, [r7, #31]
        break;
 80054fc:	e000      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80054fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005500:	7ffb      	ldrb	r3, [r7, #31]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005506:	4b58      	ldr	r3, [pc, #352]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005508:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800550c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005514:	4954      	ldr	r1, [pc, #336]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800551c:	e001      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551e:	7ffb      	ldrb	r3, [r7, #31]
 8005520:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80ab 	beq.w	8005686 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005530:	2300      	movs	r3, #0
 8005532:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005534:	4b4c      	ldr	r3, [pc, #304]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10d      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005540:	4b49      	ldr	r3, [pc, #292]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	4a48      	ldr	r2, [pc, #288]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554a:	6593      	str	r3, [r2, #88]	; 0x58
 800554c:	4b46      	ldr	r3, [pc, #280]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800554e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005558:	2301      	movs	r3, #1
 800555a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800555c:	4b43      	ldr	r3, [pc, #268]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a42      	ldr	r2, [pc, #264]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005568:	f7fc f952 	bl	8001810 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800556e:	e00f      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005570:	f7fc f94e 	bl	8001810 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d908      	bls.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800557e:	4b3b      	ldr	r3, [pc, #236]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800558e:	e006      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005590:	4b36      	ldr	r3, [pc, #216]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0e9      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800559c:	e000      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800559e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80055a0:	7ffb      	ldrb	r3, [r7, #31]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d164      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055a6:	4b30      	ldr	r3, [pc, #192]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01f      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d019      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055c4:	4b28      	ldr	r3, [pc, #160]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ce:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055d0:	4b25      	ldr	r3, [pc, #148]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	4a24      	ldr	r2, [pc, #144]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055e0:	4b21      	ldr	r3, [pc, #132]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	4a20      	ldr	r2, [pc, #128]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01f      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fc f905 	bl	8001810 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005608:	e012      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560a:	f7fc f901 	bl	8001810 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f241 3288 	movw	r2, #5000	; 0x1388
 8005618:	4293      	cmp	r3, r2
 800561a:	d909      	bls.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800561c:	4b12      	ldr	r3, [pc, #72]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800562e:	e007      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005630:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0e5      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800563e:	e000      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005640:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005642:	7ffb      	ldrb	r3, [r7, #31]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005658:	4903      	ldr	r1, [pc, #12]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005662:	7ffb      	ldrb	r3, [r7, #31]
 8005664:	77bb      	strb	r3, [r7, #30]
 8005666:	e005      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005668:	40021000 	.word	0x40021000
 800566c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	7ffb      	ldrb	r3, [r7, #31]
 8005672:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d105      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567a:	4baf      	ldr	r3, [pc, #700]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	4aae      	ldr	r2, [pc, #696]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005684:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005692:	4ba9      	ldr	r3, [pc, #676]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f023 0203 	bic.w	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a0:	49a5      	ldr	r1, [pc, #660]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056b4:	4ba0      	ldr	r3, [pc, #640]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f023 020c 	bic.w	r2, r3, #12
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	499d      	ldr	r1, [pc, #628]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056d6:	4b98      	ldr	r3, [pc, #608]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	4994      	ldr	r1, [pc, #592]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056f8:	4b8f      	ldr	r3, [pc, #572]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	498c      	ldr	r1, [pc, #560]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800571a:	4b87      	ldr	r3, [pc, #540]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005728:	4983      	ldr	r1, [pc, #524]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800573c:	4b7e      	ldr	r3, [pc, #504]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574a:	497b      	ldr	r1, [pc, #492]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800575e:	4b76      	ldr	r3, [pc, #472]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	4972      	ldr	r1, [pc, #456]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005780:	4b6d      	ldr	r3, [pc, #436]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578e:	496a      	ldr	r1, [pc, #424]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80057a2:	4b65      	ldr	r3, [pc, #404]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b0:	4961      	ldr	r1, [pc, #388]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d031      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057cc:	d00e      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x404>
 80057ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057d2:	d814      	bhi.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d015      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80057d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057dc:	d10f      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057de:	4b56      	ldr	r3, [pc, #344]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	4a55      	ldr	r2, [pc, #340]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80057e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80057ea:	e00c      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	2100      	movs	r1, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f97c 	bl	8005af0 <RCCEx_PLLSAI1_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80057fc:	e003      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	77fb      	strb	r3, [r7, #31]
        break;
 8005802:	e000      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005806:	7ffb      	ldrb	r3, [r7, #31]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800580c:	4b4a      	ldr	r3, [pc, #296]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800581a:	4947      	ldr	r1, [pc, #284]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005822:	e001      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005824:	7ffb      	ldrb	r3, [r7, #31]
 8005826:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005834:	4b40      	ldr	r3, [pc, #256]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005842:	493d      	ldr	r1, [pc, #244]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005856:	4b38      	ldr	r3, [pc, #224]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005864:	4934      	ldr	r1, [pc, #208]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005878:	4b2f      	ldr	r3, [pc, #188]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	492c      	ldr	r1, [pc, #176]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800589a:	4b27      	ldr	r3, [pc, #156]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800589c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058a0:	f023 0203 	bic.w	r2, r3, #3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	4923      	ldr	r1, [pc, #140]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d028      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058bc:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ca:	491b      	ldr	r1, [pc, #108]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058da:	d106      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058dc:	4b16      	ldr	r3, [pc, #88]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	4a15      	ldr	r2, [pc, #84]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058e6:	60d3      	str	r3, [r2, #12]
 80058e8:	e011      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058f2:	d10c      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	2101      	movs	r1, #1
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f8f8 	bl	8005af0 <RCCEx_PLLSAI1_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005904:	7ffb      	ldrb	r3, [r7, #31]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 800590a:	7ffb      	ldrb	r3, [r7, #31]
 800590c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d04d      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800591e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005922:	d10b      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800592a:	4a03      	ldr	r2, [pc, #12]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800592c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005930:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005934:	e015      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005936:	bf00      	nop
 8005938:	40021000 	.word	0x40021000
 800593c:	4b6b      	ldr	r3, [pc, #428]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005942:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594a:	4968      	ldr	r1, [pc, #416]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005952:	4b66      	ldr	r3, [pc, #408]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005954:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005958:	4a64      	ldr	r2, [pc, #400]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800595a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800596a:	d10d      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3304      	adds	r3, #4
 8005970:	2101      	movs	r1, #1
 8005972:	4618      	mov	r0, r3
 8005974:	f000 f8bc 	bl	8005af0 <RCCEx_PLLSAI1_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800597c:	7ffb      	ldrb	r3, [r7, #31]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d019      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005982:	7ffb      	ldrb	r3, [r7, #31]
 8005984:	77bb      	strb	r3, [r7, #30]
 8005986:	e016      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800598c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005990:	d106      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005992:	4b56      	ldr	r3, [pc, #344]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	4a55      	ldr	r2, [pc, #340]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800599c:	60d3      	str	r3, [r2, #12]
 800599e:	e00a      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059a8:	d105      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059aa:	4b50      	ldr	r3, [pc, #320]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	4a4f      	ldr	r2, [pc, #316]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d028      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059c2:	4b4a      	ldr	r3, [pc, #296]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d0:	4946      	ldr	r1, [pc, #280]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059e0:	d106      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e2:	4b42      	ldr	r3, [pc, #264]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4a41      	ldr	r2, [pc, #260]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80059e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ec:	60d3      	str	r3, [r2, #12]
 80059ee:	e011      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059f8:	d10c      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	2101      	movs	r1, #1
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f875 	bl	8005af0 <RCCEx_PLLSAI1_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a0a:	7ffb      	ldrb	r3, [r7, #31]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005a10:	7ffb      	ldrb	r3, [r7, #31]
 8005a12:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01e      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a20:	4b32      	ldr	r3, [pc, #200]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a30:	492e      	ldr	r1, [pc, #184]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	2102      	movs	r1, #2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 f850 	bl	8005af0 <RCCEx_PLLSAI1_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a54:	7ffb      	ldrb	r3, [r7, #31]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005a5a:	7ffb      	ldrb	r3, [r7, #31]
 8005a5c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a6a:	4b20      	ldr	r3, [pc, #128]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a70:	f023 0204 	bic.w	r2, r3, #4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7a:	491c      	ldr	r1, [pc, #112]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a8e:	4b17      	ldr	r3, [pc, #92]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a94:	f023 0218 	bic.w	r2, r3, #24
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	4913      	ldr	r1, [pc, #76]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d017      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ab2:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac2:	490a      	ldr	r1, [pc, #40]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad4:	d105      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	4a04      	ldr	r2, [pc, #16]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005adc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ae0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005ae2:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40021000 	.word	0x40021000

08005af0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d018      	beq.n	8005b38 <RCCEx_PLLSAI1_Config+0x48>
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d81f      	bhi.n	8005b4a <RCCEx_PLLSAI1_Config+0x5a>
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d002      	beq.n	8005b14 <RCCEx_PLLSAI1_Config+0x24>
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d009      	beq.n	8005b26 <RCCEx_PLLSAI1_Config+0x36>
 8005b12:	e01a      	b.n	8005b4a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b14:	4b65      	ldr	r3, [pc, #404]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d117      	bne.n	8005b50 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b24:	e014      	b.n	8005b50 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b26:	4b61      	ldr	r3, [pc, #388]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d110      	bne.n	8005b54 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b36:	e00d      	b.n	8005b54 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005b38:	4b5c      	ldr	r3, [pc, #368]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b48:	e006      	b.n	8005b58 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4e:	e004      	b.n	8005b5a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005b50:	bf00      	nop
 8005b52:	e002      	b.n	8005b5a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005b54:	bf00      	nop
 8005b56:	e000      	b.n	8005b5a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005b58:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f040 809f 	bne.w	8005ca0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b62:	4b52      	ldr	r3, [pc, #328]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a51      	ldr	r2, [pc, #324]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b6e:	f7fb fe4f 	bl	8001810 <HAL_GetTick>
 8005b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b74:	e00f      	b.n	8005b96 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b76:	f7fb fe4b 	bl	8001810 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d908      	bls.n	8005b96 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b84:	4b49      	ldr	r3, [pc, #292]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b94:	e006      	b.n	8005ba4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b96:	4b45      	ldr	r3, [pc, #276]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e9      	bne.n	8005b76 <RCCEx_PLLSAI1_Config+0x86>
 8005ba2:	e000      	b.n	8005ba6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005ba4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d179      	bne.n	8005ca0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d116      	bne.n	8005be0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bb2:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	4b3e      	ldr	r3, [pc, #248]	; (8005cb0 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6892      	ldr	r2, [r2, #8]
 8005bbe:	0211      	lsls	r1, r2, #8
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	68d2      	ldr	r2, [r2, #12]
 8005bc4:	06d2      	lsls	r2, r2, #27
 8005bc6:	4311      	orrs	r1, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6852      	ldr	r2, [r2, #4]
 8005bcc:	3a01      	subs	r2, #1
 8005bce:	0112      	lsls	r2, r2, #4
 8005bd0:	4311      	orrs	r1, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	4934      	ldr	r1, [pc, #208]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	610b      	str	r3, [r1, #16]
 8005bde:	e033      	b.n	8005c48 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d118      	bne.n	8005c18 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005be6:	4b31      	ldr	r3, [pc, #196]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	4b32      	ldr	r3, [pc, #200]	; (8005cb4 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6892      	ldr	r2, [r2, #8]
 8005bf2:	0211      	lsls	r1, r2, #8
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6912      	ldr	r2, [r2, #16]
 8005bf8:	0852      	lsrs	r2, r2, #1
 8005bfa:	3a01      	subs	r2, #1
 8005bfc:	0552      	lsls	r2, r2, #21
 8005bfe:	4311      	orrs	r1, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6852      	ldr	r2, [r2, #4]
 8005c04:	3a01      	subs	r2, #1
 8005c06:	0112      	lsls	r2, r2, #4
 8005c08:	4311      	orrs	r1, r2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	4926      	ldr	r1, [pc, #152]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	610b      	str	r3, [r1, #16]
 8005c16:	e017      	b.n	8005c48 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c18:	4b24      	ldr	r3, [pc, #144]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1c8>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6892      	ldr	r2, [r2, #8]
 8005c24:	0211      	lsls	r1, r2, #8
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6952      	ldr	r2, [r2, #20]
 8005c2a:	0852      	lsrs	r2, r2, #1
 8005c2c:	3a01      	subs	r2, #1
 8005c2e:	0652      	lsls	r2, r2, #25
 8005c30:	4311      	orrs	r1, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6852      	ldr	r2, [r2, #4]
 8005c36:	3a01      	subs	r2, #1
 8005c38:	0112      	lsls	r2, r2, #4
 8005c3a:	4311      	orrs	r1, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	491a      	ldr	r1, [pc, #104]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c48:	4b18      	ldr	r3, [pc, #96]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c54:	f7fb fddc 	bl	8001810 <HAL_GetTick>
 8005c58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c5a:	e00f      	b.n	8005c7c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c5c:	f7fb fdd8 	bl	8001810 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d908      	bls.n	8005c7c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c6a:	4b10      	ldr	r3, [pc, #64]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005c7a:	e006      	b.n	8005c8a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0e9      	beq.n	8005c5c <RCCEx_PLLSAI1_Config+0x16c>
 8005c88:	e000      	b.n	8005c8c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005c8a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	4904      	ldr	r1, [pc, #16]	; (8005cac <RCCEx_PLLSAI1_Config+0x1bc>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	07ff800c 	.word	0x07ff800c
 8005cb4:	ff9f800c 	.word	0xff9f800c
 8005cb8:	f9ff800c 	.word	0xf9ff800c

08005cbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d018      	beq.n	8005d04 <RCCEx_PLLSAI2_Config+0x48>
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d81f      	bhi.n	8005d16 <RCCEx_PLLSAI2_Config+0x5a>
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d002      	beq.n	8005ce0 <RCCEx_PLLSAI2_Config+0x24>
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d009      	beq.n	8005cf2 <RCCEx_PLLSAI2_Config+0x36>
 8005cde:	e01a      	b.n	8005d16 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ce0:	4b4a      	ldr	r3, [pc, #296]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d117      	bne.n	8005d1c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf0:	e014      	b.n	8005d1c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cf2:	4b46      	ldr	r3, [pc, #280]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d110      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d02:	e00d      	b.n	8005d20 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005d04:	4b41      	ldr	r3, [pc, #260]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d109      	bne.n	8005d24 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d14:	e006      	b.n	8005d24 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1a:	e004      	b.n	8005d26 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005d1c:	bf00      	nop
 8005d1e:	e002      	b.n	8005d26 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005d20:	bf00      	nop
 8005d22:	e000      	b.n	8005d26 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005d24:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d169      	bne.n	8005e00 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d2c:	4b37      	ldr	r3, [pc, #220]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a36      	ldr	r2, [pc, #216]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d38:	f7fb fd6a 	bl	8001810 <HAL_GetTick>
 8005d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d3e:	e00f      	b.n	8005d60 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d40:	f7fb fd66 	bl	8001810 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d908      	bls.n	8005d60 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d4e:	4b2f      	ldr	r3, [pc, #188]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d5e:	e006      	b.n	8005d6e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d60:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e9      	bne.n	8005d40 <RCCEx_PLLSAI2_Config+0x84>
 8005d6c:	e000      	b.n	8005d70 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005d6e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d144      	bne.n	8005e00 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d115      	bne.n	8005da8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d7c:	4b23      	ldr	r3, [pc, #140]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <RCCEx_PLLSAI2_Config+0x154>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6892      	ldr	r2, [r2, #8]
 8005d88:	0211      	lsls	r1, r2, #8
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68d2      	ldr	r2, [r2, #12]
 8005d8e:	06d2      	lsls	r2, r2, #27
 8005d90:	4311      	orrs	r1, r2
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6852      	ldr	r2, [r2, #4]
 8005d96:	3a01      	subs	r2, #1
 8005d98:	0112      	lsls	r2, r2, #4
 8005d9a:	4311      	orrs	r1, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	491a      	ldr	r1, [pc, #104]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005da8:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fb fd2c 	bl	8001810 <HAL_GetTick>
 8005db8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dba:	e00f      	b.n	8005ddc <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dbc:	f7fb fd28 	bl	8001810 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d908      	bls.n	8005ddc <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005dda:	e006      	b.n	8005dea <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0e9      	beq.n	8005dbc <RCCEx_PLLSAI2_Config+0x100>
 8005de8:	e000      	b.n	8005dec <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005dea:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005df2:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	4904      	ldr	r1, [pc, #16]	; (8005e0c <RCCEx_PLLSAI2_Config+0x150>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	07ff800c 	.word	0x07ff800c

08005e14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e095      	b.n	8005f52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e36:	d009      	beq.n	8005e4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	61da      	str	r2, [r3, #28]
 8005e3e:	e005      	b.n	8005e4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fa ffc6 	bl	8000df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e8c:	d902      	bls.n	8005e94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	e002      	b.n	8005e9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ea2:	d007      	beq.n	8005eb4 <HAL_SPI_Init+0xa0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eac:	d002      	beq.n	8005eb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	ea42 0103 	orr.w	r1, r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	0c1b      	lsrs	r3, r3, #16
 8005f10:	f003 0204 	and.w	r2, r3, #4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f30:	ea42 0103 	orr.w	r1, r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10f      	bne.n	8005fa0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	099b      	lsrs	r3, r3, #6
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
    return;
 8005f9e:	e0d7      	b.n	8006150 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_SPI_IRQHandler+0x66>
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	09db      	lsrs	r3, r3, #7
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
    return;
 8005fc0:	e0c6      	b.n	8006150 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_SPI_IRQHandler+0x8c>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	099b      	lsrs	r3, r3, #6
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80b4 	beq.w	8006150 <HAL_SPI_IRQHandler+0x1f4>
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80ad 	beq.w	8006150 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	099b      	lsrs	r3, r3, #6
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d023      	beq.n	800604a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b03      	cmp	r3, #3
 800600c:	d011      	beq.n	8006032 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006012:	f043 0204 	orr.w	r2, r3, #4
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	e00b      	b.n	800604a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	693b      	ldr	r3, [r7, #16]
        return;
 8006048:	e082      	b.n	8006150 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d014      	beq.n	8006080 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605a:	f043 0201 	orr.w	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00c      	beq.n	80060a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006090:	f043 0208 	orr.w	r2, r3, #8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006098:	2300      	movs	r3, #0
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	60bb      	str	r3, [r7, #8]
 80060a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d04f      	beq.n	800614e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d104      	bne.n	80060da <HAL_SPI_IRQHandler+0x17e>
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d034      	beq.n	8006144 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0203 	bic.w	r2, r2, #3
 80060e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d011      	beq.n	8006116 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	4a18      	ldr	r2, [pc, #96]	; (8006158 <HAL_SPI_IRQHandler+0x1fc>)
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fc fe7a 	bl	8002df8 <HAL_DMA_Abort_IT>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	2b00      	cmp	r3, #0
 800611c:	d016      	beq.n	800614c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <HAL_SPI_IRQHandler+0x1fc>)
 8006124:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	4618      	mov	r0, r3
 800612c:	f7fc fe64 	bl	8002df8 <HAL_DMA_Abort_IT>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006142:	e003      	b.n	800614c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f809 	bl	800615c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800614a:	e000      	b.n	800614e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800614c:	bf00      	nop
    return;
 800614e:	bf00      	nop
  }
}
 8006150:	3720      	adds	r7, #32
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	08006171 	.word	0x08006171

0800615c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff ffe5 	bl	800615c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e049      	b.n	8006240 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d106      	bne.n	80061c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f841 	bl	8006248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f000 fc03 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	d001      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e04f      	b.n	8006314 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a23      	ldr	r2, [pc, #140]	; (8006320 <HAL_TIM_Base_Start_IT+0xc4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01d      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629e:	d018      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1f      	ldr	r2, [pc, #124]	; (8006324 <HAL_TIM_Base_Start_IT+0xc8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <HAL_TIM_Base_Start_IT+0xcc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00e      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1c      	ldr	r2, [pc, #112]	; (800632c <HAL_TIM_Base_Start_IT+0xd0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d009      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <HAL_TIM_Base_Start_IT+0xd4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d004      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x76>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a19      	ldr	r2, [pc, #100]	; (8006334 <HAL_TIM_Base_Start_IT+0xd8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d115      	bne.n	80062fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	4b17      	ldr	r3, [pc, #92]	; (8006338 <HAL_TIM_Base_Start_IT+0xdc>)
 80062da:	4013      	ands	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b06      	cmp	r3, #6
 80062e2:	d015      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0xb4>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ea:	d011      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fc:	e008      	b.n	8006310 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e000      	b.n	8006312 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006310:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40013400 	.word	0x40013400
 8006334:	40014000 	.word	0x40014000
 8006338:	00010007 	.word	0x00010007

0800633c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e049      	b.n	80063e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fb f88e 	bl	8001484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f000 fb32 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b086      	sub	sp, #24
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e097      	b.n	800652e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fa fff2 	bl	80013fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800642e:	f023 0307 	bic.w	r3, r3, #7
 8006432:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f000 fad0 	bl	80069e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646c:	f023 0303 	bic.w	r3, r3, #3
 8006470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	021b      	lsls	r3, r3, #8
 800647c:	4313      	orrs	r3, r2
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800648a:	f023 030c 	bic.w	r3, r3, #12
 800648e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800649a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	4313      	orrs	r3, r2
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	011a      	lsls	r2, r3, #4
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	031b      	lsls	r3, r3, #12
 80064ba:	4313      	orrs	r3, r2
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064c8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80064d0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	4313      	orrs	r3, r2
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b02      	cmp	r3, #2
 800654a:	d122      	bne.n	8006592 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d11b      	bne.n	8006592 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f06f 0202 	mvn.w	r2, #2
 8006562:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fa15 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
 800657e:	e005      	b.n	800658c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fa07 	bl	8006994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa18 	bl	80069bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b04      	cmp	r3, #4
 800659e:	d122      	bne.n	80065e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d11b      	bne.n	80065e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f06f 0204 	mvn.w	r2, #4
 80065b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f9eb 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
 80065d2:	e005      	b.n	80065e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f9dd 	bl	8006994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9ee 	bl	80069bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d122      	bne.n	800663a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b08      	cmp	r3, #8
 8006600:	d11b      	bne.n	800663a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0208 	mvn.w	r2, #8
 800660a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2204      	movs	r2, #4
 8006610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f9c1 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
 8006626:	e005      	b.n	8006634 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f9b3 	bl	8006994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9c4 	bl	80069bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b10      	cmp	r3, #16
 8006646:	d122      	bne.n	800668e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0310 	and.w	r3, r3, #16
 8006652:	2b10      	cmp	r3, #16
 8006654:	d11b      	bne.n	800668e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f06f 0210 	mvn.w	r2, #16
 800665e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2208      	movs	r2, #8
 8006664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f997 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
 800667a:	e005      	b.n	8006688 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f989 	bl	8006994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f99a 	bl	80069bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	d10e      	bne.n	80066ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d107      	bne.n	80066ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f06f 0201 	mvn.w	r2, #1
 80066b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fa fb49 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d10e      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d107      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fd81 	bl	80071e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f4:	d10e      	bne.n	8006714 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b80      	cmp	r3, #128	; 0x80
 8006702:	d107      	bne.n	8006714 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800670c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fd74 	bl	80071fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d10e      	bne.n	8006740 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d107      	bne.n	8006740 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f948 	bl	80069d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b20      	cmp	r3, #32
 800674c:	d10e      	bne.n	800676c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b20      	cmp	r3, #32
 800675a:	d107      	bne.n	800676c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0220 	mvn.w	r2, #32
 8006764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fd34 	bl	80071d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800678a:	2302      	movs	r3, #2
 800678c:	e0fd      	b.n	800698a <HAL_TIM_PWM_ConfigChannel+0x216>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b14      	cmp	r3, #20
 800679a:	f200 80f0 	bhi.w	800697e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067f9 	.word	0x080067f9
 80067a8:	0800697f 	.word	0x0800697f
 80067ac:	0800697f 	.word	0x0800697f
 80067b0:	0800697f 	.word	0x0800697f
 80067b4:	08006839 	.word	0x08006839
 80067b8:	0800697f 	.word	0x0800697f
 80067bc:	0800697f 	.word	0x0800697f
 80067c0:	0800697f 	.word	0x0800697f
 80067c4:	0800687b 	.word	0x0800687b
 80067c8:	0800697f 	.word	0x0800697f
 80067cc:	0800697f 	.word	0x0800697f
 80067d0:	0800697f 	.word	0x0800697f
 80067d4:	080068bb 	.word	0x080068bb
 80067d8:	0800697f 	.word	0x0800697f
 80067dc:	0800697f 	.word	0x0800697f
 80067e0:	0800697f 	.word	0x0800697f
 80067e4:	080068fd 	.word	0x080068fd
 80067e8:	0800697f 	.word	0x0800697f
 80067ec:	0800697f 	.word	0x0800697f
 80067f0:	0800697f 	.word	0x0800697f
 80067f4:	0800693d 	.word	0x0800693d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 f98a 	bl	8006b18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699a      	ldr	r2, [r3, #24]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0208 	orr.w	r2, r2, #8
 8006812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0204 	bic.w	r2, r2, #4
 8006822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6999      	ldr	r1, [r3, #24]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	619a      	str	r2, [r3, #24]
      break;
 8006836:	e0a3      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68b9      	ldr	r1, [r7, #8]
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f9fa 	bl	8006c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6999      	ldr	r1, [r3, #24]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	021a      	lsls	r2, r3, #8
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	619a      	str	r2, [r3, #24]
      break;
 8006878:	e082      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fa63 	bl	8006d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f042 0208 	orr.w	r2, r2, #8
 8006894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69da      	ldr	r2, [r3, #28]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0204 	bic.w	r2, r2, #4
 80068a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69d9      	ldr	r1, [r3, #28]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	61da      	str	r2, [r3, #28]
      break;
 80068b8:	e062      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 facb 	bl	8006e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69da      	ldr	r2, [r3, #28]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69da      	ldr	r2, [r3, #28]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69d9      	ldr	r1, [r3, #28]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	021a      	lsls	r2, r3, #8
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	61da      	str	r2, [r3, #28]
      break;
 80068fa:	e041      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fb14 	bl	8006f30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0208 	orr.w	r2, r2, #8
 8006916:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0204 	bic.w	r2, r2, #4
 8006926:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800693a:	e021      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fb58 	bl	8006ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006966:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	021a      	lsls	r2, r3, #8
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800697c:	e000      	b.n	8006980 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800697e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop

08006994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a40      	ldr	r2, [pc, #256]	; (8006af8 <TIM_Base_SetConfig+0x114>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d00f      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3d      	ldr	r2, [pc, #244]	; (8006afc <TIM_Base_SetConfig+0x118>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00b      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a3c      	ldr	r2, [pc, #240]	; (8006b00 <TIM_Base_SetConfig+0x11c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d007      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a3b      	ldr	r2, [pc, #236]	; (8006b04 <TIM_Base_SetConfig+0x120>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a3a      	ldr	r2, [pc, #232]	; (8006b08 <TIM_Base_SetConfig+0x124>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d108      	bne.n	8006a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2f      	ldr	r2, [pc, #188]	; (8006af8 <TIM_Base_SetConfig+0x114>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01f      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a44:	d01b      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <TIM_Base_SetConfig+0x118>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d017      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2b      	ldr	r2, [pc, #172]	; (8006b00 <TIM_Base_SetConfig+0x11c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a2a      	ldr	r2, [pc, #168]	; (8006b04 <TIM_Base_SetConfig+0x120>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00f      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a29      	ldr	r2, [pc, #164]	; (8006b08 <TIM_Base_SetConfig+0x124>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a28      	ldr	r2, [pc, #160]	; (8006b0c <TIM_Base_SetConfig+0x128>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a27      	ldr	r2, [pc, #156]	; (8006b10 <TIM_Base_SetConfig+0x12c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <TIM_Base_SetConfig+0x130>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d108      	bne.n	8006a90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <TIM_Base_SetConfig+0x114>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00f      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a12      	ldr	r2, [pc, #72]	; (8006b08 <TIM_Base_SetConfig+0x124>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00b      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <TIM_Base_SetConfig+0x128>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d007      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a10      	ldr	r2, [pc, #64]	; (8006b10 <TIM_Base_SetConfig+0x12c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d003      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a0f      	ldr	r2, [pc, #60]	; (8006b14 <TIM_Base_SetConfig+0x130>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d103      	bne.n	8006ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	615a      	str	r2, [r3, #20]
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40013400 	.word	0x40013400
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40014400 	.word	0x40014400
 8006b14:	40014800 	.word	0x40014800

08006b18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f023 0201 	bic.w	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0302 	bic.w	r3, r3, #2
 8006b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2c      	ldr	r2, [pc, #176]	; (8006c24 <TIM_OC1_SetConfig+0x10c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00f      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a2b      	ldr	r2, [pc, #172]	; (8006c28 <TIM_OC1_SetConfig+0x110>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <TIM_OC1_SetConfig+0x114>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a29      	ldr	r2, [pc, #164]	; (8006c30 <TIM_OC1_SetConfig+0x118>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a28      	ldr	r2, [pc, #160]	; (8006c34 <TIM_OC1_SetConfig+0x11c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10c      	bne.n	8006bb2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0308 	bic.w	r3, r3, #8
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f023 0304 	bic.w	r3, r3, #4
 8006bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1b      	ldr	r2, [pc, #108]	; (8006c24 <TIM_OC1_SetConfig+0x10c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00f      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1a      	ldr	r2, [pc, #104]	; (8006c28 <TIM_OC1_SetConfig+0x110>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <TIM_OC1_SetConfig+0x114>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <TIM_OC1_SetConfig+0x118>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <TIM_OC1_SetConfig+0x11c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d111      	bne.n	8006bfe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	621a      	str	r2, [r3, #32]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40013400 	.word	0x40013400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800

08006c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f023 0210 	bic.w	r2, r3, #16
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0320 	bic.w	r3, r3, #32
 8006c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <TIM_OC2_SetConfig+0x100>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_OC2_SetConfig+0x6c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <TIM_OC2_SetConfig+0x104>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d10d      	bne.n	8006cc0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <TIM_OC2_SetConfig+0x100>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00f      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <TIM_OC2_SetConfig+0x104>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00b      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a1b      	ldr	r2, [pc, #108]	; (8006d40 <TIM_OC2_SetConfig+0x108>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d007      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a1a      	ldr	r2, [pc, #104]	; (8006d44 <TIM_OC2_SetConfig+0x10c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <TIM_OC2_SetConfig+0x110>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d113      	bne.n	8006d10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40013400 	.word	0x40013400
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800

08006d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a27      	ldr	r2, [pc, #156]	; (8006e48 <TIM_OC3_SetConfig+0xfc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_OC3_SetConfig+0x6a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a26      	ldr	r2, [pc, #152]	; (8006e4c <TIM_OC3_SetConfig+0x100>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d10d      	bne.n	8006dd2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	021b      	lsls	r3, r3, #8
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <TIM_OC3_SetConfig+0xfc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00f      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <TIM_OC3_SetConfig+0x100>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00b      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <TIM_OC3_SetConfig+0x104>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d007      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <TIM_OC3_SetConfig+0x108>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <TIM_OC3_SetConfig+0x10c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d113      	bne.n	8006e22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40013400 	.word	0x40013400
 8006e50:	40014000 	.word	0x40014000
 8006e54:	40014400 	.word	0x40014400
 8006e58:	40014800 	.word	0x40014800

08006e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	031b      	lsls	r3, r3, #12
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <TIM_OC4_SetConfig+0xc0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <TIM_OC4_SetConfig+0xc4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a16      	ldr	r2, [pc, #88]	; (8006f24 <TIM_OC4_SetConfig+0xc8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <TIM_OC4_SetConfig+0xcc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a14      	ldr	r2, [pc, #80]	; (8006f2c <TIM_OC4_SetConfig+0xd0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d109      	bne.n	8006ef4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	019b      	lsls	r3, r3, #6
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	40012c00 	.word	0x40012c00
 8006f20:	40013400 	.word	0x40013400
 8006f24:	40014000 	.word	0x40014000
 8006f28:	40014400 	.word	0x40014400
 8006f2c:	40014800 	.word	0x40014800

08006f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a17      	ldr	r2, [pc, #92]	; (8006fe4 <TIM_OC5_SetConfig+0xb4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00f      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <TIM_OC5_SetConfig+0xb8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00b      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a15      	ldr	r2, [pc, #84]	; (8006fec <TIM_OC5_SetConfig+0xbc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d007      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <TIM_OC5_SetConfig+0xc0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <TIM_OC5_SetConfig+0xc4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d109      	bne.n	8006fbe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	621a      	str	r2, [r3, #32]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800703e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	051b      	lsls	r3, r3, #20
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <TIM_OC6_SetConfig+0xb8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00f      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <TIM_OC6_SetConfig+0xbc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00b      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <TIM_OC6_SetConfig+0xc0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d007      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a15      	ldr	r2, [pc, #84]	; (80070bc <TIM_OC6_SetConfig+0xc4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a14      	ldr	r2, [pc, #80]	; (80070c0 <TIM_OC6_SetConfig+0xc8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d109      	bne.n	8007088 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	029b      	lsls	r3, r3, #10
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40014400 	.word	0x40014400
 80070c0:	40014800 	.word	0x40014800

080070c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d8:	2302      	movs	r3, #2
 80070da:	e068      	b.n	80071ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2e      	ldr	r2, [pc, #184]	; (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2d      	ldr	r2, [pc, #180]	; (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d108      	bne.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1e      	ldr	r2, [pc, #120]	; (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01d      	beq.n	8007182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714e:	d018      	beq.n	8007182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1b      	ldr	r2, [pc, #108]	; (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d013      	beq.n	8007182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1a      	ldr	r2, [pc, #104]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00e      	beq.n	8007182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a18      	ldr	r2, [pc, #96]	; (80071cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d009      	beq.n	8007182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a13      	ldr	r2, [pc, #76]	; (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d004      	beq.n	8007182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a14      	ldr	r2, [pc, #80]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d10c      	bne.n	800719c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	4313      	orrs	r3, r2
 8007192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40013400 	.word	0x40013400
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40000c00 	.word	0x40000c00
 80071d0:	40014000 	.word	0x40014000

080071d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e042      	b.n	80072a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7fa f9f9 	bl	800162c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2224      	movs	r2, #36	; 0x24
 800723e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa76 	bl	8007744 <UART_SetConfig>
 8007258:	4603      	mov	r3, r0
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e022      	b.n	80072a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fd38 	bl	8007ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800727e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800728e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fdbf 	bl	8007e24 <UART_CheckIdleState>
 80072a6:	4603      	mov	r3, r0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80072d6:	4013      	ands	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d118      	bne.n	8007312 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d013      	beq.n	8007312 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 81fb 	beq.w	80076fe <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
      }
      return;
 8007310:	e1f5      	b.n	80076fe <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80ef 	beq.w	80074f8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	4b73      	ldr	r3, [pc, #460]	; (80074ec <HAL_UART_IRQHandler+0x23c>)
 800731e:	4013      	ands	r3, r2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	4b72      	ldr	r3, [pc, #456]	; (80074f0 <HAL_UART_IRQHandler+0x240>)
 8007328:	4013      	ands	r3, r2
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80e4 	beq.w	80074f8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d010      	beq.n	800735c <HAL_UART_IRQHandler+0xac>
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00b      	beq.n	800735c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2201      	movs	r2, #1
 800734a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007352:	f043 0201 	orr.w	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d010      	beq.n	8007388 <HAL_UART_IRQHandler+0xd8>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2202      	movs	r2, #2
 8007376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800737e:	f043 0204 	orr.w	r2, r3, #4
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d010      	beq.n	80073b4 <HAL_UART_IRQHandler+0x104>
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2204      	movs	r2, #4
 80073a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073aa:	f043 0202 	orr.w	r2, r3, #2
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f003 0308 	and.w	r3, r3, #8
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d015      	beq.n	80073ea <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d104      	bne.n	80073d2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4b48      	ldr	r3, [pc, #288]	; (80074ec <HAL_UART_IRQHandler+0x23c>)
 80073cc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2208      	movs	r2, #8
 80073d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e0:	f043 0208 	orr.w	r2, r3, #8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d011      	beq.n	8007418 <HAL_UART_IRQHandler+0x168>
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00c      	beq.n	8007418 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800740e:	f043 0220 	orr.w	r2, r3, #32
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 816f 	beq.w	8007702 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d011      	beq.n	8007452 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007458:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007464:	2b40      	cmp	r3, #64	; 0x40
 8007466:	d004      	beq.n	8007472 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800746e:	2b00      	cmp	r3, #0
 8007470:	d031      	beq.n	80074d6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fda1 	bl	8007fba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	d123      	bne.n	80074ce <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007494:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d013      	beq.n	80074c6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a2:	4a14      	ldr	r2, [pc, #80]	; (80074f4 <HAL_UART_IRQHandler+0x244>)
 80074a4:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fb fca4 	bl	8002df8 <HAL_DMA_Abort_IT>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d017      	beq.n	80074e6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c4:	e00f      	b.n	80074e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f926 	bl	8007718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	e00b      	b.n	80074e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f922 	bl	8007718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d4:	e007      	b.n	80074e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f91e 	bl	8007718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80074e4:	e10d      	b.n	8007702 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e6:	bf00      	nop
    return;
 80074e8:	e10b      	b.n	8007702 <HAL_UART_IRQHandler+0x452>
 80074ea:	bf00      	nop
 80074ec:	10000001 	.word	0x10000001
 80074f0:	04000120 	.word	0x04000120
 80074f4:	0800801f 	.word	0x0800801f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	f040 80ab 	bne.w	8007658 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80a5 	beq.w	8007658 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	f003 0310 	and.w	r3, r3, #16
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 809f 	beq.w	8007658 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2210      	movs	r2, #16
 8007520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752c:	2b40      	cmp	r3, #64	; 0x40
 800752e:	d155      	bne.n	80075dc <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800753a:	893b      	ldrh	r3, [r7, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 80e2 	beq.w	8007706 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007548:	893a      	ldrh	r2, [r7, #8]
 800754a:	429a      	cmp	r2, r3
 800754c:	f080 80db 	bcs.w	8007706 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	893a      	ldrh	r2, [r7, #8]
 8007554:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d12b      	bne.n	80075c0 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007576:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0201 	bic.w	r2, r2, #1
 8007586:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007596:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0210 	bic.w	r2, r2, #16
 80075b4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fb fbc0 	bl	8002d40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f8a9 	bl	800772c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80075da:	e094      	b.n	8007706 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8087 	beq.w	800770a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 80075fc:	897b      	ldrh	r3, [r7, #10]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 8083 	beq.w	800770a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007612:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007622:	f023 0301 	bic.w	r3, r3, #1
 8007626:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0210 	bic.w	r2, r2, #16
 800764a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800764c:	897b      	ldrh	r3, [r7, #10]
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f86b 	bl	800772c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007656:	e058      	b.n	800770a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00d      	beq.n	800767e <HAL_UART_IRQHandler+0x3ce>
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d008      	beq.n	800767e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007674:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fd01 	bl	800807e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800767c:	e048      	b.n	8007710 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007684:	2b00      	cmp	r3, #0
 8007686:	d012      	beq.n	80076ae <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768e:	2b00      	cmp	r3, #0
 8007690:	d104      	bne.n	800769c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d034      	beq.n	800770e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
    }
    return;
 80076ac:	e02f      	b.n	800770e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d008      	beq.n	80076ca <HAL_UART_IRQHandler+0x41a>
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fcc1 	bl	800804a <UART_EndTransmit_IT>
    return;
 80076c8:	e022      	b.n	8007710 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d008      	beq.n	80076e6 <HAL_UART_IRQHandler+0x436>
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fce1 	bl	80080a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076e4:	e014      	b.n	8007710 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00f      	beq.n	8007710 <HAL_UART_IRQHandler+0x460>
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da0c      	bge.n	8007710 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fccb 	bl	8008092 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076fc:	e008      	b.n	8007710 <HAL_UART_IRQHandler+0x460>
      return;
 80076fe:	bf00      	nop
 8007700:	e006      	b.n	8007710 <HAL_UART_IRQHandler+0x460>
    return;
 8007702:	bf00      	nop
 8007704:	e004      	b.n	8007710 <HAL_UART_IRQHandler+0x460>
      return;
 8007706:	bf00      	nop
 8007708:	e002      	b.n	8007710 <HAL_UART_IRQHandler+0x460>
      return;
 800770a:	bf00      	nop
 800770c:	e000      	b.n	8007710 <HAL_UART_IRQHandler+0x460>
    return;
 800770e:	bf00      	nop
  }
}
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop

08007718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007744:	b5b0      	push	{r4, r5, r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	431a      	orrs	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	4313      	orrs	r3, r2
 8007766:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	4bb1      	ldr	r3, [pc, #708]	; (8007a34 <UART_SetConfig+0x2f0>)
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6812      	ldr	r2, [r2, #0]
 8007776:	69f9      	ldr	r1, [r7, #28]
 8007778:	430b      	orrs	r3, r1
 800777a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4aa6      	ldr	r2, [pc, #664]	; (8007a38 <UART_SetConfig+0x2f4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80077b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	69f9      	ldr	r1, [r7, #28]
 80077c0:	430b      	orrs	r3, r1
 80077c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	f023 010f 	bic.w	r1, r3, #15
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a97      	ldr	r2, [pc, #604]	; (8007a3c <UART_SetConfig+0x2f8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d120      	bne.n	8007826 <UART_SetConfig+0xe2>
 80077e4:	4b96      	ldr	r3, [pc, #600]	; (8007a40 <UART_SetConfig+0x2fc>)
 80077e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d816      	bhi.n	8007820 <UART_SetConfig+0xdc>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <UART_SetConfig+0xb4>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	08007809 	.word	0x08007809
 80077fc:	08007815 	.word	0x08007815
 8007800:	0800780f 	.word	0x0800780f
 8007804:	0800781b 	.word	0x0800781b
 8007808:	2301      	movs	r3, #1
 800780a:	76fb      	strb	r3, [r7, #27]
 800780c:	e0e7      	b.n	80079de <UART_SetConfig+0x29a>
 800780e:	2302      	movs	r3, #2
 8007810:	76fb      	strb	r3, [r7, #27]
 8007812:	e0e4      	b.n	80079de <UART_SetConfig+0x29a>
 8007814:	2304      	movs	r3, #4
 8007816:	76fb      	strb	r3, [r7, #27]
 8007818:	e0e1      	b.n	80079de <UART_SetConfig+0x29a>
 800781a:	2308      	movs	r3, #8
 800781c:	76fb      	strb	r3, [r7, #27]
 800781e:	e0de      	b.n	80079de <UART_SetConfig+0x29a>
 8007820:	2310      	movs	r3, #16
 8007822:	76fb      	strb	r3, [r7, #27]
 8007824:	e0db      	b.n	80079de <UART_SetConfig+0x29a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a86      	ldr	r2, [pc, #536]	; (8007a44 <UART_SetConfig+0x300>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d132      	bne.n	8007896 <UART_SetConfig+0x152>
 8007830:	4b83      	ldr	r3, [pc, #524]	; (8007a40 <UART_SetConfig+0x2fc>)
 8007832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007836:	f003 030c 	and.w	r3, r3, #12
 800783a:	2b0c      	cmp	r3, #12
 800783c:	d828      	bhi.n	8007890 <UART_SetConfig+0x14c>
 800783e:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <UART_SetConfig+0x100>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	08007879 	.word	0x08007879
 8007848:	08007891 	.word	0x08007891
 800784c:	08007891 	.word	0x08007891
 8007850:	08007891 	.word	0x08007891
 8007854:	08007885 	.word	0x08007885
 8007858:	08007891 	.word	0x08007891
 800785c:	08007891 	.word	0x08007891
 8007860:	08007891 	.word	0x08007891
 8007864:	0800787f 	.word	0x0800787f
 8007868:	08007891 	.word	0x08007891
 800786c:	08007891 	.word	0x08007891
 8007870:	08007891 	.word	0x08007891
 8007874:	0800788b 	.word	0x0800788b
 8007878:	2300      	movs	r3, #0
 800787a:	76fb      	strb	r3, [r7, #27]
 800787c:	e0af      	b.n	80079de <UART_SetConfig+0x29a>
 800787e:	2302      	movs	r3, #2
 8007880:	76fb      	strb	r3, [r7, #27]
 8007882:	e0ac      	b.n	80079de <UART_SetConfig+0x29a>
 8007884:	2304      	movs	r3, #4
 8007886:	76fb      	strb	r3, [r7, #27]
 8007888:	e0a9      	b.n	80079de <UART_SetConfig+0x29a>
 800788a:	2308      	movs	r3, #8
 800788c:	76fb      	strb	r3, [r7, #27]
 800788e:	e0a6      	b.n	80079de <UART_SetConfig+0x29a>
 8007890:	2310      	movs	r3, #16
 8007892:	76fb      	strb	r3, [r7, #27]
 8007894:	e0a3      	b.n	80079de <UART_SetConfig+0x29a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a6b      	ldr	r2, [pc, #428]	; (8007a48 <UART_SetConfig+0x304>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d120      	bne.n	80078e2 <UART_SetConfig+0x19e>
 80078a0:	4b67      	ldr	r3, [pc, #412]	; (8007a40 <UART_SetConfig+0x2fc>)
 80078a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078aa:	2b30      	cmp	r3, #48	; 0x30
 80078ac:	d013      	beq.n	80078d6 <UART_SetConfig+0x192>
 80078ae:	2b30      	cmp	r3, #48	; 0x30
 80078b0:	d814      	bhi.n	80078dc <UART_SetConfig+0x198>
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d009      	beq.n	80078ca <UART_SetConfig+0x186>
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	d810      	bhi.n	80078dc <UART_SetConfig+0x198>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <UART_SetConfig+0x180>
 80078be:	2b10      	cmp	r3, #16
 80078c0:	d006      	beq.n	80078d0 <UART_SetConfig+0x18c>
 80078c2:	e00b      	b.n	80078dc <UART_SetConfig+0x198>
 80078c4:	2300      	movs	r3, #0
 80078c6:	76fb      	strb	r3, [r7, #27]
 80078c8:	e089      	b.n	80079de <UART_SetConfig+0x29a>
 80078ca:	2302      	movs	r3, #2
 80078cc:	76fb      	strb	r3, [r7, #27]
 80078ce:	e086      	b.n	80079de <UART_SetConfig+0x29a>
 80078d0:	2304      	movs	r3, #4
 80078d2:	76fb      	strb	r3, [r7, #27]
 80078d4:	e083      	b.n	80079de <UART_SetConfig+0x29a>
 80078d6:	2308      	movs	r3, #8
 80078d8:	76fb      	strb	r3, [r7, #27]
 80078da:	e080      	b.n	80079de <UART_SetConfig+0x29a>
 80078dc:	2310      	movs	r3, #16
 80078de:	76fb      	strb	r3, [r7, #27]
 80078e0:	e07d      	b.n	80079de <UART_SetConfig+0x29a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a59      	ldr	r2, [pc, #356]	; (8007a4c <UART_SetConfig+0x308>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d120      	bne.n	800792e <UART_SetConfig+0x1ea>
 80078ec:	4b54      	ldr	r3, [pc, #336]	; (8007a40 <UART_SetConfig+0x2fc>)
 80078ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078f6:	2bc0      	cmp	r3, #192	; 0xc0
 80078f8:	d013      	beq.n	8007922 <UART_SetConfig+0x1de>
 80078fa:	2bc0      	cmp	r3, #192	; 0xc0
 80078fc:	d814      	bhi.n	8007928 <UART_SetConfig+0x1e4>
 80078fe:	2b80      	cmp	r3, #128	; 0x80
 8007900:	d009      	beq.n	8007916 <UART_SetConfig+0x1d2>
 8007902:	2b80      	cmp	r3, #128	; 0x80
 8007904:	d810      	bhi.n	8007928 <UART_SetConfig+0x1e4>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <UART_SetConfig+0x1cc>
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d006      	beq.n	800791c <UART_SetConfig+0x1d8>
 800790e:	e00b      	b.n	8007928 <UART_SetConfig+0x1e4>
 8007910:	2300      	movs	r3, #0
 8007912:	76fb      	strb	r3, [r7, #27]
 8007914:	e063      	b.n	80079de <UART_SetConfig+0x29a>
 8007916:	2302      	movs	r3, #2
 8007918:	76fb      	strb	r3, [r7, #27]
 800791a:	e060      	b.n	80079de <UART_SetConfig+0x29a>
 800791c:	2304      	movs	r3, #4
 800791e:	76fb      	strb	r3, [r7, #27]
 8007920:	e05d      	b.n	80079de <UART_SetConfig+0x29a>
 8007922:	2308      	movs	r3, #8
 8007924:	76fb      	strb	r3, [r7, #27]
 8007926:	e05a      	b.n	80079de <UART_SetConfig+0x29a>
 8007928:	2310      	movs	r3, #16
 800792a:	76fb      	strb	r3, [r7, #27]
 800792c:	e057      	b.n	80079de <UART_SetConfig+0x29a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a47      	ldr	r2, [pc, #284]	; (8007a50 <UART_SetConfig+0x30c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d125      	bne.n	8007984 <UART_SetConfig+0x240>
 8007938:	4b41      	ldr	r3, [pc, #260]	; (8007a40 <UART_SetConfig+0x2fc>)
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007946:	d017      	beq.n	8007978 <UART_SetConfig+0x234>
 8007948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800794c:	d817      	bhi.n	800797e <UART_SetConfig+0x23a>
 800794e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007952:	d00b      	beq.n	800796c <UART_SetConfig+0x228>
 8007954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007958:	d811      	bhi.n	800797e <UART_SetConfig+0x23a>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <UART_SetConfig+0x222>
 800795e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007962:	d006      	beq.n	8007972 <UART_SetConfig+0x22e>
 8007964:	e00b      	b.n	800797e <UART_SetConfig+0x23a>
 8007966:	2300      	movs	r3, #0
 8007968:	76fb      	strb	r3, [r7, #27]
 800796a:	e038      	b.n	80079de <UART_SetConfig+0x29a>
 800796c:	2302      	movs	r3, #2
 800796e:	76fb      	strb	r3, [r7, #27]
 8007970:	e035      	b.n	80079de <UART_SetConfig+0x29a>
 8007972:	2304      	movs	r3, #4
 8007974:	76fb      	strb	r3, [r7, #27]
 8007976:	e032      	b.n	80079de <UART_SetConfig+0x29a>
 8007978:	2308      	movs	r3, #8
 800797a:	76fb      	strb	r3, [r7, #27]
 800797c:	e02f      	b.n	80079de <UART_SetConfig+0x29a>
 800797e:	2310      	movs	r3, #16
 8007980:	76fb      	strb	r3, [r7, #27]
 8007982:	e02c      	b.n	80079de <UART_SetConfig+0x29a>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a2b      	ldr	r2, [pc, #172]	; (8007a38 <UART_SetConfig+0x2f4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d125      	bne.n	80079da <UART_SetConfig+0x296>
 800798e:	4b2c      	ldr	r3, [pc, #176]	; (8007a40 <UART_SetConfig+0x2fc>)
 8007990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800799c:	d017      	beq.n	80079ce <UART_SetConfig+0x28a>
 800799e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079a2:	d817      	bhi.n	80079d4 <UART_SetConfig+0x290>
 80079a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079a8:	d00b      	beq.n	80079c2 <UART_SetConfig+0x27e>
 80079aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ae:	d811      	bhi.n	80079d4 <UART_SetConfig+0x290>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <UART_SetConfig+0x278>
 80079b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b8:	d006      	beq.n	80079c8 <UART_SetConfig+0x284>
 80079ba:	e00b      	b.n	80079d4 <UART_SetConfig+0x290>
 80079bc:	2300      	movs	r3, #0
 80079be:	76fb      	strb	r3, [r7, #27]
 80079c0:	e00d      	b.n	80079de <UART_SetConfig+0x29a>
 80079c2:	2302      	movs	r3, #2
 80079c4:	76fb      	strb	r3, [r7, #27]
 80079c6:	e00a      	b.n	80079de <UART_SetConfig+0x29a>
 80079c8:	2304      	movs	r3, #4
 80079ca:	76fb      	strb	r3, [r7, #27]
 80079cc:	e007      	b.n	80079de <UART_SetConfig+0x29a>
 80079ce:	2308      	movs	r3, #8
 80079d0:	76fb      	strb	r3, [r7, #27]
 80079d2:	e004      	b.n	80079de <UART_SetConfig+0x29a>
 80079d4:	2310      	movs	r3, #16
 80079d6:	76fb      	strb	r3, [r7, #27]
 80079d8:	e001      	b.n	80079de <UART_SetConfig+0x29a>
 80079da:	2310      	movs	r3, #16
 80079dc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a15      	ldr	r2, [pc, #84]	; (8007a38 <UART_SetConfig+0x2f4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	f040 80a3 	bne.w	8007b30 <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079ea:	7efb      	ldrb	r3, [r7, #27]
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d83b      	bhi.n	8007a68 <UART_SetConfig+0x324>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <UART_SetConfig+0x2b4>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a25 	.word	0x08007a25
 8007a00:	08007a2d 	.word	0x08007a2d
 8007a04:	08007a69 	.word	0x08007a69
 8007a08:	08007a59 	.word	0x08007a59
 8007a0c:	08007a69 	.word	0x08007a69
 8007a10:	08007a69 	.word	0x08007a69
 8007a14:	08007a69 	.word	0x08007a69
 8007a18:	08007a61 	.word	0x08007a61
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1c:	f7fd fbac 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8007a20:	6178      	str	r0, [r7, #20]
        break;
 8007a22:	e026      	b.n	8007a72 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a24:	f7fd fbbc 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8007a28:	6178      	str	r0, [r7, #20]
        break;
 8007a2a:	e022      	b.n	8007a72 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <UART_SetConfig+0x310>)
 8007a2e:	617b      	str	r3, [r7, #20]
        break;
 8007a30:	e01f      	b.n	8007a72 <UART_SetConfig+0x32e>
 8007a32:	bf00      	nop
 8007a34:	cfff69f3 	.word	0xcfff69f3
 8007a38:	40008000 	.word	0x40008000
 8007a3c:	40013800 	.word	0x40013800
 8007a40:	40021000 	.word	0x40021000
 8007a44:	40004400 	.word	0x40004400
 8007a48:	40004800 	.word	0x40004800
 8007a4c:	40004c00 	.word	0x40004c00
 8007a50:	40005000 	.word	0x40005000
 8007a54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a58:	f7fd fadc 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8007a5c:	6178      	str	r0, [r7, #20]
        break;
 8007a5e:	e008      	b.n	8007a72 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a64:	617b      	str	r3, [r7, #20]
        break;
 8007a66:	e004      	b.n	8007a72 <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	76bb      	strb	r3, [r7, #26]
        break;
 8007a70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 811b 	beq.w	8007cb0 <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	4a96      	ldr	r2, [pc, #600]	; (8007cd8 <UART_SetConfig+0x594>)
 8007a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a84:	461a      	mov	r2, r3
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a8c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	4413      	add	r3, r2
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d305      	bcc.n	8007aaa <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d902      	bls.n	8007ab0 <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	76bb      	strb	r3, [r7, #26]
 8007aae:	e0ff      	b.n	8007cb0 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f04f 0100 	mov.w	r1, #0
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	4a86      	ldr	r2, [pc, #536]	; (8007cd8 <UART_SetConfig+0x594>)
 8007abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	f7f8 fbba 	bl	8000240 <__aeabi_uldivmod>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	f04f 0200 	mov.w	r2, #0
 8007ad8:	f04f 0300 	mov.w	r3, #0
 8007adc:	020b      	lsls	r3, r1, #8
 8007ade:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ae2:	0202      	lsls	r2, r0, #8
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	6849      	ldr	r1, [r1, #4]
 8007ae8:	0849      	lsrs	r1, r1, #1
 8007aea:	4608      	mov	r0, r1
 8007aec:	f04f 0100 	mov.w	r1, #0
 8007af0:	1814      	adds	r4, r2, r0
 8007af2:	eb43 0501 	adc.w	r5, r3, r1
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	4620      	mov	r0, r4
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7f8 fb9c 	bl	8000240 <__aeabi_uldivmod>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b16:	d308      	bcc.n	8007b2a <UART_SetConfig+0x3e6>
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b1e:	d204      	bcs.n	8007b2a <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	60da      	str	r2, [r3, #12]
 8007b28:	e0c2      	b.n	8007cb0 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	76bb      	strb	r3, [r7, #26]
 8007b2e:	e0bf      	b.n	8007cb0 <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b38:	d165      	bne.n	8007c06 <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 8007b3a:	7efb      	ldrb	r3, [r7, #27]
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d828      	bhi.n	8007b92 <UART_SetConfig+0x44e>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <UART_SetConfig+0x404>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b6d 	.word	0x08007b6d
 8007b4c:	08007b75 	.word	0x08007b75
 8007b50:	08007b7d 	.word	0x08007b7d
 8007b54:	08007b93 	.word	0x08007b93
 8007b58:	08007b83 	.word	0x08007b83
 8007b5c:	08007b93 	.word	0x08007b93
 8007b60:	08007b93 	.word	0x08007b93
 8007b64:	08007b93 	.word	0x08007b93
 8007b68:	08007b8b 	.word	0x08007b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b6c:	f7fd fb04 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8007b70:	6178      	str	r0, [r7, #20]
        break;
 8007b72:	e013      	b.n	8007b9c <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b74:	f7fd fb14 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8007b78:	6178      	str	r0, [r7, #20]
        break;
 8007b7a:	e00f      	b.n	8007b9c <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b7c:	4b57      	ldr	r3, [pc, #348]	; (8007cdc <UART_SetConfig+0x598>)
 8007b7e:	617b      	str	r3, [r7, #20]
        break;
 8007b80:	e00c      	b.n	8007b9c <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b82:	f7fd fa47 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8007b86:	6178      	str	r0, [r7, #20]
        break;
 8007b88:	e008      	b.n	8007b9c <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8e:	617b      	str	r3, [r7, #20]
        break;
 8007b90:	e004      	b.n	8007b9c <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	76bb      	strb	r3, [r7, #26]
        break;
 8007b9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 8086 	beq.w	8007cb0 <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	4a4b      	ldr	r2, [pc, #300]	; (8007cd8 <UART_SetConfig+0x594>)
 8007baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb6:	005a      	lsls	r2, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	085b      	lsrs	r3, r3, #1
 8007bbe:	441a      	add	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b0f      	cmp	r3, #15
 8007bd0:	d916      	bls.n	8007c00 <UART_SetConfig+0x4bc>
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd8:	d212      	bcs.n	8007c00 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f023 030f 	bic.w	r3, r3, #15
 8007be2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f003 0307 	and.w	r3, r3, #7
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	89fb      	ldrh	r3, [r7, #14]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	89fa      	ldrh	r2, [r7, #14]
 8007bfc:	60da      	str	r2, [r3, #12]
 8007bfe:	e057      	b.n	8007cb0 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	76bb      	strb	r3, [r7, #26]
 8007c04:	e054      	b.n	8007cb0 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c06:	7efb      	ldrb	r3, [r7, #27]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d828      	bhi.n	8007c5e <UART_SetConfig+0x51a>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <UART_SetConfig+0x4d0>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	08007c5f 	.word	0x08007c5f
 8007c24:	08007c4f 	.word	0x08007c4f
 8007c28:	08007c5f 	.word	0x08007c5f
 8007c2c:	08007c5f 	.word	0x08007c5f
 8007c30:	08007c5f 	.word	0x08007c5f
 8007c34:	08007c57 	.word	0x08007c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c38:	f7fd fa9e 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8007c3c:	6178      	str	r0, [r7, #20]
        break;
 8007c3e:	e013      	b.n	8007c68 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c40:	f7fd faae 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8007c44:	6178      	str	r0, [r7, #20]
        break;
 8007c46:	e00f      	b.n	8007c68 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c48:	4b24      	ldr	r3, [pc, #144]	; (8007cdc <UART_SetConfig+0x598>)
 8007c4a:	617b      	str	r3, [r7, #20]
        break;
 8007c4c:	e00c      	b.n	8007c68 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4e:	f7fd f9e1 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8007c52:	6178      	str	r0, [r7, #20]
        break;
 8007c54:	e008      	b.n	8007c68 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c5a:	617b      	str	r3, [r7, #20]
        break;
 8007c5c:	e004      	b.n	8007c68 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	76bb      	strb	r3, [r7, #26]
        break;
 8007c66:	bf00      	nop
    }

    if (pclk != 0U)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d020      	beq.n	8007cb0 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	4a19      	ldr	r2, [pc, #100]	; (8007cd8 <UART_SetConfig+0x594>)
 8007c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	441a      	add	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2b0f      	cmp	r3, #15
 8007c98:	d908      	bls.n	8007cac <UART_SetConfig+0x568>
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca0:	d204      	bcs.n	8007cac <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	60da      	str	r2, [r3, #12]
 8007caa:	e001      	b.n	8007cb0 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007ccc:	7ebb      	ldrb	r3, [r7, #26]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3720      	adds	r7, #32
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	0800ad38 	.word	0x0800ad38
 8007cdc:	00f42400 	.word	0x00f42400

08007ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01a      	beq.n	8007df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dde:	d10a      	bne.n	8007df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	605a      	str	r2, [r3, #4]
  }
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af02      	add	r7, sp, #8
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e34:	f7f9 fcec 	bl	8001810 <HAL_GetTick>
 8007e38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d10e      	bne.n	8007e66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f82f 	bl	8007eba <UART_WaitOnFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e025      	b.n	8007eb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d10e      	bne.n	8007e92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f819 	bl	8007eba <UART_WaitOnFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e00f      	b.n	8007eb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	603b      	str	r3, [r7, #0]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eca:	e062      	b.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed2:	d05e      	beq.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed4:	f7f9 fc9c 	bl	8001810 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d302      	bcc.n	8007eea <UART_WaitOnFlagUntilTimeout+0x30>
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d11d      	bne.n	8007f26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ef8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0201 	bic.w	r2, r2, #1
 8007f08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e045      	b.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d02e      	beq.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f42:	d126      	bne.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0201 	bic.w	r2, r2, #1
 8007f6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e00f      	b.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69da      	ldr	r2, [r3, #28]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	bf0c      	ite	eq
 8007fa2:	2301      	moveq	r3, #1
 8007fa4:	2300      	movne	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	461a      	mov	r2, r3
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d08d      	beq.n	8007ecc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fd0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe0:	f023 0301 	bic.w	r3, r3, #1
 8007fe4:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d107      	bne.n	8007ffe <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0210 	bic.w	r2, r2, #16
 8007ffc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff fb6b 	bl	8007718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008060:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7f9 f827 	bl	80010c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b085      	sub	sp, #20
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e027      	b.n	8008120 <HAL_UARTEx_DisableFifoMode+0x66>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2224      	movs	r2, #36	; 0x24
 80080dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0201 	bic.w	r2, r2, #1
 80080f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008140:	2302      	movs	r3, #2
 8008142:	e02d      	b.n	80081a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2224      	movs	r2, #36	; 0x24
 8008150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0201 	bic.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f84f 	bl	8008224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d101      	bne.n	80081c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081bc:	2302      	movs	r3, #2
 80081be:	e02d      	b.n	800821c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2224      	movs	r2, #36	; 0x24
 80081cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0201 	bic.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f811 	bl	8008224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008230:	2b00      	cmp	r3, #0
 8008232:	d108      	bne.n	8008246 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008244:	e031      	b.n	80082aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008246:	2308      	movs	r3, #8
 8008248:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800824a:	2308      	movs	r3, #8
 800824c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	0e5b      	lsrs	r3, r3, #25
 8008256:	b2db      	uxtb	r3, r3
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	0f5b      	lsrs	r3, r3, #29
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	7b3a      	ldrb	r2, [r7, #12]
 8008272:	4911      	ldr	r1, [pc, #68]	; (80082b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008274:	5c8a      	ldrb	r2, [r1, r2]
 8008276:	fb02 f303 	mul.w	r3, r2, r3
 800827a:	7b3a      	ldrb	r2, [r7, #12]
 800827c:	490f      	ldr	r1, [pc, #60]	; (80082bc <UARTEx_SetNbDataToProcess+0x98>)
 800827e:	5c8a      	ldrb	r2, [r1, r2]
 8008280:	fb93 f3f2 	sdiv	r3, r3, r2
 8008284:	b29a      	uxth	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	7b7a      	ldrb	r2, [r7, #13]
 8008290:	4909      	ldr	r1, [pc, #36]	; (80082b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008292:	5c8a      	ldrb	r2, [r1, r2]
 8008294:	fb02 f303 	mul.w	r3, r2, r3
 8008298:	7b7a      	ldrb	r2, [r7, #13]
 800829a:	4908      	ldr	r1, [pc, #32]	; (80082bc <UARTEx_SetNbDataToProcess+0x98>)
 800829c:	5c8a      	ldrb	r2, [r1, r2]
 800829e:	fb93 f3f2 	sdiv	r3, r3, r2
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	0800ad50 	.word	0x0800ad50
 80082bc:	0800ad58 	.word	0x0800ad58

080082c0 <__NVIC_SetPriority>:
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	db0a      	blt.n	80082ea <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	490c      	ldr	r1, [pc, #48]	; (800830c <__NVIC_SetPriority+0x4c>)
 80082da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082de:	0152      	lsls	r2, r2, #5
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	440b      	add	r3, r1
 80082e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80082e8:	e00a      	b.n	8008300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	4908      	ldr	r1, [pc, #32]	; (8008310 <__NVIC_SetPriority+0x50>)
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	f003 030f 	and.w	r3, r3, #15
 80082f6:	3b04      	subs	r3, #4
 80082f8:	0152      	lsls	r2, r2, #5
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	440b      	add	r3, r1
 80082fe:	761a      	strb	r2, [r3, #24]
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	e000e100 	.word	0xe000e100
 8008310:	e000ed00 	.word	0xe000ed00

08008314 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <SysTick_Handler+0x1c>)
 800831a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800831c:	f001 fbf0 	bl	8009b00 <xTaskGetSchedulerState>
 8008320:	4603      	mov	r3, r0
 8008322:	2b01      	cmp	r3, #1
 8008324:	d001      	beq.n	800832a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008326:	f002 f8cf 	bl	800a4c8 <xPortSysTickHandler>
  }
}
 800832a:	bf00      	nop
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	e000e010 	.word	0xe000e010

08008334 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008338:	2100      	movs	r1, #0
 800833a:	f06f 0004 	mvn.w	r0, #4
 800833e:	f7ff ffbf 	bl	80082c0 <__NVIC_SetPriority>
#endif
}
 8008342:	bf00      	nop
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800834e:	f3ef 8305 	mrs	r3, IPSR
 8008352:	603b      	str	r3, [r7, #0]
  return(result);
 8008354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800835a:	f06f 0305 	mvn.w	r3, #5
 800835e:	607b      	str	r3, [r7, #4]
 8008360:	e00c      	b.n	800837c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008362:	4b0a      	ldr	r3, [pc, #40]	; (800838c <osKernelInitialize+0x44>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d105      	bne.n	8008376 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800836a:	4b08      	ldr	r3, [pc, #32]	; (800838c <osKernelInitialize+0x44>)
 800836c:	2201      	movs	r2, #1
 800836e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008370:	2300      	movs	r3, #0
 8008372:	607b      	str	r3, [r7, #4]
 8008374:	e002      	b.n	800837c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008376:	f04f 33ff 	mov.w	r3, #4294967295
 800837a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800837c:	687b      	ldr	r3, [r7, #4]
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	2000002c 	.word	0x2000002c

08008390 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008396:	f3ef 8305 	mrs	r3, IPSR
 800839a:	603b      	str	r3, [r7, #0]
  return(result);
 800839c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80083a2:	f06f 0305 	mvn.w	r3, #5
 80083a6:	607b      	str	r3, [r7, #4]
 80083a8:	e010      	b.n	80083cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083aa:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <osKernelStart+0x48>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d109      	bne.n	80083c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083b2:	f7ff ffbf 	bl	8008334 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083b6:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <osKernelStart+0x48>)
 80083b8:	2202      	movs	r2, #2
 80083ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083bc:	f000 ffa4 	bl	8009308 <vTaskStartScheduler>
      stat = osOK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	607b      	str	r3, [r7, #4]
 80083c4:	e002      	b.n	80083cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80083c6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083cc:	687b      	ldr	r3, [r7, #4]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	2000002c 	.word	0x2000002c

080083dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08e      	sub	sp, #56	; 0x38
 80083e0:	af04      	add	r7, sp, #16
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083e8:	2300      	movs	r3, #0
 80083ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ec:	f3ef 8305 	mrs	r3, IPSR
 80083f0:	617b      	str	r3, [r7, #20]
  return(result);
 80083f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d17e      	bne.n	80084f6 <osThreadNew+0x11a>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d07b      	beq.n	80084f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80083fe:	2380      	movs	r3, #128	; 0x80
 8008400:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008402:	2318      	movs	r3, #24
 8008404:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008406:	2300      	movs	r3, #0
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800840a:	f04f 33ff 	mov.w	r3, #4294967295
 800840e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d045      	beq.n	80084a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <osThreadNew+0x48>
        name = attr->name;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <osThreadNew+0x6e>
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	2b38      	cmp	r3, #56	; 0x38
 800843c:	d805      	bhi.n	800844a <osThreadNew+0x6e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <osThreadNew+0x72>
        return (NULL);
 800844a:	2300      	movs	r3, #0
 800844c:	e054      	b.n	80084f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	089b      	lsrs	r3, r3, #2
 800845c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00e      	beq.n	8008484 <osThreadNew+0xa8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	2b5f      	cmp	r3, #95	; 0x5f
 800846c:	d90a      	bls.n	8008484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <osThreadNew+0xa8>
        mem = 1;
 800847e:	2301      	movs	r3, #1
 8008480:	61bb      	str	r3, [r7, #24]
 8008482:	e010      	b.n	80084a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10c      	bne.n	80084a6 <osThreadNew+0xca>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d108      	bne.n	80084a6 <osThreadNew+0xca>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d104      	bne.n	80084a6 <osThreadNew+0xca>
          mem = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	61bb      	str	r3, [r7, #24]
 80084a0:	e001      	b.n	80084a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d110      	bne.n	80084ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084b4:	9202      	str	r2, [sp, #8]
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	6a3a      	ldr	r2, [r7, #32]
 80084c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 fd7e 	bl	8008fc4 <xTaskCreateStatic>
 80084c8:	4603      	mov	r3, r0
 80084ca:	613b      	str	r3, [r7, #16]
 80084cc:	e013      	b.n	80084f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d110      	bne.n	80084f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	f107 0310 	add.w	r3, r7, #16
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 fdb1 	bl	800904e <xTaskCreate>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d001      	beq.n	80084f6 <osThreadNew+0x11a>
            hTask = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80084f6:	693b      	ldr	r3, [r7, #16]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3728      	adds	r7, #40	; 0x28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008508:	f3ef 8305 	mrs	r3, IPSR
 800850c:	60bb      	str	r3, [r7, #8]
  return(result);
 800850e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <osDelay+0x1c>
    stat = osErrorISR;
 8008514:	f06f 0305 	mvn.w	r3, #5
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e007      	b.n	800852c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 feca 	bl	80092c0 <vTaskDelay>
    }
  }

  return (stat);
 800852c:	68fb      	ldr	r3, [r7, #12]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4a07      	ldr	r2, [pc, #28]	; (8008564 <vApplicationGetIdleTaskMemory+0x2c>)
 8008548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4a06      	ldr	r2, [pc, #24]	; (8008568 <vApplicationGetIdleTaskMemory+0x30>)
 800854e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2280      	movs	r2, #128	; 0x80
 8008554:	601a      	str	r2, [r3, #0]
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20000030 	.word	0x20000030
 8008568:	20000090 	.word	0x20000090

0800856c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4a07      	ldr	r2, [pc, #28]	; (8008598 <vApplicationGetTimerTaskMemory+0x2c>)
 800857c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	4a06      	ldr	r2, [pc, #24]	; (800859c <vApplicationGetTimerTaskMemory+0x30>)
 8008582:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800858a:	601a      	str	r2, [r3, #0]
}
 800858c:	bf00      	nop
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	20000290 	.word	0x20000290
 800859c:	200002f0 	.word	0x200002f0

080085a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f103 0208 	add.w	r2, r3, #8
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f04f 32ff 	mov.w	r2, #4294967295
 80085b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f103 0208 	add.w	r2, r3, #8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f103 0208 	add.w	r2, r3, #8
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	601a      	str	r2, [r3, #0]
}
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008642:	b480      	push	{r7}
 8008644:	b085      	sub	sp, #20
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008658:	d103      	bne.n	8008662 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	e00c      	b.n	800867c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3308      	adds	r3, #8
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	e002      	b.n	8008670 <vListInsert+0x2e>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	429a      	cmp	r2, r3
 800867a:	d2f6      	bcs.n	800866a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	601a      	str	r2, [r3, #0]
}
 80086a8:	bf00      	nop
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	6892      	ldr	r2, [r2, #8]
 80086ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6852      	ldr	r2, [r2, #4]
 80086d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d103      	bne.n	80086e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	1e5a      	subs	r2, r3, #1
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <xQueueGenericReset+0x1a>
 800871c:	f001 ffdc 	bl	800a6d8 <ulSetInterruptMask>
 8008720:	e7fe      	b.n	8008720 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8008722:	f001 fea5 	bl	800a470 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872e:	68f9      	ldr	r1, [r7, #12]
 8008730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008732:	fb01 f303 	mul.w	r3, r1, r3
 8008736:	441a      	add	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008752:	3b01      	subs	r3, #1
 8008754:	68f9      	ldr	r1, [r7, #12]
 8008756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008758:	fb01 f303 	mul.w	r3, r1, r3
 800875c:	441a      	add	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	22ff      	movs	r2, #255	; 0xff
 8008766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	22ff      	movs	r2, #255	; 0xff
 800876e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10e      	bne.n	8008796 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d014      	beq.n	80087aa <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3310      	adds	r3, #16
 8008784:	4618      	mov	r0, r3
 8008786:	f001 f825 	bl	80097d4 <xTaskRemoveFromEventList>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00c      	beq.n	80087aa <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008790:	f001 fe5c 	bl	800a44c <vPortYield>
 8008794:	e009      	b.n	80087aa <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3310      	adds	r3, #16
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff ff00 	bl	80085a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3324      	adds	r3, #36	; 0x24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff fefb 	bl	80085a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087aa:	f001 fe73 	bl	800a494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087ae:	2301      	movs	r3, #1
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af02      	add	r7, sp, #8
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <xQueueGenericCreateStatic+0x1a>
 80087cc:	f001 ff84 	bl	800a6d8 <ulSetInterruptMask>
 80087d0:	e7fe      	b.n	80087d0 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <xQueueGenericCreateStatic+0x26>
 80087d8:	f001 ff7e 	bl	800a6d8 <ulSetInterruptMask>
 80087dc:	e7fe      	b.n	80087dc <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <xQueueGenericCreateStatic+0x32>
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <xQueueGenericCreateStatic+0x36>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <xQueueGenericCreateStatic+0x38>
 80087ee:	2300      	movs	r3, #0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <xQueueGenericCreateStatic+0x42>
 80087f4:	f001 ff70 	bl	800a6d8 <ulSetInterruptMask>
 80087f8:	e7fe      	b.n	80087f8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <xQueueGenericCreateStatic+0x4e>
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <xQueueGenericCreateStatic+0x52>
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <xQueueGenericCreateStatic+0x54>
 800880a:	2300      	movs	r3, #0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <xQueueGenericCreateStatic+0x5e>
 8008810:	f001 ff62 	bl	800a6d8 <ulSetInterruptMask>
 8008814:	e7fe      	b.n	8008814 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008816:	2350      	movs	r3, #80	; 0x50
 8008818:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	2b50      	cmp	r3, #80	; 0x50
 800881e:	d002      	beq.n	8008826 <xQueueGenericCreateStatic+0x6e>
 8008820:	f001 ff5a 	bl	800a6d8 <ulSetInterruptMask>
 8008824:	e7fe      	b.n	8008824 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008826:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00d      	beq.n	800884e <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800883a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	4613      	mov	r3, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f837 	bl	80088bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800884e:	697b      	ldr	r3, [r7, #20]
	}
 8008850:	4618      	mov	r0, r3
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	; 0x28
 800885c:	af02      	add	r7, sp, #8
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	4613      	mov	r3, r2
 8008864:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xQueueGenericCreate+0x1a>
 800886c:	f001 ff34 	bl	800a6d8 <ulSetInterruptMask>
 8008870:	e7fe      	b.n	8008870 <xQueueGenericCreate+0x18>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	fb02 f303 	mul.w	r3, r2, r3
 800887a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	3350      	adds	r3, #80	; 0x50
 8008880:	4618      	mov	r0, r3
 8008882:	f001 ff91 	bl	800a7a8 <pvPortMalloc>
 8008886:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d011      	beq.n	80088b2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	3350      	adds	r3, #80	; 0x50
 8008896:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088a0:	79fa      	ldrb	r2, [r7, #7]
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	4613      	mov	r3, r2
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f805 	bl	80088bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088b2:	69bb      	ldr	r3, [r7, #24]
	}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3720      	adds	r7, #32
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	e002      	b.n	80088de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088ea:	2101      	movs	r1, #1
 80088ec:	69b8      	ldr	r0, [r7, #24]
 80088ee:	f7ff ff0b 	bl	8008708 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	78fa      	ldrb	r2, [r7, #3]
 80088f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b08a      	sub	sp, #40	; 0x28
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008910:	2300      	movs	r3, #0
 8008912:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <xQueueGenericSend+0x22>
 800891e:	f001 fedb 	bl	800a6d8 <ulSetInterruptMask>
 8008922:	e7fe      	b.n	8008922 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <xQueueGenericSend+0x30>
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <xQueueGenericSend+0x34>
 8008932:	2301      	movs	r3, #1
 8008934:	e000      	b.n	8008938 <xQueueGenericSend+0x36>
 8008936:	2300      	movs	r3, #0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <xQueueGenericSend+0x40>
 800893c:	f001 fecc 	bl	800a6d8 <ulSetInterruptMask>
 8008940:	e7fe      	b.n	8008940 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d103      	bne.n	8008950 <xQueueGenericSend+0x4e>
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894c:	2b01      	cmp	r3, #1
 800894e:	d101      	bne.n	8008954 <xQueueGenericSend+0x52>
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <xQueueGenericSend+0x54>
 8008954:	2300      	movs	r3, #0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d102      	bne.n	8008960 <xQueueGenericSend+0x5e>
 800895a:	f001 febd 	bl	800a6d8 <ulSetInterruptMask>
 800895e:	e7fe      	b.n	800895e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008960:	f001 f8ce 	bl	8009b00 <xTaskGetSchedulerState>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d102      	bne.n	8008970 <xQueueGenericSend+0x6e>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <xQueueGenericSend+0x72>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <xQueueGenericSend+0x74>
 8008974:	2300      	movs	r3, #0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d102      	bne.n	8008980 <xQueueGenericSend+0x7e>
 800897a:	f001 fead 	bl	800a6d8 <ulSetInterruptMask>
 800897e:	e7fe      	b.n	800897e <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008980:	f001 fd76 	bl	800a470 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	429a      	cmp	r2, r3
 800898e:	d302      	bcc.n	8008996 <xQueueGenericSend+0x94>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d11d      	bne.n	80089d2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	68b9      	ldr	r1, [r7, #8]
 800899a:	6a38      	ldr	r0, [r7, #32]
 800899c:	f000 f9a4 	bl	8008ce8 <prvCopyDataToQueue>
 80089a0:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	3324      	adds	r3, #36	; 0x24
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 ff10 	bl	80097d4 <xTaskRemoveFromEventList>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d007      	beq.n	80089ca <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089ba:	f001 fd47 	bl	800a44c <vPortYield>
 80089be:	e004      	b.n	80089ca <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089c6:	f001 fd41 	bl	800a44c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089ca:	f001 fd63 	bl	800a494 <vPortExitCritical>
				return pdPASS;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e05c      	b.n	8008a8c <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d103      	bne.n	80089e0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089d8:	f001 fd5c 	bl	800a494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	e055      	b.n	8008a8c <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089e6:	f107 0314 	add.w	r3, r7, #20
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 ff4e 	bl	800988c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089f0:	2301      	movs	r3, #1
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089f4:	f001 fd4e 	bl	800a494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089f8:	f000 fcde 	bl	80093b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089fc:	f001 fd38 	bl	800a470 <vPortEnterCritical>
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a06:	b25b      	sxtb	r3, r3
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0c:	d103      	bne.n	8008a16 <xQueueGenericSend+0x114>
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a1c:	b25b      	sxtb	r3, r3
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d103      	bne.n	8008a2c <xQueueGenericSend+0x12a>
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a2c:	f001 fd32 	bl	800a494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a30:	1d3a      	adds	r2, r7, #4
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	4611      	mov	r1, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 ff3d 	bl	80098b8 <xTaskCheckForTimeOut>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d11d      	bne.n	8008a80 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a44:	6a38      	ldr	r0, [r7, #32]
 8008a46:	f000 fa47 	bl	8008ed8 <prvIsQueueFull>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d011      	beq.n	8008a74 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	3310      	adds	r3, #16
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fe7b 	bl	8009754 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a5e:	6a38      	ldr	r0, [r7, #32]
 8008a60:	f000 f9d2 	bl	8008e08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a64:	f000 fcb6 	bl	80093d4 <xTaskResumeAll>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d188      	bne.n	8008980 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8008a6e:	f001 fced 	bl	800a44c <vPortYield>
 8008a72:	e785      	b.n	8008980 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a74:	6a38      	ldr	r0, [r7, #32]
 8008a76:	f000 f9c7 	bl	8008e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a7a:	f000 fcab 	bl	80093d4 <xTaskResumeAll>
 8008a7e:	e77f      	b.n	8008980 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a80:	6a38      	ldr	r0, [r7, #32]
 8008a82:	f000 f9c1 	bl	8008e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a86:	f000 fca5 	bl	80093d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3728      	adds	r7, #40	; 0x28
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08a      	sub	sp, #40	; 0x28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d102      	bne.n	8008ab2 <xQueueGenericSendFromISR+0x1e>
 8008aac:	f001 fe14 	bl	800a6d8 <ulSetInterruptMask>
 8008ab0:	e7fe      	b.n	8008ab0 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <xQueueGenericSendFromISR+0x2c>
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <xQueueGenericSendFromISR+0x30>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e000      	b.n	8008ac6 <xQueueGenericSendFromISR+0x32>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d102      	bne.n	8008ad0 <xQueueGenericSendFromISR+0x3c>
 8008aca:	f001 fe05 	bl	800a6d8 <ulSetInterruptMask>
 8008ace:	e7fe      	b.n	8008ace <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d103      	bne.n	8008ade <xQueueGenericSendFromISR+0x4a>
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <xQueueGenericSendFromISR+0x4e>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <xQueueGenericSendFromISR+0x50>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <xQueueGenericSendFromISR+0x5a>
 8008ae8:	f001 fdf6 	bl	800a6d8 <ulSetInterruptMask>
 8008aec:	e7fe      	b.n	8008aec <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aee:	f001 fdf3 	bl	800a6d8 <ulSetInterruptMask>
 8008af2:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <xQueueGenericSendFromISR+0x72>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d12d      	bne.n	8008b62 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b0c:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	68b9      	ldr	r1, [r7, #8]
 8008b18:	6a38      	ldr	r0, [r7, #32]
 8008b1a:	f000 f8e5 	bl	8008ce8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d112      	bne.n	8008b4e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d015      	beq.n	8008b5c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	3324      	adds	r3, #36	; 0x24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fe4d 	bl	80097d4 <xTaskRemoveFromEventList>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00d      	beq.n	8008b5c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	e006      	b.n	8008b5c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b4e:	7efb      	ldrb	r3, [r7, #27]
 8008b50:	3301      	adds	r3, #1
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	b25a      	sxtb	r2, r3
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8008b60:	e001      	b.n	8008b66 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008b66:	69f8      	ldr	r0, [r7, #28]
 8008b68:	f001 fdc3 	bl	800a6f2 <vClearInterruptMask>

	return xReturn;
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3728      	adds	r7, #40	; 0x28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b08a      	sub	sp, #40	; 0x28
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b82:	2300      	movs	r3, #0
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <xQueueReceive+0x20>
 8008b90:	f001 fda2 	bl	800a6d8 <ulSetInterruptMask>
 8008b94:	e7fe      	b.n	8008b94 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d103      	bne.n	8008ba4 <xQueueReceive+0x2e>
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <xQueueReceive+0x32>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e000      	b.n	8008baa <xQueueReceive+0x34>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <xQueueReceive+0x3e>
 8008bae:	f001 fd93 	bl	800a6d8 <ulSetInterruptMask>
 8008bb2:	e7fe      	b.n	8008bb2 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bb4:	f000 ffa4 	bl	8009b00 <xTaskGetSchedulerState>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <xQueueReceive+0x4e>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <xQueueReceive+0x52>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <xQueueReceive+0x54>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <xQueueReceive+0x5e>
 8008bce:	f001 fd83 	bl	800a6d8 <ulSetInterruptMask>
 8008bd2:	e7fe      	b.n	8008bd2 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bd4:	f001 fc4c 	bl	800a470 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d019      	beq.n	8008c18 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008be4:	68b9      	ldr	r1, [r7, #8]
 8008be6:	6a38      	ldr	r0, [r7, #32]
 8008be8:	f000 f8e8 	bl	8008dbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	3310      	adds	r3, #16
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 fde7 	bl	80097d4 <xTaskRemoveFromEventList>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c0c:	f001 fc1e 	bl	800a44c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c10:	f001 fc40 	bl	800a494 <vPortExitCritical>
				return pdPASS;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e063      	b.n	8008ce0 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d103      	bne.n	8008c26 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c1e:	f001 fc39 	bl	800a494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c22:	2300      	movs	r3, #0
 8008c24:	e05c      	b.n	8008ce0 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d106      	bne.n	8008c3a <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c2c:	f107 0314 	add.w	r3, r7, #20
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fe2b 	bl	800988c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c36:	2301      	movs	r3, #1
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c3a:	f001 fc2b 	bl	800a494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c3e:	f000 fbbb 	bl	80093b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c42:	f001 fc15 	bl	800a470 <vPortEnterCritical>
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c4c:	b25b      	sxtb	r3, r3
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d103      	bne.n	8008c5c <xQueueReceive+0xe6>
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c62:	b25b      	sxtb	r3, r3
 8008c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c68:	d103      	bne.n	8008c72 <xQueueReceive+0xfc>
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c72:	f001 fc0f 	bl	800a494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c76:	1d3a      	adds	r2, r7, #4
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fe1a 	bl	80098b8 <xTaskCheckForTimeOut>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d11d      	bne.n	8008cc6 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c8a:	6a38      	ldr	r0, [r7, #32]
 8008c8c:	f000 f90e 	bl	8008eac <prvIsQueueEmpty>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d011      	beq.n	8008cba <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	3324      	adds	r3, #36	; 0x24
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fd58 	bl	8009754 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ca4:	6a38      	ldr	r0, [r7, #32]
 8008ca6:	f000 f8af 	bl	8008e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008caa:	f000 fb93 	bl	80093d4 <xTaskResumeAll>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d18f      	bne.n	8008bd4 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8008cb4:	f001 fbca 	bl	800a44c <vPortYield>
 8008cb8:	e78c      	b.n	8008bd4 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008cba:	6a38      	ldr	r0, [r7, #32]
 8008cbc:	f000 f8a4 	bl	8008e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cc0:	f000 fb88 	bl	80093d4 <xTaskResumeAll>
 8008cc4:	e786      	b.n	8008bd4 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cc6:	6a38      	ldr	r0, [r7, #32]
 8008cc8:	f000 f89e 	bl	8008e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ccc:	f000 fb82 	bl	80093d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cd0:	6a38      	ldr	r0, [r7, #32]
 8008cd2:	f000 f8eb 	bl	8008eac <prvIsQueueEmpty>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f43f af7b 	beq.w	8008bd4 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3728      	adds	r7, #40	; 0x28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10d      	bne.n	8008d22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d14d      	bne.n	8008daa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 ff12 	bl	8009b3c <xTaskPriorityDisinherit>
 8008d18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	609a      	str	r2, [r3, #8]
 8008d20:	e043      	b.n	8008daa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d119      	bne.n	8008d5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6858      	ldr	r0, [r3, #4]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	461a      	mov	r2, r3
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	f001 ff1e 	bl	800ab74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d40:	441a      	add	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d32b      	bcc.n	8008daa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	605a      	str	r2, [r3, #4]
 8008d5a:	e026      	b.n	8008daa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	68d8      	ldr	r0, [r3, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	461a      	mov	r2, r3
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	f001 ff04 	bl	800ab74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d74:	425b      	negs	r3, r3
 8008d76:	441a      	add	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d207      	bcs.n	8008d98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d90:	425b      	negs	r3, r3
 8008d92:	441a      	add	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d105      	bne.n	8008daa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008db2:	697b      	ldr	r3, [r7, #20]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d018      	beq.n	8008e00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	441a      	add	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68da      	ldr	r2, [r3, #12]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d303      	bcc.n	8008df0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68d9      	ldr	r1, [r3, #12]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6838      	ldr	r0, [r7, #0]
 8008dfc:	f001 feba 	bl	800ab74 <memcpy>
	}
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e10:	f001 fb2e 	bl	800a470 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e1c:	e011      	b.n	8008e42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d012      	beq.n	8008e4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3324      	adds	r3, #36	; 0x24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 fcd2 	bl	80097d4 <xTaskRemoveFromEventList>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e36:	f000 fd91 	bl	800995c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dce9      	bgt.n	8008e1e <prvUnlockQueue+0x16>
 8008e4a:	e000      	b.n	8008e4e <prvUnlockQueue+0x46>
					break;
 8008e4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	22ff      	movs	r2, #255	; 0xff
 8008e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e56:	f001 fb1d 	bl	800a494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e5a:	f001 fb09 	bl	800a470 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e66:	e011      	b.n	8008e8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d012      	beq.n	8008e96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3310      	adds	r3, #16
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fcad 	bl	80097d4 <xTaskRemoveFromEventList>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e80:	f000 fd6c 	bl	800995c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dce9      	bgt.n	8008e68 <prvUnlockQueue+0x60>
 8008e94:	e000      	b.n	8008e98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	22ff      	movs	r2, #255	; 0xff
 8008e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ea0:	f001 faf8 	bl	800a494 <vPortExitCritical>
}
 8008ea4:	bf00      	nop
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eb4:	f001 fadc 	bl	800a470 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	e001      	b.n	8008eca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008eca:	f001 fae3 	bl	800a494 <vPortExitCritical>

	return xReturn;
 8008ece:	68fb      	ldr	r3, [r7, #12]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ee0:	f001 fac6 	bl	800a470 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d102      	bne.n	8008ef6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	e001      	b.n	8008efa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008efa:	f001 facb 	bl	800a494 <vPortExitCritical>

	return xReturn;
 8008efe:	68fb      	ldr	r3, [r7, #12]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]
 8008f16:	e014      	b.n	8008f42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f18:	4a0f      	ldr	r2, [pc, #60]	; (8008f58 <vQueueAddToRegistry+0x50>)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f24:	490c      	ldr	r1, [pc, #48]	; (8008f58 <vQueueAddToRegistry+0x50>)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f2e:	4a0a      	ldr	r2, [pc, #40]	; (8008f58 <vQueueAddToRegistry+0x50>)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	4413      	add	r3, r2
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f3a:	e006      	b.n	8008f4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b07      	cmp	r3, #7
 8008f46:	d9e7      	bls.n	8008f18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	200050e4 	.word	0x200050e4

08008f5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f6c:	f001 fa80 	bl	800a470 <vPortEnterCritical>
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f76:	b25b      	sxtb	r3, r3
 8008f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7c:	d103      	bne.n	8008f86 <vQueueWaitForMessageRestricted+0x2a>
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f8c:	b25b      	sxtb	r3, r3
 8008f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f92:	d103      	bne.n	8008f9c <vQueueWaitForMessageRestricted+0x40>
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f9c:	f001 fa7a 	bl	800a494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	3324      	adds	r3, #36	; 0x24
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fbeb 	bl	800978c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fb6:	6978      	ldr	r0, [r7, #20]
 8008fb8:	f7ff ff26 	bl	8008e08 <prvUnlockQueue>
	}
 8008fbc:	bf00      	nop
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08c      	sub	sp, #48	; 0x30
 8008fc8:	af04      	add	r7, sp, #16
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <xTaskCreateStatic+0x1a>
 8008fd8:	f001 fb7e 	bl	800a6d8 <ulSetInterruptMask>
 8008fdc:	e7fe      	b.n	8008fdc <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d102      	bne.n	8008fea <xTaskCreateStatic+0x26>
 8008fe4:	f001 fb78 	bl	800a6d8 <ulSetInterruptMask>
 8008fe8:	e7fe      	b.n	8008fe8 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fea:	2360      	movs	r3, #96	; 0x60
 8008fec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2b60      	cmp	r3, #96	; 0x60
 8008ff2:	d002      	beq.n	8008ffa <xTaskCreateStatic+0x36>
 8008ff4:	f001 fb70 	bl	800a6d8 <ulSetInterruptMask>
 8008ff8:	e7fe      	b.n	8008ff8 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ffa:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d01e      	beq.n	8009040 <xTaskCreateStatic+0x7c>
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01b      	beq.n	8009040 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009010:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	2202      	movs	r2, #2
 8009016:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800901a:	2300      	movs	r3, #0
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	9302      	str	r3, [sp, #8]
 8009022:	f107 0318 	add.w	r3, r7, #24
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	68b9      	ldr	r1, [r7, #8]
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 f850 	bl	80090d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009038:	69f8      	ldr	r0, [r7, #28]
 800903a:	f000 f8d9 	bl	80091f0 <prvAddNewTaskToReadyList>
 800903e:	e001      	b.n	8009044 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8009040:	2300      	movs	r3, #0
 8009042:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009044:	69bb      	ldr	r3, [r7, #24]
	}
 8009046:	4618      	mov	r0, r3
 8009048:	3720      	adds	r7, #32
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800904e:	b580      	push	{r7, lr}
 8009050:	b08c      	sub	sp, #48	; 0x30
 8009052:	af04      	add	r7, sp, #16
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	603b      	str	r3, [r7, #0]
 800905a:	4613      	mov	r3, r2
 800905c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800905e:	88fb      	ldrh	r3, [r7, #6]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4618      	mov	r0, r3
 8009064:	f001 fba0 	bl	800a7a8 <pvPortMalloc>
 8009068:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00e      	beq.n	800908e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009070:	2060      	movs	r0, #96	; 0x60
 8009072:	f001 fb99 	bl	800a7a8 <pvPortMalloc>
 8009076:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	631a      	str	r2, [r3, #48]	; 0x30
 8009084:	e005      	b.n	8009092 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009086:	6978      	ldr	r0, [r7, #20]
 8009088:	f001 fc42 	bl	800a910 <vPortFree>
 800908c:	e001      	b.n	8009092 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d017      	beq.n	80090c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090a0:	88fa      	ldrh	r2, [r7, #6]
 80090a2:	2300      	movs	r3, #0
 80090a4:	9303      	str	r3, [sp, #12]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	9302      	str	r3, [sp, #8]
 80090aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f80e 	bl	80090d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090bc:	69f8      	ldr	r0, [r7, #28]
 80090be:	f000 f897 	bl	80091f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090c2:	2301      	movs	r3, #1
 80090c4:	61bb      	str	r3, [r7, #24]
 80090c6:	e002      	b.n	80090ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090c8:	f04f 33ff 	mov.w	r3, #4294967295
 80090cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090ce:	69bb      	ldr	r3, [r7, #24]
	}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3720      	adds	r7, #32
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	461a      	mov	r2, r3
 80090f0:	21a5      	movs	r1, #165	; 0xa5
 80090f2:	f001 fd4c 	bl	800ab8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009100:	3b01      	subs	r3, #1
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f003 0307 	and.w	r3, r3, #7
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <prvInitialiseNewTask+0x48>
 800911a:	f001 fadd 	bl	800a6d8 <ulSetInterruptMask>
 800911e:	e7fe      	b.n	800911e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d01f      	beq.n	8009166 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009126:	2300      	movs	r3, #0
 8009128:	617b      	str	r3, [r7, #20]
 800912a:	e012      	b.n	8009152 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	4413      	add	r3, r2
 8009132:	7819      	ldrb	r1, [r3, #0]
 8009134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	4413      	add	r3, r2
 800913a:	3334      	adds	r3, #52	; 0x34
 800913c:	460a      	mov	r2, r1
 800913e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	4413      	add	r3, r2
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d006      	beq.n	800915a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	3301      	adds	r3, #1
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2b0f      	cmp	r3, #15
 8009156:	d9e9      	bls.n	800912c <prvInitialiseNewTask+0x54>
 8009158:	e000      	b.n	800915c <prvInitialiseNewTask+0x84>
			{
				break;
 800915a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009164:	e003      	b.n	800916e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	2b37      	cmp	r3, #55	; 0x37
 8009172:	d901      	bls.n	8009178 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009174:	2337      	movs	r3, #55	; 0x37
 8009176:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	6a3a      	ldr	r2, [r7, #32]
 800917c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800917e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009180:	6a3a      	ldr	r2, [r7, #32]
 8009182:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	2200      	movs	r2, #0
 8009188:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	3304      	adds	r3, #4
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff fa26 	bl	80085e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	3318      	adds	r3, #24
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff fa21 	bl	80085e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	2200      	movs	r2, #0
 80091b8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	2200      	movs	r2, #0
 80091be:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	6938      	ldr	r0, [r7, #16]
 80091d2:	f001 f9ab 	bl	800a52c <pxPortInitialiseStack>
 80091d6:	4602      	mov	r2, r0
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e8:	bf00      	nop
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091f8:	f001 f93a 	bl	800a470 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091fc:	4b2a      	ldr	r3, [pc, #168]	; (80092a8 <prvAddNewTaskToReadyList+0xb8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3301      	adds	r3, #1
 8009202:	4a29      	ldr	r2, [pc, #164]	; (80092a8 <prvAddNewTaskToReadyList+0xb8>)
 8009204:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009206:	4b29      	ldr	r3, [pc, #164]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800920e:	4a27      	ldr	r2, [pc, #156]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009214:	4b24      	ldr	r3, [pc, #144]	; (80092a8 <prvAddNewTaskToReadyList+0xb8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d110      	bne.n	800923e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800921c:	f000 fbba 	bl	8009994 <prvInitialiseTaskLists>
 8009220:	e00d      	b.n	800923e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009222:	4b23      	ldr	r3, [pc, #140]	; (80092b0 <prvAddNewTaskToReadyList+0xc0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d109      	bne.n	800923e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800922a:	4b20      	ldr	r3, [pc, #128]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	429a      	cmp	r2, r3
 8009236:	d802      	bhi.n	800923e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009238:	4a1c      	ldr	r2, [pc, #112]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800923e:	4b1d      	ldr	r3, [pc, #116]	; (80092b4 <prvAddNewTaskToReadyList+0xc4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3301      	adds	r3, #1
 8009244:	4a1b      	ldr	r2, [pc, #108]	; (80092b4 <prvAddNewTaskToReadyList+0xc4>)
 8009246:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009248:	4b1a      	ldr	r3, [pc, #104]	; (80092b4 <prvAddNewTaskToReadyList+0xc4>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009254:	4b18      	ldr	r3, [pc, #96]	; (80092b8 <prvAddNewTaskToReadyList+0xc8>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d903      	bls.n	8009264 <prvAddNewTaskToReadyList+0x74>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	4a15      	ldr	r2, [pc, #84]	; (80092b8 <prvAddNewTaskToReadyList+0xc8>)
 8009262:	6013      	str	r3, [r2, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4a12      	ldr	r2, [pc, #72]	; (80092bc <prvAddNewTaskToReadyList+0xcc>)
 8009272:	441a      	add	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3304      	adds	r3, #4
 8009278:	4619      	mov	r1, r3
 800927a:	4610      	mov	r0, r2
 800927c:	f7ff f9bd 	bl	80085fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009280:	f001 f908 	bl	800a494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009284:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <prvAddNewTaskToReadyList+0xc0>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d008      	beq.n	800929e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800928c:	4b07      	ldr	r3, [pc, #28]	; (80092ac <prvAddNewTaskToReadyList+0xbc>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009296:	429a      	cmp	r2, r3
 8009298:	d201      	bcs.n	800929e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800929a:	f001 f8d7 	bl	800a44c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800929e:	bf00      	nop
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000bc4 	.word	0x20000bc4
 80092ac:	200006f0 	.word	0x200006f0
 80092b0:	20000bd0 	.word	0x20000bd0
 80092b4:	20000be0 	.word	0x20000be0
 80092b8:	20000bcc 	.word	0x20000bcc
 80092bc:	200006f4 	.word	0x200006f4

080092c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00f      	beq.n	80092f2 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092d2:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <vTaskDelay+0x44>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <vTaskDelay+0x20>
 80092da:	f001 f9fd 	bl	800a6d8 <ulSetInterruptMask>
 80092de:	e7fe      	b.n	80092de <vTaskDelay+0x1e>
			vTaskSuspendAll();
 80092e0:	f000 f86a 	bl	80093b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092e4:	2100      	movs	r1, #0
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fcf8 	bl	8009cdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092ec:	f000 f872 	bl	80093d4 <xTaskResumeAll>
 80092f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 80092f8:	f001 f8a8 	bl	800a44c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20000bec 	.word	0x20000bec

08009308 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009316:	463a      	mov	r2, r7
 8009318:	1d39      	adds	r1, r7, #4
 800931a:	f107 0308 	add.w	r3, r7, #8
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff f90a 	bl	8008538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	9202      	str	r2, [sp, #8]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	2300      	movs	r3, #0
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	2300      	movs	r3, #0
 8009334:	460a      	mov	r2, r1
 8009336:	491a      	ldr	r1, [pc, #104]	; (80093a0 <vTaskStartScheduler+0x98>)
 8009338:	481a      	ldr	r0, [pc, #104]	; (80093a4 <vTaskStartScheduler+0x9c>)
 800933a:	f7ff fe43 	bl	8008fc4 <xTaskCreateStatic>
 800933e:	4603      	mov	r3, r0
 8009340:	4a19      	ldr	r2, [pc, #100]	; (80093a8 <vTaskStartScheduler+0xa0>)
 8009342:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009344:	4b18      	ldr	r3, [pc, #96]	; (80093a8 <vTaskStartScheduler+0xa0>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800934c:	2301      	movs	r3, #1
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	e001      	b.n	8009356 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009352:	2300      	movs	r3, #0
 8009354:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d102      	bne.n	8009362 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800935c:	f000 fd12 	bl	8009d84 <xTimerCreateTimerTask>
 8009360:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d110      	bne.n	800938a <vTaskStartScheduler+0x82>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8009368:	f001 f9b6 	bl	800a6d8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800936c:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <vTaskStartScheduler+0xa4>)
 800936e:	f04f 32ff 	mov.w	r2, #4294967295
 8009372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009374:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <vTaskStartScheduler+0xa8>)
 8009376:	2201      	movs	r2, #1
 8009378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800937a:	4b0e      	ldr	r3, [pc, #56]	; (80093b4 <vTaskStartScheduler+0xac>)
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009380:	f7f7 f9cc 	bl	800071c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009384:	f001 f95c 	bl	800a640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009388:	e006      	b.n	8009398 <vTaskStartScheduler+0x90>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009390:	d102      	bne.n	8009398 <vTaskStartScheduler+0x90>
 8009392:	f001 f9a1 	bl	800a6d8 <ulSetInterruptMask>
 8009396:	e7fe      	b.n	8009396 <vTaskStartScheduler+0x8e>
}
 8009398:	bf00      	nop
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	0800ac14 	.word	0x0800ac14
 80093a4:	08009975 	.word	0x08009975
 80093a8:	20000be8 	.word	0x20000be8
 80093ac:	20000be4 	.word	0x20000be4
 80093b0:	20000bd0 	.word	0x20000bd0
 80093b4:	20000bc8 	.word	0x20000bc8

080093b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093bc:	4b04      	ldr	r3, [pc, #16]	; (80093d0 <vTaskSuspendAll+0x18>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3301      	adds	r3, #1
 80093c2:	4a03      	ldr	r2, [pc, #12]	; (80093d0 <vTaskSuspendAll+0x18>)
 80093c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093c6:	bf00      	nop
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	20000bec 	.word	0x20000bec

080093d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093e2:	4b3b      	ldr	r3, [pc, #236]	; (80094d0 <xTaskResumeAll+0xfc>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d102      	bne.n	80093f0 <xTaskResumeAll+0x1c>
 80093ea:	f001 f975 	bl	800a6d8 <ulSetInterruptMask>
 80093ee:	e7fe      	b.n	80093ee <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093f0:	f001 f83e 	bl	800a470 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093f4:	4b36      	ldr	r3, [pc, #216]	; (80094d0 <xTaskResumeAll+0xfc>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	4a35      	ldr	r2, [pc, #212]	; (80094d0 <xTaskResumeAll+0xfc>)
 80093fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093fe:	4b34      	ldr	r3, [pc, #208]	; (80094d0 <xTaskResumeAll+0xfc>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d15c      	bne.n	80094c0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009406:	4b33      	ldr	r3, [pc, #204]	; (80094d4 <xTaskResumeAll+0x100>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d058      	beq.n	80094c0 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800940e:	e02f      	b.n	8009470 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009410:	4b31      	ldr	r3, [pc, #196]	; (80094d8 <xTaskResumeAll+0x104>)
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3318      	adds	r3, #24
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff f949 	bl	80086b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3304      	adds	r3, #4
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff f944 	bl	80086b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009430:	4b2a      	ldr	r3, [pc, #168]	; (80094dc <xTaskResumeAll+0x108>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d903      	bls.n	8009440 <xTaskResumeAll+0x6c>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	4a27      	ldr	r2, [pc, #156]	; (80094dc <xTaskResumeAll+0x108>)
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4a24      	ldr	r2, [pc, #144]	; (80094e0 <xTaskResumeAll+0x10c>)
 800944e:	441a      	add	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3304      	adds	r3, #4
 8009454:	4619      	mov	r1, r3
 8009456:	4610      	mov	r0, r2
 8009458:	f7ff f8cf 	bl	80085fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009460:	4b20      	ldr	r3, [pc, #128]	; (80094e4 <xTaskResumeAll+0x110>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009466:	429a      	cmp	r2, r3
 8009468:	d302      	bcc.n	8009470 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800946a:	4b1f      	ldr	r3, [pc, #124]	; (80094e8 <xTaskResumeAll+0x114>)
 800946c:	2201      	movs	r2, #1
 800946e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009470:	4b19      	ldr	r3, [pc, #100]	; (80094d8 <xTaskResumeAll+0x104>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1cb      	bne.n	8009410 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800947e:	f000 fb1f 	bl	8009ac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009482:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <xTaskResumeAll+0x118>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d010      	beq.n	80094b0 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800948e:	f000 f83f 	bl	8009510 <xTaskIncrementTick>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8009498:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <xTaskResumeAll+0x114>)
 800949a:	2201      	movs	r2, #1
 800949c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1f1      	bne.n	800948e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <xTaskResumeAll+0x118>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094b0:	4b0d      	ldr	r3, [pc, #52]	; (80094e8 <xTaskResumeAll+0x114>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094b8:	2301      	movs	r3, #1
 80094ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094bc:	f000 ffc6 	bl	800a44c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094c0:	f000 ffe8 	bl	800a494 <vPortExitCritical>

	return xAlreadyYielded;
 80094c4:	68bb      	ldr	r3, [r7, #8]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20000bec 	.word	0x20000bec
 80094d4:	20000bc4 	.word	0x20000bc4
 80094d8:	20000b84 	.word	0x20000b84
 80094dc:	20000bcc 	.word	0x20000bcc
 80094e0:	200006f4 	.word	0x200006f4
 80094e4:	200006f0 	.word	0x200006f0
 80094e8:	20000bd8 	.word	0x20000bd8
 80094ec:	20000bd4 	.word	0x20000bd4

080094f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094f6:	4b05      	ldr	r3, [pc, #20]	; (800950c <xTaskGetTickCount+0x1c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094fc:	687b      	ldr	r3, [r7, #4]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000bc8 	.word	0x20000bc8

08009510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009516:	2300      	movs	r3, #0
 8009518:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800951a:	4b4b      	ldr	r3, [pc, #300]	; (8009648 <xTaskIncrementTick+0x138>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	f040 8087 	bne.w	8009632 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009524:	4b49      	ldr	r3, [pc, #292]	; (800964c <xTaskIncrementTick+0x13c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3301      	adds	r3, #1
 800952a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800952c:	4a47      	ldr	r2, [pc, #284]	; (800964c <xTaskIncrementTick+0x13c>)
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d118      	bne.n	800956a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009538:	4b45      	ldr	r3, [pc, #276]	; (8009650 <xTaskIncrementTick+0x140>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <xTaskIncrementTick+0x38>
 8009542:	f001 f8c9 	bl	800a6d8 <ulSetInterruptMask>
 8009546:	e7fe      	b.n	8009546 <xTaskIncrementTick+0x36>
 8009548:	4b41      	ldr	r3, [pc, #260]	; (8009650 <xTaskIncrementTick+0x140>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	4b41      	ldr	r3, [pc, #260]	; (8009654 <xTaskIncrementTick+0x144>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a3f      	ldr	r2, [pc, #252]	; (8009650 <xTaskIncrementTick+0x140>)
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	4a3f      	ldr	r2, [pc, #252]	; (8009654 <xTaskIncrementTick+0x144>)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	4b3e      	ldr	r3, [pc, #248]	; (8009658 <xTaskIncrementTick+0x148>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3301      	adds	r3, #1
 8009562:	4a3d      	ldr	r2, [pc, #244]	; (8009658 <xTaskIncrementTick+0x148>)
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	f000 faab 	bl	8009ac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800956a:	4b3c      	ldr	r3, [pc, #240]	; (800965c <xTaskIncrementTick+0x14c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	429a      	cmp	r2, r3
 8009572:	d349      	bcc.n	8009608 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009574:	4b36      	ldr	r3, [pc, #216]	; (8009650 <xTaskIncrementTick+0x140>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800957e:	4b37      	ldr	r3, [pc, #220]	; (800965c <xTaskIncrementTick+0x14c>)
 8009580:	f04f 32ff 	mov.w	r2, #4294967295
 8009584:	601a      	str	r2, [r3, #0]
					break;
 8009586:	e03f      	b.n	8009608 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009588:	4b31      	ldr	r3, [pc, #196]	; (8009650 <xTaskIncrementTick+0x140>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d203      	bcs.n	80095a8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095a0:	4a2e      	ldr	r2, [pc, #184]	; (800965c <xTaskIncrementTick+0x14c>)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095a6:	e02f      	b.n	8009608 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff f881 	bl	80086b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d004      	beq.n	80095c4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	3318      	adds	r3, #24
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff f878 	bl	80086b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4b25      	ldr	r3, [pc, #148]	; (8009660 <xTaskIncrementTick+0x150>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d903      	bls.n	80095d8 <xTaskIncrementTick+0xc8>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	4a22      	ldr	r2, [pc, #136]	; (8009660 <xTaskIncrementTick+0x150>)
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4a1f      	ldr	r2, [pc, #124]	; (8009664 <xTaskIncrementTick+0x154>)
 80095e6:	441a      	add	r2, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7ff f803 	bl	80085fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f8:	4b1b      	ldr	r3, [pc, #108]	; (8009668 <xTaskIncrementTick+0x158>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fe:	429a      	cmp	r2, r3
 8009600:	d3b8      	bcc.n	8009574 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8009602:	2301      	movs	r3, #1
 8009604:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009606:	e7b5      	b.n	8009574 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009608:	4b17      	ldr	r3, [pc, #92]	; (8009668 <xTaskIncrementTick+0x158>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960e:	4915      	ldr	r1, [pc, #84]	; (8009664 <xTaskIncrementTick+0x154>)
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	440b      	add	r3, r1
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d901      	bls.n	8009624 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009624:	4b11      	ldr	r3, [pc, #68]	; (800966c <xTaskIncrementTick+0x15c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d007      	beq.n	800963c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800962c:	2301      	movs	r3, #1
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	e004      	b.n	800963c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009632:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <xTaskIncrementTick+0x160>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3301      	adds	r3, #1
 8009638:	4a0d      	ldr	r2, [pc, #52]	; (8009670 <xTaskIncrementTick+0x160>)
 800963a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800963c:	697b      	ldr	r3, [r7, #20]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20000bec 	.word	0x20000bec
 800964c:	20000bc8 	.word	0x20000bc8
 8009650:	20000b7c 	.word	0x20000b7c
 8009654:	20000b80 	.word	0x20000b80
 8009658:	20000bdc 	.word	0x20000bdc
 800965c:	20000be4 	.word	0x20000be4
 8009660:	20000bcc 	.word	0x20000bcc
 8009664:	200006f4 	.word	0x200006f4
 8009668:	200006f0 	.word	0x200006f0
 800966c:	20000bd8 	.word	0x20000bd8
 8009670:	20000bd4 	.word	0x20000bd4

08009674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800967a:	4b2f      	ldr	r3, [pc, #188]	; (8009738 <vTaskSwitchContext+0xc4>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009682:	4b2e      	ldr	r3, [pc, #184]	; (800973c <vTaskSwitchContext+0xc8>)
 8009684:	2201      	movs	r2, #1
 8009686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009688:	e052      	b.n	8009730 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 800968a:	4b2c      	ldr	r3, [pc, #176]	; (800973c <vTaskSwitchContext+0xc8>)
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009690:	f7f7 f84b 	bl	800072a <getRunTimeCounterValue>
 8009694:	4603      	mov	r3, r0
 8009696:	4a2a      	ldr	r2, [pc, #168]	; (8009740 <vTaskSwitchContext+0xcc>)
 8009698:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800969a:	4b29      	ldr	r3, [pc, #164]	; (8009740 <vTaskSwitchContext+0xcc>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	4b29      	ldr	r3, [pc, #164]	; (8009744 <vTaskSwitchContext+0xd0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d909      	bls.n	80096ba <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80096a6:	4b28      	ldr	r3, [pc, #160]	; (8009748 <vTaskSwitchContext+0xd4>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80096ac:	4a24      	ldr	r2, [pc, #144]	; (8009740 <vTaskSwitchContext+0xcc>)
 80096ae:	6810      	ldr	r0, [r2, #0]
 80096b0:	4a24      	ldr	r2, [pc, #144]	; (8009744 <vTaskSwitchContext+0xd0>)
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	1a82      	subs	r2, r0, r2
 80096b6:	440a      	add	r2, r1
 80096b8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80096ba:	4b21      	ldr	r3, [pc, #132]	; (8009740 <vTaskSwitchContext+0xcc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a21      	ldr	r2, [pc, #132]	; (8009744 <vTaskSwitchContext+0xd0>)
 80096c0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096c2:	4b22      	ldr	r3, [pc, #136]	; (800974c <vTaskSwitchContext+0xd8>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	607b      	str	r3, [r7, #4]
 80096c8:	e008      	b.n	80096dc <vTaskSwitchContext+0x68>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d102      	bne.n	80096d6 <vTaskSwitchContext+0x62>
 80096d0:	f001 f802 	bl	800a6d8 <ulSetInterruptMask>
 80096d4:	e7fe      	b.n	80096d4 <vTaskSwitchContext+0x60>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3b01      	subs	r3, #1
 80096da:	607b      	str	r3, [r7, #4]
 80096dc:	491c      	ldr	r1, [pc, #112]	; (8009750 <vTaskSwitchContext+0xdc>)
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	4613      	mov	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	440b      	add	r3, r1
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0ec      	beq.n	80096ca <vTaskSwitchContext+0x56>
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4a15      	ldr	r2, [pc, #84]	; (8009750 <vTaskSwitchContext+0xdc>)
 80096fc:	4413      	add	r3, r2
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	605a      	str	r2, [r3, #4]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	3308      	adds	r3, #8
 8009712:	429a      	cmp	r2, r3
 8009714:	d104      	bne.n	8009720 <vTaskSwitchContext+0xac>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	605a      	str	r2, [r3, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	4a08      	ldr	r2, [pc, #32]	; (8009748 <vTaskSwitchContext+0xd4>)
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	4a08      	ldr	r2, [pc, #32]	; (800974c <vTaskSwitchContext+0xd8>)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6013      	str	r3, [r2, #0]
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20000bec 	.word	0x20000bec
 800973c:	20000bd8 	.word	0x20000bd8
 8009740:	20000bf4 	.word	0x20000bf4
 8009744:	20000bf0 	.word	0x20000bf0
 8009748:	200006f0 	.word	0x200006f0
 800974c:	20000bcc 	.word	0x20000bcc
 8009750:	200006f4 	.word	0x200006f4

08009754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <vTaskPlaceOnEventList+0x16>
 8009764:	f000 ffb8 	bl	800a6d8 <ulSetInterruptMask>
 8009768:	e7fe      	b.n	8009768 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800976a:	4b07      	ldr	r3, [pc, #28]	; (8009788 <vTaskPlaceOnEventList+0x34>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3318      	adds	r3, #24
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7fe ff65 	bl	8008642 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009778:	2101      	movs	r1, #1
 800977a:	6838      	ldr	r0, [r7, #0]
 800977c:	f000 faae 	bl	8009cdc <prvAddCurrentTaskToDelayedList>
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	200006f0 	.word	0x200006f0

0800978c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d102      	bne.n	80097a4 <vTaskPlaceOnEventListRestricted+0x18>
 800979e:	f000 ff9b 	bl	800a6d8 <ulSetInterruptMask>
 80097a2:	e7fe      	b.n	80097a2 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097a4:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <vTaskPlaceOnEventListRestricted+0x44>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3318      	adds	r3, #24
 80097aa:	4619      	mov	r1, r3
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7fe ff24 	bl	80085fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295
 80097bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	68b8      	ldr	r0, [r7, #8]
 80097c2:	f000 fa8b 	bl	8009cdc <prvAddCurrentTaskToDelayedList>
	}
 80097c6:	bf00      	nop
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	200006f0 	.word	0x200006f0

080097d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <xTaskRemoveFromEventList+0x1c>
 80097ea:	f000 ff75 	bl	800a6d8 <ulSetInterruptMask>
 80097ee:	e7fe      	b.n	80097ee <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	3318      	adds	r3, #24
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fe ff5d 	bl	80086b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097fa:	4b1e      	ldr	r3, [pc, #120]	; (8009874 <xTaskRemoveFromEventList+0xa0>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d11d      	bne.n	800983e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	3304      	adds	r3, #4
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe ff54 	bl	80086b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009810:	4b19      	ldr	r3, [pc, #100]	; (8009878 <xTaskRemoveFromEventList+0xa4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d903      	bls.n	8009820 <xTaskRemoveFromEventList+0x4c>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	4a16      	ldr	r2, [pc, #88]	; (8009878 <xTaskRemoveFromEventList+0xa4>)
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009824:	4613      	mov	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4a13      	ldr	r2, [pc, #76]	; (800987c <xTaskRemoveFromEventList+0xa8>)
 800982e:	441a      	add	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	3304      	adds	r3, #4
 8009834:	4619      	mov	r1, r3
 8009836:	4610      	mov	r0, r2
 8009838:	f7fe fedf 	bl	80085fa <vListInsertEnd>
 800983c:	e005      	b.n	800984a <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	3318      	adds	r3, #24
 8009842:	4619      	mov	r1, r3
 8009844:	480e      	ldr	r0, [pc, #56]	; (8009880 <xTaskRemoveFromEventList+0xac>)
 8009846:	f7fe fed8 	bl	80085fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984e:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <xTaskRemoveFromEventList+0xb0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	429a      	cmp	r2, r3
 8009856:	d905      	bls.n	8009864 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009858:	2301      	movs	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800985c:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <xTaskRemoveFromEventList+0xb4>)
 800985e:	2201      	movs	r2, #1
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	e001      	b.n	8009868 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009868:	68fb      	ldr	r3, [r7, #12]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20000bec 	.word	0x20000bec
 8009878:	20000bcc 	.word	0x20000bcc
 800987c:	200006f4 	.word	0x200006f4
 8009880:	20000b84 	.word	0x20000b84
 8009884:	200006f0 	.word	0x200006f0
 8009888:	20000bd8 	.word	0x20000bd8

0800988c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <vTaskInternalSetTimeOutState+0x24>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800989c:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <vTaskInternalSetTimeOutState+0x28>)
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	605a      	str	r2, [r3, #4]
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	20000bdc 	.word	0x20000bdc
 80098b4:	20000bc8 	.word	0x20000bc8

080098b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <xTaskCheckForTimeOut+0x16>
 80098c8:	f000 ff06 	bl	800a6d8 <ulSetInterruptMask>
 80098cc:	e7fe      	b.n	80098cc <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d102      	bne.n	80098da <xTaskCheckForTimeOut+0x22>
 80098d4:	f000 ff00 	bl	800a6d8 <ulSetInterruptMask>
 80098d8:	e7fe      	b.n	80098d8 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80098da:	f000 fdc9 	bl	800a470 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098de:	4b1d      	ldr	r3, [pc, #116]	; (8009954 <xTaskCheckForTimeOut+0x9c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f6:	d102      	bne.n	80098fe <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	e023      	b.n	8009946 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b15      	ldr	r3, [pc, #84]	; (8009958 <xTaskCheckForTimeOut+0xa0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d007      	beq.n	800991a <xTaskCheckForTimeOut+0x62>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009914:	2301      	movs	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	e015      	b.n	8009946 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	429a      	cmp	r2, r3
 8009922:	d20b      	bcs.n	800993c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	1ad2      	subs	r2, r2, r3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff ffab 	bl	800988c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009936:	2300      	movs	r3, #0
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	e004      	b.n	8009946 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009942:	2301      	movs	r3, #1
 8009944:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009946:	f000 fda5 	bl	800a494 <vPortExitCritical>

	return xReturn;
 800994a:	697b      	ldr	r3, [r7, #20]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20000bc8 	.word	0x20000bc8
 8009958:	20000bdc 	.word	0x20000bdc

0800995c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800995c:	b480      	push	{r7}
 800995e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009960:	4b03      	ldr	r3, [pc, #12]	; (8009970 <vTaskMissedYield+0x14>)
 8009962:	2201      	movs	r2, #1
 8009964:	601a      	str	r2, [r3, #0]
}
 8009966:	bf00      	nop
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	20000bd8 	.word	0x20000bd8

08009974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800997c:	f000 f84a 	bl	8009a14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009980:	4b03      	ldr	r3, [pc, #12]	; (8009990 <prvIdleTask+0x1c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d9f9      	bls.n	800997c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009988:	f000 fd60 	bl	800a44c <vPortYield>
		prvCheckTasksWaitingTermination();
 800998c:	e7f6      	b.n	800997c <prvIdleTask+0x8>
 800998e:	bf00      	nop
 8009990:	200006f4 	.word	0x200006f4

08009994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800999a:	2300      	movs	r3, #0
 800999c:	607b      	str	r3, [r7, #4]
 800999e:	e00c      	b.n	80099ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4a12      	ldr	r2, [pc, #72]	; (80099f4 <prvInitialiseTaskLists+0x60>)
 80099ac:	4413      	add	r3, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe fdf6 	bl	80085a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3301      	adds	r3, #1
 80099b8:	607b      	str	r3, [r7, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b37      	cmp	r3, #55	; 0x37
 80099be:	d9ef      	bls.n	80099a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099c0:	480d      	ldr	r0, [pc, #52]	; (80099f8 <prvInitialiseTaskLists+0x64>)
 80099c2:	f7fe fded 	bl	80085a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099c6:	480d      	ldr	r0, [pc, #52]	; (80099fc <prvInitialiseTaskLists+0x68>)
 80099c8:	f7fe fdea 	bl	80085a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099cc:	480c      	ldr	r0, [pc, #48]	; (8009a00 <prvInitialiseTaskLists+0x6c>)
 80099ce:	f7fe fde7 	bl	80085a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099d2:	480c      	ldr	r0, [pc, #48]	; (8009a04 <prvInitialiseTaskLists+0x70>)
 80099d4:	f7fe fde4 	bl	80085a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099d8:	480b      	ldr	r0, [pc, #44]	; (8009a08 <prvInitialiseTaskLists+0x74>)
 80099da:	f7fe fde1 	bl	80085a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099de:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <prvInitialiseTaskLists+0x78>)
 80099e0:	4a05      	ldr	r2, [pc, #20]	; (80099f8 <prvInitialiseTaskLists+0x64>)
 80099e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099e4:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <prvInitialiseTaskLists+0x7c>)
 80099e6:	4a05      	ldr	r2, [pc, #20]	; (80099fc <prvInitialiseTaskLists+0x68>)
 80099e8:	601a      	str	r2, [r3, #0]
}
 80099ea:	bf00      	nop
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	200006f4 	.word	0x200006f4
 80099f8:	20000b54 	.word	0x20000b54
 80099fc:	20000b68 	.word	0x20000b68
 8009a00:	20000b84 	.word	0x20000b84
 8009a04:	20000b98 	.word	0x20000b98
 8009a08:	20000bb0 	.word	0x20000bb0
 8009a0c:	20000b7c 	.word	0x20000b7c
 8009a10:	20000b80 	.word	0x20000b80

08009a14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a1a:	e019      	b.n	8009a50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a1c:	f000 fd28 	bl	800a470 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a20:	4b10      	ldr	r3, [pc, #64]	; (8009a64 <prvCheckTasksWaitingTermination+0x50>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fe41 	bl	80086b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a32:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <prvCheckTasksWaitingTermination+0x54>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	4a0b      	ldr	r2, [pc, #44]	; (8009a68 <prvCheckTasksWaitingTermination+0x54>)
 8009a3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a3c:	4b0b      	ldr	r3, [pc, #44]	; (8009a6c <prvCheckTasksWaitingTermination+0x58>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	4a0a      	ldr	r2, [pc, #40]	; (8009a6c <prvCheckTasksWaitingTermination+0x58>)
 8009a44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a46:	f000 fd25 	bl	800a494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f810 	bl	8009a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a50:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <prvCheckTasksWaitingTermination+0x58>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e1      	bne.n	8009a1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000b98 	.word	0x20000b98
 8009a68:	20000bc4 	.word	0x20000bc4
 8009a6c:	20000bac 	.word	0x20000bac

08009a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d108      	bne.n	8009a94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 ff42 	bl	800a910 <vPortFree>
				vPortFree( pxTCB );
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 ff3f 	bl	800a910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a92:	e010      	b.n	8009ab6 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d103      	bne.n	8009aa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 ff36 	bl	800a910 <vPortFree>
	}
 8009aa4:	e007      	b.n	8009ab6 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d002      	beq.n	8009ab6 <prvDeleteTCB+0x46>
 8009ab0:	f000 fe12 	bl	800a6d8 <ulSetInterruptMask>
 8009ab4:	e7fe      	b.n	8009ab4 <prvDeleteTCB+0x44>
	}
 8009ab6:	bf00      	nop
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ac6:	4b0c      	ldr	r3, [pc, #48]	; (8009af8 <prvResetNextTaskUnblockTime+0x38>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <prvResetNextTaskUnblockTime+0x3c>)
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ad8:	e008      	b.n	8009aec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <prvResetNextTaskUnblockTime+0x38>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	4a04      	ldr	r2, [pc, #16]	; (8009afc <prvResetNextTaskUnblockTime+0x3c>)
 8009aea:	6013      	str	r3, [r2, #0]
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	20000b7c 	.word	0x20000b7c
 8009afc:	20000be4 	.word	0x20000be4

08009b00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b06:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <xTaskGetSchedulerState+0x34>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	607b      	str	r3, [r7, #4]
 8009b12:	e008      	b.n	8009b26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b14:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <xTaskGetSchedulerState+0x38>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	607b      	str	r3, [r7, #4]
 8009b20:	e001      	b.n	8009b26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b22:	2300      	movs	r3, #0
 8009b24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b26:	687b      	ldr	r3, [r7, #4]
	}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	20000bd0 	.word	0x20000bd0
 8009b38:	20000bec 	.word	0x20000bec

08009b3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d046      	beq.n	8009be0 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b52:	4b26      	ldr	r3, [pc, #152]	; (8009bec <xTaskPriorityDisinherit+0xb0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d002      	beq.n	8009b62 <xTaskPriorityDisinherit+0x26>
 8009b5c:	f000 fdbc 	bl	800a6d8 <ulSetInterruptMask>
 8009b60:	e7fe      	b.n	8009b60 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d102      	bne.n	8009b70 <xTaskPriorityDisinherit+0x34>
 8009b6a:	f000 fdb5 	bl	800a6d8 <ulSetInterruptMask>
 8009b6e:	e7fe      	b.n	8009b6e <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b74:	1e5a      	subs	r2, r3, #1
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d02c      	beq.n	8009be0 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d128      	bne.n	8009be0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	3304      	adds	r3, #4
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fd8e 	bl	80086b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb0:	4b0f      	ldr	r3, [pc, #60]	; (8009bf0 <xTaskPriorityDisinherit+0xb4>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d903      	bls.n	8009bc0 <xTaskPriorityDisinherit+0x84>
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbc:	4a0c      	ldr	r2, [pc, #48]	; (8009bf0 <xTaskPriorityDisinherit+0xb4>)
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <xTaskPriorityDisinherit+0xb8>)
 8009bce:	441a      	add	r2, r3
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	f7fe fd0f 	bl	80085fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009be0:	68fb      	ldr	r3, [r7, #12]
	}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	200006f0 	.word	0x200006f0
 8009bf0:	20000bcc 	.word	0x20000bcc
 8009bf4:	200006f4 	.word	0x200006f4

08009bf8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <vTaskNotifyGiveFromISR+0x16>
 8009c08:	f000 fd66 	bl	800a6d8 <ulSetInterruptMask>
 8009c0c:	e7fe      	b.n	8009c0c <vTaskNotifyGiveFromISR+0x14>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c12:	f000 fd61 	bl	800a6d8 <ulSetInterruptMask>
 8009c16:	6138      	str	r0, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009c1e:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	659a      	str	r2, [r3, #88]	; 0x58

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d13e      	bne.n	8009cb6 <vTaskNotifyGiveFromISR+0xbe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d002      	beq.n	8009c46 <vTaskNotifyGiveFromISR+0x4e>
 8009c40:	f000 fd4a 	bl	800a6d8 <ulSetInterruptMask>
 8009c44:	e7fe      	b.n	8009c44 <vTaskNotifyGiveFromISR+0x4c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c46:	4b1f      	ldr	r3, [pc, #124]	; (8009cc4 <vTaskNotifyGiveFromISR+0xcc>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d11d      	bne.n	8009c8a <vTaskNotifyGiveFromISR+0x92>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	3304      	adds	r3, #4
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fd2e 	bl	80086b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5c:	4b1a      	ldr	r3, [pc, #104]	; (8009cc8 <vTaskNotifyGiveFromISR+0xd0>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d903      	bls.n	8009c6c <vTaskNotifyGiveFromISR+0x74>
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	4a17      	ldr	r2, [pc, #92]	; (8009cc8 <vTaskNotifyGiveFromISR+0xd0>)
 8009c6a:	6013      	str	r3, [r2, #0]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4a14      	ldr	r2, [pc, #80]	; (8009ccc <vTaskNotifyGiveFromISR+0xd4>)
 8009c7a:	441a      	add	r2, r3
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	4619      	mov	r1, r3
 8009c82:	4610      	mov	r0, r2
 8009c84:	f7fe fcb9 	bl	80085fa <vListInsertEnd>
 8009c88:	e005      	b.n	8009c96 <vTaskNotifyGiveFromISR+0x9e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	3318      	adds	r3, #24
 8009c8e:	4619      	mov	r1, r3
 8009c90:	480f      	ldr	r0, [pc, #60]	; (8009cd0 <vTaskNotifyGiveFromISR+0xd8>)
 8009c92:	f7fe fcb2 	bl	80085fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9a:	4b0e      	ldr	r3, [pc, #56]	; (8009cd4 <vTaskNotifyGiveFromISR+0xdc>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d908      	bls.n	8009cb6 <vTaskNotifyGiveFromISR+0xbe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d002      	beq.n	8009cb0 <vTaskNotifyGiveFromISR+0xb8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2201      	movs	r2, #1
 8009cae:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009cb0:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <vTaskNotifyGiveFromISR+0xe0>)
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8009cb6:	6938      	ldr	r0, [r7, #16]
 8009cb8:	f000 fd1b 	bl	800a6f2 <vClearInterruptMask>
	}
 8009cbc:	bf00      	nop
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20000bec 	.word	0x20000bec
 8009cc8:	20000bcc 	.word	0x20000bcc
 8009ccc:	200006f4 	.word	0x200006f4
 8009cd0:	20000b84 	.word	0x20000b84
 8009cd4:	200006f0 	.word	0x200006f0
 8009cd8:	20000bd8 	.word	0x20000bd8

08009cdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ce6:	4b21      	ldr	r3, [pc, #132]	; (8009d6c <prvAddCurrentTaskToDelayedList+0x90>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cec:	4b20      	ldr	r3, [pc, #128]	; (8009d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fcde 	bl	80086b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfe:	d10a      	bne.n	8009d16 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d007      	beq.n	8009d16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d06:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4819      	ldr	r0, [pc, #100]	; (8009d74 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d10:	f7fe fc73 	bl	80085fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d14:	e026      	b.n	8009d64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d1e:	4b14      	ldr	r3, [pc, #80]	; (8009d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d209      	bcs.n	8009d42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d2e:	4b12      	ldr	r3, [pc, #72]	; (8009d78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3304      	adds	r3, #4
 8009d38:	4619      	mov	r1, r3
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	f7fe fc81 	bl	8008642 <vListInsert>
}
 8009d40:	e010      	b.n	8009d64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d42:	4b0e      	ldr	r3, [pc, #56]	; (8009d7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	4b0a      	ldr	r3, [pc, #40]	; (8009d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4610      	mov	r0, r2
 8009d50:	f7fe fc77 	bl	8008642 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d54:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d202      	bcs.n	8009d64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d5e:	4a08      	ldr	r2, [pc, #32]	; (8009d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	6013      	str	r3, [r2, #0]
}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	20000bc8 	.word	0x20000bc8
 8009d70:	200006f0 	.word	0x200006f0
 8009d74:	20000bb0 	.word	0x20000bb0
 8009d78:	20000b80 	.word	0x20000b80
 8009d7c:	20000b7c 	.word	0x20000b7c
 8009d80:	20000be4 	.word	0x20000be4

08009d84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d8e:	f000 fac7 	bl	800a320 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d92:	4b18      	ldr	r3, [pc, #96]	; (8009df4 <xTimerCreateTimerTask+0x70>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d020      	beq.n	8009ddc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009da2:	463a      	mov	r2, r7
 8009da4:	1d39      	adds	r1, r7, #4
 8009da6:	f107 0308 	add.w	r3, r7, #8
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fbde 	bl	800856c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	9202      	str	r2, [sp, #8]
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	2303      	movs	r3, #3
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	460a      	mov	r2, r1
 8009dc2:	490d      	ldr	r1, [pc, #52]	; (8009df8 <xTimerCreateTimerTask+0x74>)
 8009dc4:	480d      	ldr	r0, [pc, #52]	; (8009dfc <xTimerCreateTimerTask+0x78>)
 8009dc6:	f7ff f8fd 	bl	8008fc4 <xTaskCreateStatic>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4a0c      	ldr	r2, [pc, #48]	; (8009e00 <xTimerCreateTimerTask+0x7c>)
 8009dce:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <xTimerCreateTimerTask+0x7c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d001      	beq.n	8009ddc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d102      	bne.n	8009de8 <xTimerCreateTimerTask+0x64>
 8009de2:	f000 fc79 	bl	800a6d8 <ulSetInterruptMask>
 8009de6:	e7fe      	b.n	8009de6 <xTimerCreateTimerTask+0x62>
	return xReturn;
 8009de8:	68fb      	ldr	r3, [r7, #12]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000c28 	.word	0x20000c28
 8009df8:	0800ac1c 	.word	0x0800ac1c
 8009dfc:	08009f19 	.word	0x08009f19
 8009e00:	20000c2c 	.word	0x20000c2c

08009e04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08a      	sub	sp, #40	; 0x28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d102      	bne.n	8009e22 <xTimerGenericCommand+0x1e>
 8009e1c:	f000 fc5c 	bl	800a6d8 <ulSetInterruptMask>
 8009e20:	e7fe      	b.n	8009e20 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e22:	4b1a      	ldr	r3, [pc, #104]	; (8009e8c <xTimerGenericCommand+0x88>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d02a      	beq.n	8009e80 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b05      	cmp	r3, #5
 8009e3a:	dc18      	bgt.n	8009e6e <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e3c:	f7ff fe60 	bl	8009b00 <xTaskGetSchedulerState>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d109      	bne.n	8009e5a <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e46:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <xTimerGenericCommand+0x88>)
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	f107 0114 	add.w	r1, r7, #20
 8009e4e:	2300      	movs	r3, #0
 8009e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e52:	f7fe fd56 	bl	8008902 <xQueueGenericSend>
 8009e56:	6278      	str	r0, [r7, #36]	; 0x24
 8009e58:	e012      	b.n	8009e80 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e5a:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <xTimerGenericCommand+0x88>)
 8009e5c:	6818      	ldr	r0, [r3, #0]
 8009e5e:	f107 0114 	add.w	r1, r7, #20
 8009e62:	2300      	movs	r3, #0
 8009e64:	2200      	movs	r2, #0
 8009e66:	f7fe fd4c 	bl	8008902 <xQueueGenericSend>
 8009e6a:	6278      	str	r0, [r7, #36]	; 0x24
 8009e6c:	e008      	b.n	8009e80 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e6e:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <xTimerGenericCommand+0x88>)
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	f107 0114 	add.w	r1, r7, #20
 8009e76:	2300      	movs	r3, #0
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	f7fe fe0b 	bl	8008a94 <xQueueGenericSendFromISR>
 8009e7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3728      	adds	r7, #40	; 0x28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20000c28 	.word	0x20000c28

08009e90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af02      	add	r7, sp, #8
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e9a:	4b1e      	ldr	r3, [pc, #120]	; (8009f14 <prvProcessExpiredTimer+0x84>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fe fc03 	bl	80086b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eb4:	f003 0304 	and.w	r3, r3, #4
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d01a      	beq.n	8009ef2 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	699a      	ldr	r2, [r3, #24]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	18d1      	adds	r1, r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 f8c1 	bl	800a050 <prvInsertTimerInActiveList>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d017      	beq.n	8009f04 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	2100      	movs	r1, #0
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff ff90 	bl	8009e04 <xTimerGenericCommand>
 8009ee4:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10b      	bne.n	8009f04 <prvProcessExpiredTimer+0x74>
 8009eec:	f000 fbf4 	bl	800a6d8 <ulSetInterruptMask>
 8009ef0:	e7fe      	b.n	8009ef0 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ef8:	f023 0301 	bic.w	r3, r3, #1
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	4798      	blx	r3
}
 8009f0c:	bf00      	nop
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20000c20 	.word	0x20000c20

08009f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f20:	f107 0308 	add.w	r3, r7, #8
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 f84f 	bl	8009fc8 <prvGetNextExpireTime>
 8009f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	4619      	mov	r1, r3
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 f803 	bl	8009f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f36:	f000 f8cd 	bl	800a0d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f3a:	e7f1      	b.n	8009f20 <prvTimerTask+0x8>

08009f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f46:	f7ff fa37 	bl	80093b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f4a:	f107 0308 	add.w	r3, r7, #8
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 f85e 	bl	800a010 <prvSampleTimeNow>
 8009f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d12a      	bne.n	8009fb2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10a      	bne.n	8009f78 <prvProcessTimerOrBlockTask+0x3c>
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d806      	bhi.n	8009f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f6a:	f7ff fa33 	bl	80093d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7ff ff8d 	bl	8009e90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f76:	e01e      	b.n	8009fb6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d008      	beq.n	8009f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f7e:	4b10      	ldr	r3, [pc, #64]	; (8009fc0 <prvProcessTimerOrBlockTask+0x84>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <prvProcessTimerOrBlockTask+0x50>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e000      	b.n	8009f8e <prvProcessTimerOrBlockTask+0x52>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f90:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <prvProcessTimerOrBlockTask+0x88>)
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	f7fe ffdd 	bl	8008f5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009fa2:	f7ff fa17 	bl	80093d4 <xTaskResumeAll>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8009fac:	f000 fa4e 	bl	800a44c <vPortYield>
}
 8009fb0:	e001      	b.n	8009fb6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8009fb2:	f7ff fa0f 	bl	80093d4 <xTaskResumeAll>
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000c24 	.word	0x20000c24
 8009fc4:	20000c28 	.word	0x20000c28

08009fc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fd0:	4b0e      	ldr	r3, [pc, #56]	; (800a00c <prvGetNextExpireTime+0x44>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <prvGetNextExpireTime+0x16>
 8009fda:	2201      	movs	r2, #1
 8009fdc:	e000      	b.n	8009fe0 <prvGetNextExpireTime+0x18>
 8009fde:	2200      	movs	r2, #0
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d105      	bne.n	8009ff8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fec:	4b07      	ldr	r3, [pc, #28]	; (800a00c <prvGetNextExpireTime+0x44>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	60fb      	str	r3, [r7, #12]
 8009ff6:	e001      	b.n	8009ffc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	20000c20 	.word	0x20000c20

0800a010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a018:	f7ff fa6a 	bl	80094f0 <xTaskGetTickCount>
 800a01c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <prvSampleTimeNow+0x3c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	429a      	cmp	r2, r3
 800a026:	d205      	bcs.n	800a034 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a028:	f000 f91e 	bl	800a268 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	e002      	b.n	800a03a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a03a:	4a04      	ldr	r2, [pc, #16]	; (800a04c <prvSampleTimeNow+0x3c>)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a040:	68fb      	ldr	r3, [r7, #12]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20000c30 	.word	0x20000c30

0800a050 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
 800a05c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a05e:	2300      	movs	r3, #0
 800a060:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	429a      	cmp	r2, r3
 800a074:	d812      	bhi.n	800a09c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	1ad2      	subs	r2, r2, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	429a      	cmp	r2, r3
 800a082:	d302      	bcc.n	800a08a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a084:	2301      	movs	r3, #1
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	e01b      	b.n	800a0c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a08a:	4b10      	ldr	r3, [pc, #64]	; (800a0cc <prvInsertTimerInActiveList+0x7c>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3304      	adds	r3, #4
 800a092:	4619      	mov	r1, r3
 800a094:	4610      	mov	r0, r2
 800a096:	f7fe fad4 	bl	8008642 <vListInsert>
 800a09a:	e012      	b.n	800a0c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d206      	bcs.n	800a0b2 <prvInsertTimerInActiveList+0x62>
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d302      	bcc.n	800a0b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	e007      	b.n	800a0c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0b2:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <prvInsertTimerInActiveList+0x80>)
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4610      	mov	r0, r2
 800a0be:	f7fe fac0 	bl	8008642 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0c2:	697b      	ldr	r3, [r7, #20]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20000c24 	.word	0x20000c24
 800a0d0:	20000c20 	.word	0x20000c20

0800a0d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	; 0x30
 800a0d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0da:	e0b2      	b.n	800a242 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	da11      	bge.n	800a106 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <prvProcessReceivedCommands+0x22>
 800a0f0:	f000 faf2 	bl	800a6d8 <ulSetInterruptMask>
 800a0f4:	e7fe      	b.n	800a0f4 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fc:	6850      	ldr	r0, [r2, #4]
 800a0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a100:	6892      	ldr	r2, [r2, #8]
 800a102:	4611      	mov	r1, r2
 800a104:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f2c0 8099 	blt.w	800a240 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d004      	beq.n	800a124 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	3304      	adds	r3, #4
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe fac8 	bl	80086b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a124:	1d3b      	adds	r3, r7, #4
 800a126:	4618      	mov	r0, r3
 800a128:	f7ff ff72 	bl	800a010 <prvSampleTimeNow>
 800a12c:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2b09      	cmp	r3, #9
 800a132:	f200 8086 	bhi.w	800a242 <prvProcessReceivedCommands+0x16e>
 800a136:	a201      	add	r2, pc, #4	; (adr r2, 800a13c <prvProcessReceivedCommands+0x68>)
 800a138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13c:	0800a165 	.word	0x0800a165
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a165 	.word	0x0800a165
 800a148:	0800a1c9 	.word	0x0800a1c9
 800a14c:	0800a1dd 	.word	0x0800a1dd
 800a150:	0800a217 	.word	0x0800a217
 800a154:	0800a165 	.word	0x0800a165
 800a158:	0800a165 	.word	0x0800a165
 800a15c:	0800a1c9 	.word	0x0800a1c9
 800a160:	0800a1dd 	.word	0x0800a1dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a16a:	f043 0301 	orr.w	r3, r3, #1
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	18d1      	adds	r1, r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	6a38      	ldr	r0, [r7, #32]
 800a184:	f7ff ff64 	bl	800a050 <prvInsertTimerInActiveList>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d059      	beq.n	800a242 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	6a38      	ldr	r0, [r7, #32]
 800a194:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d04e      	beq.n	800a242 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	441a      	add	r2, r3
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	6a38      	ldr	r0, [r7, #32]
 800a1b6:	f7ff fe25 	bl	8009e04 <xTimerGenericCommand>
 800a1ba:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d13f      	bne.n	800a242 <prvProcessReceivedCommands+0x16e>
 800a1c2:	f000 fa89 	bl	800a6d8 <ulSetInterruptMask>
 800a1c6:	e7fe      	b.n	800a1c6 <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1da:	e032      	b.n	800a242 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d102      	bne.n	800a202 <prvProcessReceivedCommands+0x12e>
 800a1fc:	f000 fa6c 	bl	800a6d8 <ulSetInterruptMask>
 800a200:	e7fe      	b.n	800a200 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	699a      	ldr	r2, [r3, #24]
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	18d1      	adds	r1, r2, r3
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	69fa      	ldr	r2, [r7, #28]
 800a20e:	6a38      	ldr	r0, [r7, #32]
 800a210:	f7ff ff1e 	bl	800a050 <prvInsertTimerInActiveList>
					break;
 800a214:	e015      	b.n	800a242 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a21c:	f003 0302 	and.w	r3, r3, #2
 800a220:	2b00      	cmp	r3, #0
 800a222:	d103      	bne.n	800a22c <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800a224:	6a38      	ldr	r0, [r7, #32]
 800a226:	f000 fb73 	bl	800a910 <vPortFree>
 800a22a:	e00a      	b.n	800a242 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a232:	f023 0301 	bic.w	r3, r3, #1
 800a236:	b2da      	uxtb	r2, r3
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a23e:	e000      	b.n	800a242 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a240:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a242:	4b08      	ldr	r3, [pc, #32]	; (800a264 <prvProcessReceivedCommands+0x190>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f107 0108 	add.w	r1, r7, #8
 800a24a:	2200      	movs	r2, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fe fc92 	bl	8008b76 <xQueueReceive>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	f47f af41 	bne.w	800a0dc <prvProcessReceivedCommands+0x8>
	}
}
 800a25a:	bf00      	nop
 800a25c:	bf00      	nop
 800a25e:	3728      	adds	r7, #40	; 0x28
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	20000c28 	.word	0x20000c28

0800a268 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b088      	sub	sp, #32
 800a26c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a26e:	e040      	b.n	800a2f2 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a270:	4b29      	ldr	r3, [pc, #164]	; (800a318 <prvSwitchTimerLists+0xb0>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a27a:	4b27      	ldr	r3, [pc, #156]	; (800a318 <prvSwitchTimerLists+0xb0>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3304      	adds	r3, #4
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe fa13 	bl	80086b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a29c:	f003 0304 	and.w	r3, r3, #4
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d026      	beq.n	800a2f2 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d90e      	bls.n	800a2d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2c2:	4b15      	ldr	r3, [pc, #84]	; (800a318 <prvSwitchTimerLists+0xb0>)
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	f7fe f9b8 	bl	8008642 <vListInsert>
 800a2d2:	e00e      	b.n	800a2f2 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	2100      	movs	r1, #0
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f7ff fd90 	bl	8009e04 <xTimerGenericCommand>
 800a2e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d102      	bne.n	800a2f2 <prvSwitchTimerLists+0x8a>
 800a2ec:	f000 f9f4 	bl	800a6d8 <ulSetInterruptMask>
 800a2f0:	e7fe      	b.n	800a2f0 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2f2:	4b09      	ldr	r3, [pc, #36]	; (800a318 <prvSwitchTimerLists+0xb0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1b9      	bne.n	800a270 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <prvSwitchTimerLists+0xb0>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a302:	4b06      	ldr	r3, [pc, #24]	; (800a31c <prvSwitchTimerLists+0xb4>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a04      	ldr	r2, [pc, #16]	; (800a318 <prvSwitchTimerLists+0xb0>)
 800a308:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a30a:	4a04      	ldr	r2, [pc, #16]	; (800a31c <prvSwitchTimerLists+0xb4>)
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	6013      	str	r3, [r2, #0]
}
 800a310:	bf00      	nop
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000c20 	.word	0x20000c20
 800a31c:	20000c24 	.word	0x20000c24

0800a320 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a326:	f000 f8a3 	bl	800a470 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a32a:	4b15      	ldr	r3, [pc, #84]	; (800a380 <prvCheckForValidListAndQueue+0x60>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d120      	bne.n	800a374 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a332:	4814      	ldr	r0, [pc, #80]	; (800a384 <prvCheckForValidListAndQueue+0x64>)
 800a334:	f7fe f934 	bl	80085a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a338:	4813      	ldr	r0, [pc, #76]	; (800a388 <prvCheckForValidListAndQueue+0x68>)
 800a33a:	f7fe f931 	bl	80085a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <prvCheckForValidListAndQueue+0x6c>)
 800a340:	4a10      	ldr	r2, [pc, #64]	; (800a384 <prvCheckForValidListAndQueue+0x64>)
 800a342:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a344:	4b12      	ldr	r3, [pc, #72]	; (800a390 <prvCheckForValidListAndQueue+0x70>)
 800a346:	4a10      	ldr	r2, [pc, #64]	; (800a388 <prvCheckForValidListAndQueue+0x68>)
 800a348:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a34a:	2300      	movs	r3, #0
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	4b11      	ldr	r3, [pc, #68]	; (800a394 <prvCheckForValidListAndQueue+0x74>)
 800a350:	4a11      	ldr	r2, [pc, #68]	; (800a398 <prvCheckForValidListAndQueue+0x78>)
 800a352:	2110      	movs	r1, #16
 800a354:	200a      	movs	r0, #10
 800a356:	f7fe fa2f 	bl	80087b8 <xQueueGenericCreateStatic>
 800a35a:	4603      	mov	r3, r0
 800a35c:	4a08      	ldr	r2, [pc, #32]	; (800a380 <prvCheckForValidListAndQueue+0x60>)
 800a35e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a360:	4b07      	ldr	r3, [pc, #28]	; (800a380 <prvCheckForValidListAndQueue+0x60>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d005      	beq.n	800a374 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <prvCheckForValidListAndQueue+0x60>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	490b      	ldr	r1, [pc, #44]	; (800a39c <prvCheckForValidListAndQueue+0x7c>)
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe fdca 	bl	8008f08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a374:	f000 f88e 	bl	800a494 <vPortExitCritical>
}
 800a378:	bf00      	nop
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20000c28 	.word	0x20000c28
 800a384:	20000bf8 	.word	0x20000bf8
 800a388:	20000c0c 	.word	0x20000c0c
 800a38c:	20000c20 	.word	0x20000c20
 800a390:	20000c24 	.word	0x20000c24
 800a394:	20000cd4 	.word	0x20000cd4
 800a398:	20000c34 	.word	0x20000c34
 800a39c:	0800ac24 	.word	0x0800ac24

0800a3a0 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3a4:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <vPortSetupTimerInterrupt+0x34>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3aa:	4b0b      	ldr	r3, [pc, #44]	; (800a3d8 <vPortSetupTimerInterrupt+0x38>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3b0:	4b0a      	ldr	r3, [pc, #40]	; (800a3dc <vPortSetupTimerInterrupt+0x3c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a0a      	ldr	r2, [pc, #40]	; (800a3e0 <vPortSetupTimerInterrupt+0x40>)
 800a3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ba:	099b      	lsrs	r3, r3, #6
 800a3bc:	4a09      	ldr	r2, [pc, #36]	; (800a3e4 <vPortSetupTimerInterrupt+0x44>)
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a3c2:	4b04      	ldr	r3, [pc, #16]	; (800a3d4 <vPortSetupTimerInterrupt+0x34>)
 800a3c4:	2207      	movs	r2, #7
 800a3c6:	601a      	str	r2, [r3, #0]
}
 800a3c8:	bf00      	nop
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	e000e010 	.word	0xe000e010
 800a3d8:	e000e018 	.word	0xe000e018
 800a3dc:	20000000 	.word	0x20000000
 800a3e0:	10624dd3 	.word	0x10624dd3
 800a3e4:	e000e014 	.word	0xe000e014

0800a3e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800a3f2:	4b09      	ldr	r3, [pc, #36]	; (800a418 <prvTaskExitError+0x30>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fa:	d002      	beq.n	800a402 <prvTaskExitError+0x1a>
 800a3fc:	f000 f96c 	bl	800a6d8 <ulSetInterruptMask>
 800a400:	e7fe      	b.n	800a400 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800a402:	f000 f969 	bl	800a6d8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800a406:	bf00      	nop
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0fc      	beq.n	800a408 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	2000000c 	.word	0x2000000c

0800a41c <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800a420:	4b08      	ldr	r3, [pc, #32]	; (800a444 <prvSetupFPU+0x28>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a07      	ldr	r2, [pc, #28]	; (800a444 <prvSetupFPU+0x28>)
 800a426:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a42a:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800a42c:	4b06      	ldr	r3, [pc, #24]	; (800a448 <prvSetupFPU+0x2c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a05      	ldr	r2, [pc, #20]	; (800a448 <prvSetupFPU+0x2c>)
 800a432:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a436:	6013      	str	r3, [r2, #0]
	}
 800a438:	bf00      	nop
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	e000ed88 	.word	0xe000ed88
 800a448:	e000ef34 	.word	0xe000ef34

0800a44c <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800a44c:	b480      	push	{r7}
 800a44e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a450:	4b06      	ldr	r3, [pc, #24]	; (800a46c <vPortYield+0x20>)
 800a452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a456:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a458:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a45c:	f3bf 8f6f 	isb	sy
}
 800a460:	bf00      	nop
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	e000ed04 	.word	0xe000ed04

0800a470 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a470:	b580      	push	{r7, lr}
 800a472:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800a474:	f000 f930 	bl	800a6d8 <ulSetInterruptMask>
	ulCriticalNesting++;
 800a478:	4b05      	ldr	r3, [pc, #20]	; (800a490 <vPortEnterCritical+0x20>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3301      	adds	r3, #1
 800a47e:	4a04      	ldr	r2, [pc, #16]	; (800a490 <vPortEnterCritical+0x20>)
 800a480:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a482:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a486:	f3bf 8f6f 	isb	sy
}
 800a48a:	bf00      	nop
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	2000000c 	.word	0x2000000c

0800a494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <vPortExitCritical+0x30>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <vPortExitCritical+0x12>
 800a4a0:	f000 f91a 	bl	800a6d8 <ulSetInterruptMask>
 800a4a4:	e7fe      	b.n	800a4a4 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800a4a6:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <vPortExitCritical+0x30>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	4a05      	ldr	r2, [pc, #20]	; (800a4c4 <vPortExitCritical+0x30>)
 800a4ae:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800a4b0:	4b04      	ldr	r3, [pc, #16]	; (800a4c4 <vPortExitCritical+0x30>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d102      	bne.n	800a4be <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	f000 f91a 	bl	800a6f2 <vClearInterruptMask>
	}
}
 800a4be:	bf00      	nop
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	2000000c 	.word	0x2000000c

0800a4c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4ce:	f000 f903 	bl	800a6d8 <ulSetInterruptMask>
 800a4d2:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4d4:	f7ff f81c 	bl	8009510 <xTaskIncrementTick>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4de:	4b05      	ldr	r3, [pc, #20]	; (800a4f4 <xPortSysTickHandler+0x2c>)
 800a4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f903 	bl	800a6f2 <vClearInterruptMask>
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	e000ed04 	.word	0xe000ed04

0800a4f8 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b02      	subs	r3, #2
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800a50e:	7afb      	ldrb	r3, [r7, #11]
 800a510:	2b02      	cmp	r3, #2
 800a512:	d104      	bne.n	800a51e <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 800a514:	f7ff ff82 	bl	800a41c <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800a518:	f000 f8b2 	bl	800a680 <vRestoreContextOfFirstTask>
		}
		break;
 800a51c:	e002      	b.n	800a524 <vPortSVCHandler_C+0x2c>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800a51e:	f000 f8db 	bl	800a6d8 <ulSetInterruptMask>
 800a522:	e7fe      	b.n	800a522 <vPortSVCHandler_C+0x2a>
		}
	}
}
 800a524:	bf00      	nop
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
 800a538:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3b04      	subs	r3, #4
 800a53e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a546:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3b04      	subs	r3, #4
 800a54c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	3b04      	subs	r3, #4
 800a558:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a55a:	4a38      	ldr	r2, [pc, #224]	; (800a63c <pxPortInitialiseStack+0x110>)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	3b04      	subs	r3, #4
 800a564:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800a56c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3b04      	subs	r3, #4
 800a572:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800a57a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3b04      	subs	r3, #4
 800a580:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800a588:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	3b04      	subs	r3, #4
 800a58e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800a596:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	3b04      	subs	r3, #4
 800a59c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	3b04      	subs	r3, #4
 800a5a8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800a5b0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3b04      	subs	r3, #4
 800a5b6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800a5be:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3b04      	subs	r3, #4
 800a5c4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800a5cc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800a5da:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3b04      	subs	r3, #4
 800a5e0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800a5e8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3b04      	subs	r3, #4
 800a5ee:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800a5f6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3b04      	subs	r3, #4
 800a5fc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800a604:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3b04      	subs	r3, #4
 800a60a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800a612:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3b04      	subs	r3, #4
 800a618:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800a620:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3b04      	subs	r3, #4
 800a626:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800a62e:	68fb      	ldr	r3, [r7, #12]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	0800a3e9 	.word	0x0800a3e9

0800a640 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a644:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <xPortStartScheduler+0x38>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a0b      	ldr	r2, [pc, #44]	; (800a678 <xPortStartScheduler+0x38>)
 800a64a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a64e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a650:	4b09      	ldr	r3, [pc, #36]	; (800a678 <xPortStartScheduler+0x38>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a08      	ldr	r2, [pc, #32]	; (800a678 <xPortStartScheduler+0x38>)
 800a656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a65a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800a65c:	f7ff fea0 	bl	800a3a0 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <xPortStartScheduler+0x3c>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800a666:	f000 f823 	bl	800a6b0 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800a66a:	f7ff f803 	bl	8009674 <vTaskSwitchContext>
	prvTaskExitError();
 800a66e:	f7ff febb 	bl	800a3e8 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	bd80      	pop	{r7, pc}
 800a678:	e000ed20 	.word	0xe000ed20
 800a67c:	2000000c 	.word	0x2000000c

0800a680 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a680:	4a07      	ldr	r2, [pc, #28]	; (800a6a0 <pxCurrentTCBConst2>)
 800a682:	6811      	ldr	r1, [r2, #0]
 800a684:	6808      	ldr	r0, [r1, #0]
 800a686:	c806      	ldmia	r0!, {r1, r2}
 800a688:	f381 880b 	msr	PSPLIM, r1
 800a68c:	2102      	movs	r1, #2
 800a68e:	f381 8814 	msr	CONTROL, r1
 800a692:	3020      	adds	r0, #32
 800a694:	f380 8809 	msr	PSP, r0
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	4710      	bx	r2
 800a69e:	bf00      	nop

0800a6a0 <pxCurrentTCBConst2>:
 800a6a0:	200006f0 	.word	0x200006f0
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800a6a4:	bf00      	nop
 800a6a6:	bf00      	nop
	...

0800a6b0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a6b0:	4807      	ldr	r0, [pc, #28]	; (800a6d0 <xVTORConst>)
 800a6b2:	6800      	ldr	r0, [r0, #0]
 800a6b4:	6800      	ldr	r0, [r0, #0]
 800a6b6:	f380 8808 	msr	MSP, r0
 800a6ba:	b662      	cpsie	i
 800a6bc:	b661      	cpsie	f
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	df02      	svc	2
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	f3af 8000 	nop.w

0800a6d0 <xVTORConst>:
 800a6d0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop

0800a6d8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a6d8:	f3ef 8011 	mrs	r0, BASEPRI
 800a6dc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800a6e0:	f381 8811 	msr	BASEPRI, r1
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a6ee:	bf00      	nop
 800a6f0:	4618      	mov	r0, r3

0800a6f2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a6f2:	f380 8811 	msr	BASEPRI, r0
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800a700:	bf00      	nop
	...

0800a710 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a710:	f3ef 8009 	mrs	r0, PSP
 800a714:	f01e 0f10 	tst.w	lr, #16
 800a718:	bf08      	it	eq
 800a71a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a71e:	f3ef 820b 	mrs	r2, PSPLIM
 800a722:	4673      	mov	r3, lr
 800a724:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a728:	4a11      	ldr	r2, [pc, #68]	; (800a770 <pxCurrentTCBConst>)
 800a72a:	6811      	ldr	r1, [r2, #0]
 800a72c:	6008      	str	r0, [r1, #0]
 800a72e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800a732:	f380 8811 	msr	BASEPRI, r0
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f7fe ff99 	bl	8009674 <vTaskSwitchContext>
 800a742:	f04f 0000 	mov.w	r0, #0
 800a746:	f380 8811 	msr	BASEPRI, r0
 800a74a:	4a09      	ldr	r2, [pc, #36]	; (800a770 <pxCurrentTCBConst>)
 800a74c:	6811      	ldr	r1, [r2, #0]
 800a74e:	6808      	ldr	r0, [r1, #0]
 800a750:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a754:	f013 0f10 	tst.w	r3, #16
 800a758:	bf08      	it	eq
 800a75a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a75e:	f382 880b 	msr	PSPLIM, r2
 800a762:	f380 8809 	msr	PSP, r0
 800a766:	4718      	bx	r3
 800a768:	f3af 8000 	nop.w
 800a76c:	f3af 8000 	nop.w

0800a770 <pxCurrentTCBConst>:
 800a770:	200006f0 	.word	0x200006f0
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
	...

0800a780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800a780:	f01e 0f04 	tst.w	lr, #4
 800a784:	bf0c      	ite	eq
 800a786:	f3ef 8008 	mrseq	r0, MSP
 800a78a:	f3ef 8009 	mrsne	r0, PSP
 800a78e:	4904      	ldr	r1, [pc, #16]	; (800a7a0 <svchandler_address_const>)
 800a790:	4708      	bx	r1
 800a792:	bf00      	nop
 800a794:	f3af 8000 	nop.w
 800a798:	f3af 8000 	nop.w
 800a79c:	f3af 8000 	nop.w

0800a7a0 <svchandler_address_const>:
 800a7a0:	0800a4f9 	.word	0x0800a4f9
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a7b4:	f7fe fe00 	bl	80093b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7b8:	4b4f      	ldr	r3, [pc, #316]	; (800a8f8 <pvPortMalloc+0x150>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7c0:	f000 f8f8 	bl	800a9b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7c4:	4b4d      	ldr	r3, [pc, #308]	; (800a8fc <pvPortMalloc+0x154>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f040 8083 	bne.w	800a8d8 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d015      	beq.n	800a804 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800a7d8:	2208      	movs	r2, #8
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4413      	add	r3, r2
 800a7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00c      	beq.n	800a804 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f023 0307 	bic.w	r3, r3, #7
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f003 0307 	and.w	r3, r3, #7
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <pvPortMalloc+0x5c>
 800a7fe:	f7ff ff6b 	bl	800a6d8 <ulSetInterruptMask>
 800a802:	e7fe      	b.n	800a802 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d066      	beq.n	800a8d8 <pvPortMalloc+0x130>
 800a80a:	4b3d      	ldr	r3, [pc, #244]	; (800a900 <pvPortMalloc+0x158>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	429a      	cmp	r2, r3
 800a812:	d861      	bhi.n	800a8d8 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a814:	4b3b      	ldr	r3, [pc, #236]	; (800a904 <pvPortMalloc+0x15c>)
 800a816:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a818:	4b3a      	ldr	r3, [pc, #232]	; (800a904 <pvPortMalloc+0x15c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a81e:	e004      	b.n	800a82a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	429a      	cmp	r2, r3
 800a832:	d903      	bls.n	800a83c <pvPortMalloc+0x94>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1f1      	bne.n	800a820 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a83c:	4b2e      	ldr	r3, [pc, #184]	; (800a8f8 <pvPortMalloc+0x150>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	429a      	cmp	r2, r3
 800a844:	d048      	beq.n	800a8d8 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2208      	movs	r2, #8
 800a84c:	4413      	add	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	1ad2      	subs	r2, r2, r3
 800a860:	2308      	movs	r3, #8
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	429a      	cmp	r2, r3
 800a866:	d917      	bls.n	800a898 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4413      	add	r3, r2
 800a86e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f003 0307 	and.w	r3, r3, #7
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <pvPortMalloc+0xd8>
 800a87a:	f7ff ff2d 	bl	800a6d8 <ulSetInterruptMask>
 800a87e:	e7fe      	b.n	800a87e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	1ad2      	subs	r2, r2, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a892:	68b8      	ldr	r0, [r7, #8]
 800a894:	f000 f8f0 	bl	800aa78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a898:	4b19      	ldr	r3, [pc, #100]	; (800a900 <pvPortMalloc+0x158>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	4a17      	ldr	r2, [pc, #92]	; (800a900 <pvPortMalloc+0x158>)
 800a8a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8a6:	4b16      	ldr	r3, [pc, #88]	; (800a900 <pvPortMalloc+0x158>)
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4b17      	ldr	r3, [pc, #92]	; (800a908 <pvPortMalloc+0x160>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d203      	bcs.n	800a8ba <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8b2:	4b13      	ldr	r3, [pc, #76]	; (800a900 <pvPortMalloc+0x158>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a14      	ldr	r2, [pc, #80]	; (800a908 <pvPortMalloc+0x160>)
 800a8b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <pvPortMalloc+0x154>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a8ce:	4b0f      	ldr	r3, [pc, #60]	; (800a90c <pvPortMalloc+0x164>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	4a0d      	ldr	r2, [pc, #52]	; (800a90c <pvPortMalloc+0x164>)
 800a8d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8d8:	f7fe fd7c 	bl	80093d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f003 0307 	and.w	r3, r3, #7
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <pvPortMalloc+0x144>
 800a8e6:	f7ff fef7 	bl	800a6d8 <ulSetInterruptMask>
 800a8ea:	e7fe      	b.n	800a8ea <pvPortMalloc+0x142>
	return pvReturn;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20004d2c 	.word	0x20004d2c
 800a8fc:	20004d40 	.word	0x20004d40
 800a900:	20004d30 	.word	0x20004d30
 800a904:	20004d24 	.word	0x20004d24
 800a908:	20004d34 	.word	0x20004d34
 800a90c:	20004d38 	.word	0x20004d38

0800a910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d03d      	beq.n	800a99e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a922:	2308      	movs	r3, #8
 800a924:	425b      	negs	r3, r3
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4413      	add	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	4b1c      	ldr	r3, [pc, #112]	; (800a9a8 <vPortFree+0x98>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4013      	ands	r3, r2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d102      	bne.n	800a944 <vPortFree+0x34>
 800a93e:	f7ff fecb 	bl	800a6d8 <ulSetInterruptMask>
 800a942:	e7fe      	b.n	800a942 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <vPortFree+0x42>
 800a94c:	f7ff fec4 	bl	800a6d8 <ulSetInterruptMask>
 800a950:	e7fe      	b.n	800a950 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	4b14      	ldr	r3, [pc, #80]	; (800a9a8 <vPortFree+0x98>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4013      	ands	r3, r2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d01e      	beq.n	800a99e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d11a      	bne.n	800a99e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	4b0e      	ldr	r3, [pc, #56]	; (800a9a8 <vPortFree+0x98>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	43db      	mvns	r3, r3
 800a972:	401a      	ands	r2, r3
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a978:	f7fe fd1e 	bl	80093b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	4b0a      	ldr	r3, [pc, #40]	; (800a9ac <vPortFree+0x9c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4413      	add	r3, r2
 800a986:	4a09      	ldr	r2, [pc, #36]	; (800a9ac <vPortFree+0x9c>)
 800a988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a98a:	68b8      	ldr	r0, [r7, #8]
 800a98c:	f000 f874 	bl	800aa78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a990:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <vPortFree+0xa0>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3301      	adds	r3, #1
 800a996:	4a06      	ldr	r2, [pc, #24]	; (800a9b0 <vPortFree+0xa0>)
 800a998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a99a:	f7fe fd1b 	bl	80093d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a99e:	bf00      	nop
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20004d40 	.word	0x20004d40
 800a9ac:	20004d30 	.word	0x20004d30
 800a9b0:	20004d3c 	.word	0x20004d3c

0800a9b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a9be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9c0:	4b27      	ldr	r3, [pc, #156]	; (800aa60 <prvHeapInit+0xac>)
 800a9c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00c      	beq.n	800a9e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3307      	adds	r3, #7
 800a9d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f023 0307 	bic.w	r3, r3, #7
 800a9da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	4a1f      	ldr	r2, [pc, #124]	; (800aa60 <prvHeapInit+0xac>)
 800a9e4:	4413      	add	r3, r2
 800a9e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9ec:	4a1d      	ldr	r2, [pc, #116]	; (800aa64 <prvHeapInit+0xb0>)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9f2:	4b1c      	ldr	r3, [pc, #112]	; (800aa64 <prvHeapInit+0xb0>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa00:	2208      	movs	r2, #8
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	1a9b      	subs	r3, r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f023 0307 	bic.w	r3, r3, #7
 800aa0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4a15      	ldr	r2, [pc, #84]	; (800aa68 <prvHeapInit+0xb4>)
 800aa14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa16:	4b14      	ldr	r3, [pc, #80]	; (800aa68 <prvHeapInit+0xb4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa1e:	4b12      	ldr	r3, [pc, #72]	; (800aa68 <prvHeapInit+0xb4>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2200      	movs	r2, #0
 800aa24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa34:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <prvHeapInit+0xb4>)
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <prvHeapInit+0xb8>)
 800aa42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	4a09      	ldr	r2, [pc, #36]	; (800aa70 <prvHeapInit+0xbc>)
 800aa4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa4c:	4b09      	ldr	r3, [pc, #36]	; (800aa74 <prvHeapInit+0xc0>)
 800aa4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa52:	601a      	str	r2, [r3, #0]
}
 800aa54:	bf00      	nop
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	20000d24 	.word	0x20000d24
 800aa64:	20004d24 	.word	0x20004d24
 800aa68:	20004d2c 	.word	0x20004d2c
 800aa6c:	20004d34 	.word	0x20004d34
 800aa70:	20004d30 	.word	0x20004d30
 800aa74:	20004d40 	.word	0x20004d40

0800aa78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa80:	4b28      	ldr	r3, [pc, #160]	; (800ab24 <prvInsertBlockIntoFreeList+0xac>)
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	e002      	b.n	800aa8c <prvInsertBlockIntoFreeList+0x14>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d8f7      	bhi.n	800aa86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d108      	bne.n	800aaba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	441a      	add	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	441a      	add	r2, r3
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d118      	bne.n	800ab00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <prvInsertBlockIntoFreeList+0xb0>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d00d      	beq.n	800aaf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	441a      	add	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	e008      	b.n	800ab08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aaf6:	4b0c      	ldr	r3, [pc, #48]	; (800ab28 <prvInsertBlockIntoFreeList+0xb0>)
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	e003      	b.n	800ab08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d002      	beq.n	800ab16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab16:	bf00      	nop
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	20004d24 	.word	0x20004d24
 800ab28:	20004d2c 	.word	0x20004d2c

0800ab2c <__libc_init_array>:
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	4d0d      	ldr	r5, [pc, #52]	; (800ab64 <__libc_init_array+0x38>)
 800ab30:	2600      	movs	r6, #0
 800ab32:	4c0d      	ldr	r4, [pc, #52]	; (800ab68 <__libc_init_array+0x3c>)
 800ab34:	1b64      	subs	r4, r4, r5
 800ab36:	10a4      	asrs	r4, r4, #2
 800ab38:	42a6      	cmp	r6, r4
 800ab3a:	d109      	bne.n	800ab50 <__libc_init_array+0x24>
 800ab3c:	4d0b      	ldr	r5, [pc, #44]	; (800ab6c <__libc_init_array+0x40>)
 800ab3e:	2600      	movs	r6, #0
 800ab40:	4c0b      	ldr	r4, [pc, #44]	; (800ab70 <__libc_init_array+0x44>)
 800ab42:	f000 f82d 	bl	800aba0 <_init>
 800ab46:	1b64      	subs	r4, r4, r5
 800ab48:	10a4      	asrs	r4, r4, #2
 800ab4a:	42a6      	cmp	r6, r4
 800ab4c:	d105      	bne.n	800ab5a <__libc_init_array+0x2e>
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab54:	3601      	adds	r6, #1
 800ab56:	4798      	blx	r3
 800ab58:	e7ee      	b.n	800ab38 <__libc_init_array+0xc>
 800ab5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab5e:	3601      	adds	r6, #1
 800ab60:	4798      	blx	r3
 800ab62:	e7f2      	b.n	800ab4a <__libc_init_array+0x1e>
 800ab64:	0800ad68 	.word	0x0800ad68
 800ab68:	0800ad68 	.word	0x0800ad68
 800ab6c:	0800ad68 	.word	0x0800ad68
 800ab70:	0800ad6c 	.word	0x0800ad6c

0800ab74 <memcpy>:
 800ab74:	440a      	add	r2, r1
 800ab76:	1e43      	subs	r3, r0, #1
 800ab78:	4291      	cmp	r1, r2
 800ab7a:	d100      	bne.n	800ab7e <memcpy+0xa>
 800ab7c:	4770      	bx	lr
 800ab7e:	b510      	push	{r4, lr}
 800ab80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab84:	4291      	cmp	r1, r2
 800ab86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab8a:	d1f9      	bne.n	800ab80 <memcpy+0xc>
 800ab8c:	bd10      	pop	{r4, pc}

0800ab8e <memset>:
 800ab8e:	4402      	add	r2, r0
 800ab90:	4603      	mov	r3, r0
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d100      	bne.n	800ab98 <memset+0xa>
 800ab96:	4770      	bx	lr
 800ab98:	f803 1b01 	strb.w	r1, [r3], #1
 800ab9c:	e7f9      	b.n	800ab92 <memset+0x4>
	...

0800aba0 <_init>:
 800aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba2:	bf00      	nop
 800aba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba6:	bc08      	pop	{r3}
 800aba8:	469e      	mov	lr, r3
 800abaa:	4770      	bx	lr

0800abac <_fini>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	bf00      	nop
 800abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb2:	bc08      	pop	{r3}
 800abb4:	469e      	mov	lr, r3
 800abb6:	4770      	bx	lr
